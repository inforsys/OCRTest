#define MCG_WINRT_SUPPORTED
using Mcg.System;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Runtime.InteropServices.WindowsRuntime;
using global::Windows.Foundation;
using global::Windows.Foundation.Collections;


// -----------------------------------------------------------------------------------------------------------
// 
// WARNING: THIS SOURCE FILE IS FOR 64-BIT BUILDS ONLY!
// 
// MCG GENERATED CODE
// 
// This C# source file is generated by MCG and is added into the application at compile time to support interop features.
// 
// It has three primary components:
// 
// 1. Public type definitions with interop implementation used by this application including WinRT & COM data structures and P/Invokes.
// 
// 2. The '__Interop' class containing marshaling code that acts as a bridge from managed code to native code.
// 
// 3. The 'McgNative' class containing marshaling code and native type definitions that call into native code and are called by native code.
// 
// -----------------------------------------------------------------------------------------------------------
// 
// warning CS0067: The event 'event' is never used
#pragma warning disable 67
// warning CS0169: The field 'field' is never used
#pragma warning disable 169
// warning CS0649: Field 'field' is never assigned to, and will always have its default value 0
#pragma warning disable 414
// warning CS0414: The private field 'field' is assigned but its value is never used
#pragma warning disable 649
// warning CS1591: Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// warning CS0108 'member1' hides inherited member 'member2'. Use the new keyword if hiding was intended.
#pragma warning disable 108
// warning CS0114 'member1' hides inherited member 'member2'.  To make the current method override that implementation, add the override keyword. Otherwise add the new keyword.
#pragma warning disable 114
// warning CS0659 'type' overrides Object.Equals but does not override GetHashCode.
#pragma warning disable 659
// warning CS0465 Introducing a 'Finalize' method can interfere with destructor invocation. Did you intend to declare a destructor?
#pragma warning disable 465
// warning CS0028 'function declaration' has the wrong signature to be an entry point
#pragma warning disable 28
// warning CS0162 Unreachable code Detected
#pragma warning disable 162
// warning CS0628 new protected member declared in sealed class
#pragma warning disable 628

namespace __Interop
{
	/// <summary>
	/// P/Invoke class for module 'kernel32.dll'
	/// </summary>
	public unsafe static partial class kernel32_dll
	{
		// Signature, SetDllDirectory, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x00041B44] string__wchar_t *, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickNET+NativeWindowsMethods", "SetDllDirectory")]
		public static bool SetDllDirectory(string lpPathName)
		{
			// Setup
			ushort* unsafe_lpPathName = default(ushort*);
			int unsafe___value;
			// Marshalling
			fixed (char* pinned_lpPathName = lpPathName)
			{
				unsafe_lpPathName = (ushort*)pinned_lpPathName;
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = global::__Interop.kernel32_dll_PInvokes.SetDllDirectory(unsafe_lpPathName);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			}
			// Return
			return unsafe___value != 0;
		}

		// Signature, CreateDirectoryPrivate, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x00041B44] string__wchar_t *, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x0004314C] __Interop_Kernel32_SECURITY_ATTRIBUTES__System_IO_FileSystem____Interop_Kernel32_SECURITY_ATTRIBUTES__System_IO_FileSystem, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.IO.FileSystem, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Kernel32", "CreateDirectoryPrivate")]
		public static bool CreateDirectoryPrivate(
					string path, 
					ref global::_.Interop_Kernel32_SECURITY_ATTRIBUTES__System_IO_FileSystem lpSecurityAttributes)
		{
			// Setup
			ushort* unsafe_path = default(ushort*);
			int unsafe___value;
			// Marshalling
			fixed (char* pinned_path = path)
			{
				unsafe_path = (ushort*)pinned_path;
				fixed (global::_.Interop_Kernel32_SECURITY_ATTRIBUTES__System_IO_FileSystem* pinned_lpSecurityAttributes = &(lpSecurityAttributes))
				{
					global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
					// Call to native method
					unsafe___value = global::__Interop.kernel32_dll_PInvokes.CreateDirectoryPrivate(
										unsafe_path, 
										pinned_lpSecurityAttributes
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
					global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
				}
			}
			// Return
			return unsafe___value != 0;
		}

		// Signature, SetThreadErrorMode, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000419B0] uint__unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] uint__unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.IO.FileSystem, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Kernel32", "SetThreadErrorMode")]
		public static bool SetThreadErrorMode(
					uint dwNewMode, 
					out uint lpOldMode)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			fixed (uint* pinned_lpOldMode = &(lpOldMode))
			{
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = global::__Interop.kernel32_dll_PInvokes.SetThreadErrorMode(
									dwNewMode, 
									pinned_lpOldMode
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			}
			// Return
			return unsafe___value != 0;
		}

		// Signature, GetFileAttributesExPrivate, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x00041B44] string__wchar_t *, [fwd] [in] [EETypeRva:0x00042D60] __Interop_Kernel32_GET_FILEEX_INFO_LEVELS__System_IO_FileSystem__Interop_Kernel32_GET_FILEEX_INFO_LEVELS__System_IO_FileSystem, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x0004314C] __Interop_Kernel32_WIN32_FILE_ATTRIBUTE_DATA__System_IO_FileSystem____Interop_Kernel32_WIN32_FILE_ATTRIBUTE_DATA__System_IO_FileSystem, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.IO.FileSystem, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Kernel32", "GetFileAttributesExPrivate")]
		public static bool GetFileAttributesExPrivate(
					string name, 
					global::_.Interop_Kernel32_GET_FILEEX_INFO_LEVELS__System_IO_FileSystem fileInfoLevel, 
					ref global::_.Interop_Kernel32_WIN32_FILE_ATTRIBUTE_DATA__System_IO_FileSystem lpFileInformation)
		{
			// Setup
			ushort* unsafe_name = default(ushort*);
			int unsafe___value;
			// Marshalling
			fixed (char* pinned_name = name)
			{
				unsafe_name = (ushort*)pinned_name;
				fixed (global::_.Interop_Kernel32_WIN32_FILE_ATTRIBUTE_DATA__System_IO_FileSystem* pinned_lpFileInformation = &(lpFileInformation))
				{
					global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
					// Call to native method
					unsafe___value = global::__Interop.kernel32_dll_PInvokes.GetFileAttributesExPrivate(
										unsafe_name, 
										fileInfoLevel, 
										pinned_lpFileInformation
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
					global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
				}
			}
			// Return
			return unsafe___value != 0;
		}

		// Signature, FindFirstFileExPrivate, [fwd] [return] [EETypeRva:0x000434A4] Microsoft_Win32_SafeHandles_SafeFindHandle__System_IO_FileSystem____w64 int, [fwd] [in] [EETypeRva:0x00041B44] string__wchar_t *, [fwd] [in] [EETypeRva:0x00042D60] __Interop_Kernel32_FINDEX_INFO_LEVELS__System_IO_FileSystem__Interop_Kernel32_FINDEX_INFO_LEVELS__System_IO_FileSystem, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x0004314C] __Interop_Kernel32_WIN32_FIND_DATA__System_IO_FileSystem____Interop_Kernel32_WIN32_FIND_DATA__System_IO_FileSystem, [fwd] [in] [EETypeRva:0x00042D60] __Interop_Kernel32_FINDEX_SEARCH_OPS__System_IO_FileSystem__Interop_Kernel32_FINDEX_SEARCH_OPS__System_IO_FileSystem, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.IO.FileSystem, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Kernel32", "FindFirstFileExPrivate")]
		public static global::Microsoft.Win32.SafeHandles.SafeFindHandle__System_IO_FileSystem FindFirstFileExPrivate(
					string lpFileName, 
					global::_.Interop_Kernel32_FINDEX_INFO_LEVELS__System_IO_FileSystem fInfoLevelId, 
					ref global::_.Interop_Kernel32_WIN32_FIND_DATA__System_IO_FileSystem lpFindFileData, 
					global::_.Interop_Kernel32_FINDEX_SEARCH_OPS__System_IO_FileSystem fSearchOp, 
					global::System.IntPtr lpSearchFilter, 
					int dwAdditionalFlags)
		{
			// Setup
			ushort* unsafe_lpFileName = default(ushort*);
			global::Microsoft.Win32.SafeHandles.SafeFindHandle__System_IO_FileSystem __value;
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (char* pinned_lpFileName = lpFileName)
			{
				unsafe_lpFileName = (ushort*)pinned_lpFileName;
				fixed (global::_.Interop_Kernel32_WIN32_FIND_DATA__System_IO_FileSystem* pinned_lpFindFileData = &(lpFindFileData))
				{
					__value = new global::Microsoft.Win32.SafeHandles.SafeFindHandle__System_IO_FileSystem();
					global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
					// Call to native method
					unsafe___value = global::__Interop.kernel32_dll_PInvokes.FindFirstFileExPrivate(
										unsafe_lpFileName, 
										fInfoLevelId, 
										pinned_lpFindFileData, 
										fSearchOp, 
										lpSearchFilter, 
										dwAdditionalFlags
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
					global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
					global::System.Runtime.InteropServices.McgMarshal.InitializeHandle(
										__value, 
										unsafe___value
									);
				}
			}
			// Return
			return __value;
		}

		// Signature, CloseHandle, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.IO.FileSystem, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Kernel32", "CloseHandle")]
		public static bool CloseHandle(global::System.IntPtr handle)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.kernel32_dll_PInvokes.CloseHandle(handle);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
			return unsafe___value != 0;
		}

		// Signature, DeleteFilePrivate, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x00041B44] string__wchar_t *, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.IO.FileSystem, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Kernel32", "DeleteFilePrivate")]
		public static bool DeleteFilePrivate(string path)
		{
			// Setup
			ushort* unsafe_path = default(ushort*);
			int unsafe___value;
			// Marshalling
			fixed (char* pinned_path = path)
			{
				unsafe_path = (ushort*)pinned_path;
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = global::__Interop.kernel32_dll_PInvokes.DeleteFilePrivate(unsafe_path);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			}
			// Return
			return unsafe___value != 0;
		}

		// Signature, GetCPInfoExW, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] uint__unsigned int, [fwd] [in] [EETypeRva:0x000419B0] uint__unsigned int, [fwd] [in] [EETypeRva:0x000419B0] __Interop_Kernel32_CPINFOEXW__System_Text_Encoding_CodePages___ptr__Interop_Kernel32_CPINFOEXW__System_Text_Encoding_CodePages *, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Text.Encoding.CodePages, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Kernel32", "GetCPInfoExW")]
		public static int GetCPInfoExW(
					uint CodePage, 
					uint dwFlags, 
					global::_.Interop_Kernel32_CPINFOEXW__System_Text_Encoding_CodePages* lpCPInfoEx)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.kernel32_dll_PInvokes.GetCPInfoExW(
								CodePage, 
								dwFlags, 
								((global::_.Interop_Kernel32_CPINFOEXW__System_Text_Encoding_CodePages*)lpCPInfoEx)
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, FindNextFile, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_Win32_SafeHandles_SafeFindHandle__System_IO_FileSystem____w64 int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x0004314C] __Interop_Kernel32_WIN32_FIND_DATA__System_IO_FileSystem____Interop_Kernel32_WIN32_FIND_DATA__System_IO_FileSystem, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.IO.FileSystem, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Kernel32", "FindNextFile")]
		public static bool FindNextFile(
					global::Microsoft.Win32.SafeHandles.SafeFindHandle__System_IO_FileSystem hndFindFile, 
					ref global::_.Interop_Kernel32_WIN32_FIND_DATA__System_IO_FileSystem lpFindFileData)
		{
			// Setup
			bool addRefed = false;
			int unsafe___value;
			// Marshalling
			hndFindFile.DangerousAddRef(ref addRefed);
			fixed (global::_.Interop_Kernel32_WIN32_FIND_DATA__System_IO_FileSystem* pinned_lpFindFileData = &(lpFindFileData))
			{
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = global::__Interop.kernel32_dll_PInvokes.FindNextFile(
									hndFindFile.DangerousGetHandle(), 
									pinned_lpFindFileData
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			}
			if (addRefed)
				hndFindFile.DangerousRelease();
			// Return
			return unsafe___value != 0;
		}

		// Signature, CopyFileExPrivate, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x00041B44] string__wchar_t *, [fwd] [in] [EETypeRva:0x00041B44] string__wchar_t *, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.IO.FileSystem, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Kernel32", "CopyFileExPrivate")]
		public static bool CopyFileExPrivate(
					string src, 
					string dst, 
					global::System.IntPtr progressRoutine, 
					global::System.IntPtr progressData, 
					ref int cancel, 
					int flags)
		{
			// Setup
			ushort* unsafe_src = default(ushort*);
			ushort* unsafe_dst = default(ushort*);
			int unsafe___value;
			// Marshalling
			fixed (char* pinned_src = src)
			{
				unsafe_src = (ushort*)pinned_src;
				fixed (char* pinned_dst = dst)
				{
					unsafe_dst = (ushort*)pinned_dst;
					fixed (int* pinned_cancel = &(cancel))
					{
						global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
						// Call to native method
						unsafe___value = global::__Interop.kernel32_dll_PInvokes.CopyFileExPrivate(
											unsafe_src, 
											unsafe_dst, 
											progressRoutine, 
											progressData, 
											pinned_cancel, 
											flags
										);
						global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
						global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
					}
				}
			}
			// Return
			return unsafe___value != 0;
		}

		// Signature, CreateFile2, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00041B44] string__wchar_t *, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x00042D60] System_IO_FileShare__System_Private_CoreLib__FileShare__System_Private_CoreLib, [fwd] [in] [EETypeRva:0x00042D60] System_IO_FileMode__System_Private_CoreLib__FileMode__System_Private_CoreLib, [fwd] [in] [managedbyref] [nativebyref] [EETypeRva:0x0004314C] __Interop_Kernel32_CREATEFILE2_EXTENDED_PARAMETERS__System_IO_FileSystem____Interop_Kernel32_CREATEFILE2_EXTENDED_PARAMETERS__System_IO_FileSystem, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.IO.FileSystem, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Kernel32", "CreateFile2")]
		public static global::System.IntPtr CreateFile2(
					string lpFileName, 
					int dwDesiredAccess, 
					global::System_IO.FileShare__System_Private_CoreLib dwShareMode, 
					global::System_IO.FileMode__System_Private_CoreLib dwCreationDisposition, 
					ref global::_.Interop_Kernel32_CREATEFILE2_EXTENDED_PARAMETERS__System_IO_FileSystem parameters)
		{
			// Setup
			ushort* unsafe_lpFileName = default(ushort*);
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (char* pinned_lpFileName = lpFileName)
			{
				unsafe_lpFileName = (ushort*)pinned_lpFileName;
				fixed (global::_.Interop_Kernel32_CREATEFILE2_EXTENDED_PARAMETERS__System_IO_FileSystem* pinned_parameters = &(parameters))
				{
					global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
					// Call to native method
					unsafe___value = global::__Interop.kernel32_dll_PInvokes.CreateFile2(
										unsafe_lpFileName, 
										dwDesiredAccess, 
										dwShareMode, 
										dwCreationDisposition, 
										pinned_parameters
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
					global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
				}
			}
			// Return
			return unsafe___value;
		}

		// Signature, RemoveDirectoryPrivate, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x00041B44] string__wchar_t *, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.IO.FileSystem, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Kernel32", "RemoveDirectoryPrivate")]
		public static bool RemoveDirectoryPrivate(string path)
		{
			// Setup
			ushort* unsafe_path = default(ushort*);
			int unsafe___value;
			// Marshalling
			fixed (char* pinned_path = path)
			{
				unsafe_path = (ushort*)pinned_path;
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = global::__Interop.kernel32_dll_PInvokes.RemoveDirectoryPrivate(unsafe_path);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			}
			// Return
			return unsafe___value != 0;
		}

		// Signature, DeleteVolumeMountPointPrivate, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x00041B44] string__wchar_t *, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.IO.FileSystem, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Kernel32", "DeleteVolumeMountPointPrivate")]
		public static bool DeleteVolumeMountPointPrivate(string mountPoint)
		{
			// Setup
			ushort* unsafe_mountPoint = default(ushort*);
			int unsafe___value;
			// Marshalling
			fixed (char* pinned_mountPoint = mountPoint)
			{
				unsafe_mountPoint = (ushort*)pinned_mountPoint;
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = global::__Interop.kernel32_dll_PInvokes.DeleteVolumeMountPointPrivate(unsafe_mountPoint);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			}
			// Return
			return unsafe___value != 0;
		}

		// Signature, FindClose, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.IO.FileSystem, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Kernel32", "FindClose")]
		public static bool FindClose(global::System.IntPtr hFindFile)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.kernel32_dll_PInvokes.FindClose(hFindFile);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
			return unsafe___value != 0;
		}

		// Signature, FormatMessage, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] uint__unsigned int, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] char___ptrwchar_t *, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x00042A40] rg_System_IntPtr____w64 int *, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.X509Certificates, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
			"", "Interop+Kernel32", "FormatMessage")]
		public static int FormatMessage(
					int dwFlags, 
					global::System.IntPtr lpSource, 
					uint dwMessageId, 
					int dwLanguageId, 
					char* lpBuffer, 
					int nSize, 
					global::System.IntPtr[] arguments)
		{
			// Setup
			global::System.IntPtr* unsafe_arguments;
			int unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_arguments = ((arguments != null 
						&& arguments.Length == 0) ? new global::System.IntPtr[1] : arguments))
			{
				unsafe_arguments = (global::System.IntPtr*)pinned_arguments;
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = global::__Interop.kernel32_dll_PInvokes.FormatMessage(
									dwFlags, 
									lpSource, 
									dwMessageId, 
									dwLanguageId, 
									((ushort*)lpBuffer), 
									nSize, 
									unsafe_arguments
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			}
			// Return
			return unsafe___value;
		}

		// Signature, FormatMessage__0, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] uint__unsigned int, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] char___ptrwchar_t *, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x00042A40] rg_System_IntPtr____w64 int *, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.IO.FileSystem, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Kernel32", "FormatMessage")]
		public static int FormatMessage__0(
					int dwFlags, 
					global::System.IntPtr lpSource, 
					uint dwMessageId, 
					int dwLanguageId, 
					char* lpBuffer, 
					int nSize, 
					global::System.IntPtr[] arguments)
		{
			// Setup
			global::System.IntPtr* unsafe_arguments;
			int unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_arguments = ((arguments != null 
						&& arguments.Length == 0) ? new global::System.IntPtr[1] : arguments))
			{
				unsafe_arguments = (global::System.IntPtr*)pinned_arguments;
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = global::__Interop.kernel32_dll_PInvokes.FormatMessage__0(
									dwFlags, 
									lpSource, 
									dwMessageId, 
									dwLanguageId, 
									((ushort*)lpBuffer), 
									nSize, 
									unsafe_arguments
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			}
			// Return
			return unsafe___value;
		}

		// Signature, FormatMessage__1, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] uint__unsigned int, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] char___ptrwchar_t *, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x00042A40] rg_System_IntPtr____w64 int *, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.Cng, Version=4.3.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Kernel32", "FormatMessage")]
		public static int FormatMessage__1(
					int dwFlags, 
					global::System.IntPtr lpSource, 
					uint dwMessageId, 
					int dwLanguageId, 
					char* lpBuffer, 
					int nSize, 
					global::System.IntPtr[] arguments)
		{
			// Setup
			global::System.IntPtr* unsafe_arguments;
			int unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_arguments = ((arguments != null 
						&& arguments.Length == 0) ? new global::System.IntPtr[1] : arguments))
			{
				unsafe_arguments = (global::System.IntPtr*)pinned_arguments;
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = global::__Interop.kernel32_dll_PInvokes.FormatMessage__1(
									dwFlags, 
									lpSource, 
									dwMessageId, 
									dwLanguageId, 
									((ushort*)lpBuffer), 
									nSize, 
									unsafe_arguments
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			}
			// Return
			return unsafe___value;
		}

		// Signature, FormatMessage__2, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] uint__unsigned int, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] char___ptrwchar_t *, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x00042A40] rg_System_IntPtr____w64 int *, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.Win32.Primitives, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Kernel32", "FormatMessage")]
		public static int FormatMessage__2(
					int dwFlags, 
					global::System.IntPtr lpSource, 
					uint dwMessageId, 
					int dwLanguageId, 
					char* lpBuffer, 
					int nSize, 
					global::System.IntPtr[] arguments)
		{
			// Setup
			global::System.IntPtr* unsafe_arguments;
			int unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_arguments = ((arguments != null 
						&& arguments.Length == 0) ? new global::System.IntPtr[1] : arguments))
			{
				unsafe_arguments = (global::System.IntPtr*)pinned_arguments;
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = global::__Interop.kernel32_dll_PInvokes.FormatMessage__2(
									dwFlags, 
									lpSource, 
									dwMessageId, 
									dwLanguageId, 
									((ushort*)lpBuffer), 
									nSize, 
									unsafe_arguments
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			}
			// Return
			return unsafe___value;
		}

		// Signature, FormatMessage__3, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] uint__unsigned int, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] char___ptrwchar_t *, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x00042A40] rg_System_IntPtr____w64 int *, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.Algorithms, Version=4.3.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Kernel32", "FormatMessage")]
		public static int FormatMessage__3(
					int dwFlags, 
					global::System.IntPtr lpSource, 
					uint dwMessageId, 
					int dwLanguageId, 
					char* lpBuffer, 
					int nSize, 
					global::System.IntPtr[] arguments)
		{
			// Setup
			global::System.IntPtr* unsafe_arguments;
			int unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_arguments = ((arguments != null 
						&& arguments.Length == 0) ? new global::System.IntPtr[1] : arguments))
			{
				unsafe_arguments = (global::System.IntPtr*)pinned_arguments;
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = global::__Interop.kernel32_dll_PInvokes.FormatMessage__3(
									dwFlags, 
									lpSource, 
									dwMessageId, 
									dwLanguageId, 
									((ushort*)lpBuffer), 
									nSize, 
									unsafe_arguments
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			}
			// Return
			return unsafe___value;
		}

		// Signature, GetCurrentThread, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Principal.Windows, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Kernel32", "GetCurrentThread")]
		public static global::System.IntPtr GetCurrentThread()
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.kernel32_dll_PInvokes.GetCurrentThread();
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, GetCurrentProcess, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Principal.Windows, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Kernel32", "GetCurrentProcess")]
		public static global::System.IntPtr GetCurrentProcess()
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.kernel32_dll_PInvokes.GetCurrentProcess();
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
			return unsafe___value;
		}

		// Signature, CloseHandle__0, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Principal.Windows, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Kernel32", "CloseHandle")]
		public static bool CloseHandle__0(global::System.IntPtr handle)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.kernel32_dll_PInvokes.CloseHandle__0(handle);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
			return unsafe___value != 0;
		}

		// Signature, CheckTokenMembershipEx, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_Win32_SafeHandles_SafeAccessTokenHandle__System_Security_Principal_Windows____w64 int, [fwd] [in] [EETypeRva:0x00042A40] rg_byte__unsigned char *, [fwd] [in] [EETypeRva:0x000419B0] uint__unsigned int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00040848] bool__System.Boolean, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Principal.Windows, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Kernel32", "CheckTokenMembershipEx")]
		public static bool CheckTokenMembershipEx(
					global::Microsoft.Win32.SafeHandles.SafeAccessTokenHandle__System_Security_Principal_Windows TokenHandle, 
					byte[] SidToCheck, 
					uint Flags, 
					ref bool IsMember)
		{
			// Setup
			bool addRefed = false;
			byte* unsafe_SidToCheck;
			int unsafe_IsMember;
			int unsafe___value;
			// Marshalling
			TokenHandle.DangerousAddRef(ref addRefed);
			fixed (byte* pinned_SidToCheck = ((SidToCheck != null 
						&& SidToCheck.Length == 0) ? new byte[1] : SidToCheck))
			{
				unsafe_SidToCheck = (byte*)pinned_SidToCheck;
				unsafe_IsMember = (IsMember ? 1 : 0);
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = global::__Interop.kernel32_dll_PInvokes.CheckTokenMembershipEx(
									TokenHandle.DangerousGetHandle(), 
									unsafe_SidToCheck, 
									Flags, 
									&(unsafe_IsMember)
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
				IsMember = unsafe_IsMember != 0;
			}
			if (addRefed)
				TokenHandle.DangerousRelease();
			// Return
			return unsafe___value != 0;
		}

		// Signature, LocalAlloc, [fwd] [return] [EETypeRva:0x000434A4] Microsoft_Win32_SafeHandles_SafeLocalAllocHandle__System_Security_Principal_Windows____w64 int, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Principal.Windows, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Kernel32", "LocalAlloc")]
		public static global::Microsoft.Win32.SafeHandles.SafeLocalAllocHandle__System_Security_Principal_Windows LocalAlloc(
					int uFlags, 
					global::System.UIntPtr sizetdwBytes)
		{
			// Setup
			global::Microsoft.Win32.SafeHandles.SafeLocalAllocHandle__System_Security_Principal_Windows __value;
			global::System.IntPtr unsafe___value;
			// Marshalling
			__value = new global::Microsoft.Win32.SafeHandles.SafeLocalAllocHandle__System_Security_Principal_Windows();
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.kernel32_dll_PInvokes.LocalAlloc(
								uFlags, 
								sizetdwBytes
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			global::System.Runtime.InteropServices.McgMarshal.InitializeHandle(
								__value, 
								unsafe___value
							);
			// Return
			return __value;
		}

		// Signature, LocalAlloc__0, [fwd] [return] [EETypeRva:0x000434A4] Microsoft_Win32_SafeHandles_SafeLocalAllocHandle__System_Net_Primitives____w64 int, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.Primitives, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Kernel32", "LocalAlloc")]
		public static global::Microsoft.Win32.SafeHandles.SafeLocalAllocHandle__System_Net_Primitives LocalAlloc__0(
					int uFlags, 
					global::System.UIntPtr sizetdwBytes)
		{
			// Setup
			global::Microsoft.Win32.SafeHandles.SafeLocalAllocHandle__System_Net_Primitives __value;
			global::System.IntPtr unsafe___value;
			// Marshalling
			__value = new global::Microsoft.Win32.SafeHandles.SafeLocalAllocHandle__System_Net_Primitives();
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.kernel32_dll_PInvokes.LocalAlloc__0(
								uFlags, 
								sizetdwBytes
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			global::System.Runtime.InteropServices.McgMarshal.InitializeHandle(
								__value, 
								unsafe___value
							);
			// Return
			return __value;
		}

		// Signature, LocalFree, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Principal.Windows, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Kernel32", "LocalFree")]
		public static global::System.IntPtr LocalFree(global::System.IntPtr handle)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.kernel32_dll_PInvokes.LocalFree(handle);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
			return unsafe___value;
		}

		// Signature, FormatMessage__4, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] uint__unsigned int, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] char___ptrwchar_t *, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x00042A40] rg_System_IntPtr____w64 int *, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.Csp, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Kernel32", "FormatMessage")]
		public static int FormatMessage__4(
					int dwFlags, 
					global::System.IntPtr lpSource, 
					uint dwMessageId, 
					int dwLanguageId, 
					char* lpBuffer, 
					int nSize, 
					global::System.IntPtr[] arguments)
		{
			// Setup
			global::System.IntPtr* unsafe_arguments;
			int unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_arguments = ((arguments != null 
						&& arguments.Length == 0) ? new global::System.IntPtr[1] : arguments))
			{
				unsafe_arguments = (global::System.IntPtr*)pinned_arguments;
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = global::__Interop.kernel32_dll_PInvokes.FormatMessage__4(
									dwFlags, 
									lpSource, 
									dwMessageId, 
									dwLanguageId, 
									((ushort*)lpBuffer), 
									nSize, 
									unsafe_arguments
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			}
			// Return
			return unsafe___value;
		}

		// Signature, LocalFree__0, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.Primitives, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Kernel32", "LocalFree")]
		public static global::System.IntPtr LocalFree__0(global::System.IntPtr handle)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.kernel32_dll_PInvokes.LocalFree__0(handle);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
			return unsafe___value;
		}

		// Signature, DuplicateHandle, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x000434A4] Microsoft_Win32_SafeHandles_SafeAccessTokenHandle__System_Security_Principal_Windows____w64 int, [fwd] [in] [EETypeRva:0x000419B0] uint__unsigned int, [fwd] [in] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000419B0] uint__unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Principal.Windows, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Kernel32", "DuplicateHandle")]
		public static bool DuplicateHandle(
					global::System.IntPtr hSourceProcessHandle, 
					global::System.IntPtr hSourceHandle, 
					global::System.IntPtr hTargetProcessHandle, 
					ref global::Microsoft.Win32.SafeHandles.SafeAccessTokenHandle__System_Security_Principal_Windows lpTargetHandle, 
					uint dwDesiredAccess, 
					bool bInheritHandle, 
					uint dwOptions)
		{
			// Setup
			bool addRefed = false;
			global::System.IntPtr unsafe_lpTargetHandle;
			global::Microsoft.Win32.SafeHandles.SafeAccessTokenHandle__System_Security_Principal_Windows out_lpTargetHandle;
			global::System.IntPtr prev_unsafe_lpTargetHandle;
			int unsafe___value;
			// Marshalling
			lpTargetHandle.DangerousAddRef(ref addRefed);
			unsafe_lpTargetHandle = lpTargetHandle.DangerousGetHandle();
			prev_unsafe_lpTargetHandle = unsafe_lpTargetHandle;
			out_lpTargetHandle = new global::Microsoft.Win32.SafeHandles.SafeAccessTokenHandle__System_Security_Principal_Windows();
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.kernel32_dll_PInvokes.DuplicateHandle(
								hSourceProcessHandle, 
								hSourceHandle, 
								hTargetProcessHandle, 
								&(unsafe_lpTargetHandle), 
								dwDesiredAccess, 
								(bInheritHandle ? 1 : 0), 
								dwOptions
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			if (addRefed)
				lpTargetHandle.DangerousRelease();
			if (prev_unsafe_lpTargetHandle != unsafe_lpTargetHandle)
			{
				global::System.Runtime.InteropServices.McgMarshal.InitializeHandle(
									out_lpTargetHandle, 
									unsafe_lpTargetHandle
								);
				lpTargetHandle = out_lpTargetHandle;
			}
			// Return
			return unsafe___value != 0;
		}

		// Signature, SetFileCompletionNotificationModes, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000434A4] System_Runtime_InteropServices_SafeHandle____w64 int, [fwd] [in] [EETypeRva:0x00042D60] __Interop_Kernel32_FileCompletionNotificationModes__System_Net_Sockets__Interop_Kernel32_FileCompletionNotificationModes__System_Net_Sockets, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.Sockets, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Kernel32", "SetFileCompletionNotificationModes")]
		public static bool SetFileCompletionNotificationModes(
					global::System.Runtime.InteropServices.SafeHandle handle, 
					global::_.Interop_Kernel32_FileCompletionNotificationModes__System_Net_Sockets flags)
		{
			// Setup
			bool addRefed = false;
			int unsafe___value;
			// Marshalling
			handle.DangerousAddRef(ref addRefed);
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.kernel32_dll_PInvokes.SetFileCompletionNotificationModes(
								handle.DangerousGetHandle(), 
								flags
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			if (addRefed)
				handle.DangerousRelease();
			// Return
			return unsafe___value != 0;
		}
	}

	/// <summary>
	/// P/Invoke class for module 'Magick.Native-Q16-x64.dll'
	/// </summary>
	public unsafe static partial class Magick_Native_Q16_x64_dll
	{
		// Signature, MagickColor_Create, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickColor+NativeMethods+X64", "MagickColor_Create")]
		public static global::System.IntPtr MagickColor_Create()
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickColor_Create();
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, MagickColor_Dispose, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickColor+NativeMethods+X64", "MagickColor_Dispose")]
		public static void MagickColor_Dispose(global::System.IntPtr instance)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickColor_Dispose(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, MagickColor_Count_Get, [fwd] [return] [EETypeRva:0x000419B0] ulong__unsigned __int64, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickColor+NativeMethods+X64", "MagickColor_Count_Get")]
		public static ulong MagickColor_Count_Get(global::System.IntPtr instance)
		{
			// Setup
			ulong unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickColor_Count_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, MagickColor_Red_Get, [fwd] [return] [EETypeRva:0x000419B0] ushort__unsigned short, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickColor+NativeMethods+X64", "MagickColor_Red_Get")]
		public static ushort MagickColor_Red_Get(global::System.IntPtr instance)
		{
			// Setup
			ushort unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickColor_Red_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, MagickColor_Red_Set, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] ushort__unsigned short, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickColor+NativeMethods+X64", "MagickColor_Red_Set")]
		public static void MagickColor_Red_Set(
					global::System.IntPtr instance, 
					ushort value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickColor_Red_Set(
								instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, MagickColor_Green_Get, [fwd] [return] [EETypeRva:0x000419B0] ushort__unsigned short, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickColor+NativeMethods+X64", "MagickColor_Green_Get")]
		public static ushort MagickColor_Green_Get(global::System.IntPtr instance)
		{
			// Setup
			ushort unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickColor_Green_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, MagickColor_Green_Set, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] ushort__unsigned short, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickColor+NativeMethods+X64", "MagickColor_Green_Set")]
		public static void MagickColor_Green_Set(
					global::System.IntPtr instance, 
					ushort value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickColor_Green_Set(
								instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, MagickColor_Blue_Get, [fwd] [return] [EETypeRva:0x000419B0] ushort__unsigned short, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickColor+NativeMethods+X64", "MagickColor_Blue_Get")]
		public static ushort MagickColor_Blue_Get(global::System.IntPtr instance)
		{
			// Setup
			ushort unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickColor_Blue_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, MagickColor_Blue_Set, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] ushort__unsigned short, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickColor+NativeMethods+X64", "MagickColor_Blue_Set")]
		public static void MagickColor_Blue_Set(
					global::System.IntPtr instance, 
					ushort value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickColor_Blue_Set(
								instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, MagickColor_Alpha_Get, [fwd] [return] [EETypeRva:0x000419B0] ushort__unsigned short, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickColor+NativeMethods+X64", "MagickColor_Alpha_Get")]
		public static ushort MagickColor_Alpha_Get(global::System.IntPtr instance)
		{
			// Setup
			ushort unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickColor_Alpha_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, MagickColor_Alpha_Set, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] ushort__unsigned short, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickColor+NativeMethods+X64", "MagickColor_Alpha_Set")]
		public static void MagickColor_Alpha_Set(
					global::System.IntPtr instance, 
					ushort value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickColor_Alpha_Set(
								instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, MagickColor_Black_Get, [fwd] [return] [EETypeRva:0x000419B0] ushort__unsigned short, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickColor+NativeMethods+X64", "MagickColor_Black_Get")]
		public static ushort MagickColor_Black_Get(global::System.IntPtr instance)
		{
			// Setup
			ushort unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickColor_Black_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, MagickColor_Black_Set, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] ushort__unsigned short, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickColor+NativeMethods+X64", "MagickColor_Black_Set")]
		public static void MagickColor_Black_Set(
					global::System.IntPtr instance, 
					ushort value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickColor_Black_Set(
								instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, MagickColor_IsCMYK_Get, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickColor+NativeMethods+X64", "MagickColor_IsCMYK_Get")]
		public static bool MagickColor_IsCMYK_Get(global::System.IntPtr instance)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickColor_IsCMYK_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value != 0;
		}

		// Signature, MagickColor_IsCMYK_Set, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00040848] bool__System.Boolean, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickColor+NativeMethods+X64", "MagickColor_IsCMYK_Set")]
		public static void MagickColor_IsCMYK_Set(
					global::System.IntPtr instance, 
					bool value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickColor_IsCMYK_Set(
								instance, 
								(value ? 1 : 0)
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, MagickColor_FuzzyEquals, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] ushort__unsigned short, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickColor+NativeMethods+X64", "MagickColor_FuzzyEquals")]
		public static bool MagickColor_FuzzyEquals(
					global::System.IntPtr Instance, 
					global::System.IntPtr other, 
					ushort fuzz)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickColor_FuzzyEquals(
								Instance, 
								other, 
								fuzz
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value != 0;
		}

		// Signature, MagickColor_Initialize, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickColor+NativeMethods+X64", "MagickColor_Initialize")]
		public static bool MagickColor_Initialize(
					global::System.IntPtr Instance, 
					global::System.IntPtr value)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickColor_Initialize(
								Instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value != 0;
		}

		// Signature, MagickColorCollection_DisposeList, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickColorCollection+NativeMethods+X64", "MagickColorCollection_DisposeList")]
		public static void MagickColorCollection_DisposeList(global::System.IntPtr list)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickColorCollection_DisposeList(list);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, MagickColorCollection_GetInstance, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickColorCollection+NativeMethods+X64", "MagickColorCollection_GetInstance")]
		public static global::System.IntPtr MagickColorCollection_GetInstance(
					global::System.IntPtr list, 
					global::System.UIntPtr index)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickColorCollection_GetInstance(
								list, 
								index
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, DrawingWand_Create, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingWand+NativeMethods+X64", "DrawingWand_Create")]
		public static global::System.IntPtr DrawingWand_Create(
					global::System.IntPtr image, 
					global::System.IntPtr settings)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.DrawingWand_Create(
								image, 
								settings
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, DrawingWand_Dispose, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingWand+NativeMethods+X64", "DrawingWand_Dispose")]
		public static void DrawingWand_Dispose(global::System.IntPtr instance)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.DrawingWand_Dispose(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, DrawingWand_Affine, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingWand+NativeMethods+X64", "DrawingWand_Affine")]
		public static void DrawingWand_Affine(
					global::System.IntPtr Instance, 
					double scaleX, 
					double scaleY, 
					double shearX, 
					double shearY, 
					double translateX, 
					double translateY, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.DrawingWand_Affine(
									Instance, 
									scaleX, 
									scaleY, 
									shearX, 
									shearY, 
									translateX, 
									translateY, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, DrawingWand_Alpha, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingWand+NativeMethods+X64", "DrawingWand_Alpha")]
		public static void DrawingWand_Alpha(
					global::System.IntPtr Instance, 
					double x, 
					double y, 
					global::System.UIntPtr paintMethod, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.DrawingWand_Alpha(
									Instance, 
									x, 
									y, 
									paintMethod, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, DrawingWand_Arc, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingWand+NativeMethods+X64", "DrawingWand_Arc")]
		public static void DrawingWand_Arc(
					global::System.IntPtr Instance, 
					double startX, 
					double startY, 
					double endX, 
					double endY, 
					double startDegrees, 
					double endDegrees, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.DrawingWand_Arc(
									Instance, 
									startX, 
									startY, 
									endX, 
									endY, 
									startDegrees, 
									endDegrees, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, DrawingWand_Bezier, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingWand+NativeMethods+X64", "DrawingWand_Bezier")]
		public static void DrawingWand_Bezier(
					global::System.IntPtr Instance, 
					global::System.IntPtr coordinates, 
					global::System.UIntPtr length, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.DrawingWand_Bezier(
									Instance, 
									coordinates, 
									length, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, DrawingWand_BorderColor, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingWand+NativeMethods+X64", "DrawingWand_BorderColor")]
		public static void DrawingWand_BorderColor(
					global::System.IntPtr Instance, 
					global::System.IntPtr value, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.DrawingWand_BorderColor(
									Instance, 
									value, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, DrawingWand_Circle, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingWand+NativeMethods+X64", "DrawingWand_Circle")]
		public static void DrawingWand_Circle(
					global::System.IntPtr Instance, 
					double originX, 
					double originY, 
					double perimeterX, 
					double perimeterY, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.DrawingWand_Circle(
									Instance, 
									originX, 
									originY, 
									perimeterX, 
									perimeterY, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, DrawingWand_ClipPath, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingWand+NativeMethods+X64", "DrawingWand_ClipPath")]
		public static void DrawingWand_ClipPath(
					global::System.IntPtr Instance, 
					global::System.IntPtr value, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.DrawingWand_ClipPath(
									Instance, 
									value, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, DrawingWand_ClipRule, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingWand+NativeMethods+X64", "DrawingWand_ClipRule")]
		public static void DrawingWand_ClipRule(
					global::System.IntPtr Instance, 
					global::System.UIntPtr value, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.DrawingWand_ClipRule(
									Instance, 
									value, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, DrawingWand_ClipUnits, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingWand+NativeMethods+X64", "DrawingWand_ClipUnits")]
		public static void DrawingWand_ClipUnits(
					global::System.IntPtr Instance, 
					global::System.UIntPtr value, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.DrawingWand_ClipUnits(
									Instance, 
									value, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, DrawingWand_Color, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingWand+NativeMethods+X64", "DrawingWand_Color")]
		public static void DrawingWand_Color(
					global::System.IntPtr Instance, 
					double x, 
					double y, 
					global::System.UIntPtr paintMethod, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.DrawingWand_Color(
									Instance, 
									x, 
									y, 
									paintMethod, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, DrawingWand_Composite, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingWand+NativeMethods+X64", "DrawingWand_Composite")]
		public static void DrawingWand_Composite(
					global::System.IntPtr Instance, 
					double x, 
					double y, 
					double width, 
					double height, 
					global::System.UIntPtr compositeOperator, 
					global::System.IntPtr image, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.DrawingWand_Composite(
									Instance, 
									x, 
									y, 
									width, 
									height, 
									compositeOperator, 
									image, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, DrawingWand_Density, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingWand+NativeMethods+X64", "DrawingWand_Density")]
		public static void DrawingWand_Density(
					global::System.IntPtr Instance, 
					global::System.IntPtr value, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.DrawingWand_Density(
									Instance, 
									value, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, DrawingWand_Ellipse, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingWand+NativeMethods+X64", "DrawingWand_Ellipse")]
		public static void DrawingWand_Ellipse(
					global::System.IntPtr Instance, 
					double originX, 
					double originY, 
					double radiusX, 
					double radiusY, 
					double startDegrees, 
					double endDegrees, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.DrawingWand_Ellipse(
									Instance, 
									originX, 
									originY, 
									radiusX, 
									radiusY, 
									startDegrees, 
									endDegrees, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, DrawingWand_FillColor, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingWand+NativeMethods+X64", "DrawingWand_FillColor")]
		public static void DrawingWand_FillColor(
					global::System.IntPtr Instance, 
					global::System.IntPtr value, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.DrawingWand_FillColor(
									Instance, 
									value, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, DrawingWand_FillOpacity, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingWand+NativeMethods+X64", "DrawingWand_FillOpacity")]
		public static void DrawingWand_FillOpacity(
					global::System.IntPtr Instance, 
					double value, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.DrawingWand_FillOpacity(
									Instance, 
									value, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, DrawingWand_FillPatternUrl, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingWand+NativeMethods+X64", "DrawingWand_FillPatternUrl")]
		public static void DrawingWand_FillPatternUrl(
					global::System.IntPtr Instance, 
					global::System.IntPtr url, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.DrawingWand_FillPatternUrl(
									Instance, 
									url, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, DrawingWand_FillRule, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingWand+NativeMethods+X64", "DrawingWand_FillRule")]
		public static void DrawingWand_FillRule(
					global::System.IntPtr Instance, 
					global::System.UIntPtr value, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.DrawingWand_FillRule(
									Instance, 
									value, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, DrawingWand_Font, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingWand+NativeMethods+X64", "DrawingWand_Font")]
		public static void DrawingWand_Font(
					global::System.IntPtr Instance, 
					global::System.IntPtr fontName, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.DrawingWand_Font(
									Instance, 
									fontName, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, DrawingWand_FontFamily, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingWand+NativeMethods+X64", "DrawingWand_FontFamily")]
		public static void DrawingWand_FontFamily(
					global::System.IntPtr Instance, 
					global::System.IntPtr family, 
					global::System.UIntPtr style, 
					global::System.UIntPtr weight, 
					global::System.UIntPtr stretch, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.DrawingWand_FontFamily(
									Instance, 
									family, 
									style, 
									weight, 
									stretch, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, DrawingWand_FontPointSize, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingWand+NativeMethods+X64", "DrawingWand_FontPointSize")]
		public static void DrawingWand_FontPointSize(
					global::System.IntPtr Instance, 
					double value, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.DrawingWand_FontPointSize(
									Instance, 
									value, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, DrawingWand_FontTypeMetrics, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingWand+NativeMethods+X64", "DrawingWand_FontTypeMetrics")]
		public static global::System.IntPtr DrawingWand_FontTypeMetrics(
					global::System.IntPtr Instance, 
					global::System.IntPtr text, 
					bool ignoreNewLines, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.DrawingWand_FontTypeMetrics(
									Instance, 
									text, 
									(ignoreNewLines ? 1 : 0), 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, DrawingWand_Gravity, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingWand+NativeMethods+X64", "DrawingWand_Gravity")]
		public static void DrawingWand_Gravity(
					global::System.IntPtr Instance, 
					global::System.UIntPtr value, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.DrawingWand_Gravity(
									Instance, 
									value, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, DrawingWand_Line, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingWand+NativeMethods+X64", "DrawingWand_Line")]
		public static void DrawingWand_Line(
					global::System.IntPtr Instance, 
					double startX, 
					double startY, 
					double endX, 
					double endY, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.DrawingWand_Line(
									Instance, 
									startX, 
									startY, 
									endX, 
									endY, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, DrawingWand_PathArcAbs, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingWand+NativeMethods+X64", "DrawingWand_PathArcAbs")]
		public static void DrawingWand_PathArcAbs(
					global::System.IntPtr Instance, 
					double x, 
					double y, 
					double radiusX, 
					double radiusY, 
					double rotationX, 
					bool useLargeArc, 
					bool useSweep, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.DrawingWand_PathArcAbs(
									Instance, 
									x, 
									y, 
									radiusX, 
									radiusY, 
									rotationX, 
									(useLargeArc ? 1 : 0), 
									(useSweep ? 1 : 0), 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, DrawingWand_PathArcRel, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingWand+NativeMethods+X64", "DrawingWand_PathArcRel")]
		public static void DrawingWand_PathArcRel(
					global::System.IntPtr Instance, 
					double x, 
					double y, 
					double radiusX, 
					double radiusY, 
					double rotationX, 
					bool useLargeArc, 
					bool useSweep, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.DrawingWand_PathArcRel(
									Instance, 
									x, 
									y, 
									radiusX, 
									radiusY, 
									rotationX, 
									(useLargeArc ? 1 : 0), 
									(useSweep ? 1 : 0), 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, DrawingWand_Render, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingWand+NativeMethods+X64", "DrawingWand_Render")]
		public static void DrawingWand_Render(
					global::System.IntPtr Instance, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.DrawingWand_Render(
									Instance, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, DrawingWand_Text, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingWand+NativeMethods+X64", "DrawingWand_Text")]
		public static void DrawingWand_Text(
					global::System.IntPtr Instance, 
					double x, 
					double y, 
					global::System.IntPtr text, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.DrawingWand_Text(
									Instance, 
									x, 
									y, 
									text, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, DrawingWand_PathClose, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingWand+NativeMethods+X64", "DrawingWand_PathClose")]
		public static void DrawingWand_PathClose(
					global::System.IntPtr Instance, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.DrawingWand_PathClose(
									Instance, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, DrawingWand_PathCurveToAbs, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingWand+NativeMethods+X64", "DrawingWand_PathCurveToAbs")]
		public static void DrawingWand_PathCurveToAbs(
					global::System.IntPtr Instance, 
					double x1, 
					double y1, 
					double x2, 
					double y2, 
					double x, 
					double y, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.DrawingWand_PathCurveToAbs(
									Instance, 
									x1, 
									y1, 
									x2, 
									y2, 
									x, 
									y, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, DrawingWand_PathCurveToRel, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingWand+NativeMethods+X64", "DrawingWand_PathCurveToRel")]
		public static void DrawingWand_PathCurveToRel(
					global::System.IntPtr Instance, 
					double x1, 
					double y1, 
					double x2, 
					double y2, 
					double x, 
					double y, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.DrawingWand_PathCurveToRel(
									Instance, 
									x1, 
									y1, 
									x2, 
									y2, 
									x, 
									y, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, DrawingWand_PathFinish, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingWand+NativeMethods+X64", "DrawingWand_PathFinish")]
		public static void DrawingWand_PathFinish(
					global::System.IntPtr Instance, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.DrawingWand_PathFinish(
									Instance, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, DrawingWand_PathLineToAbs, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingWand+NativeMethods+X64", "DrawingWand_PathLineToAbs")]
		public static void DrawingWand_PathLineToAbs(
					global::System.IntPtr Instance, 
					double x, 
					double y, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.DrawingWand_PathLineToAbs(
									Instance, 
									x, 
									y, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, DrawingWand_PathLineToRel, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingWand+NativeMethods+X64", "DrawingWand_PathLineToRel")]
		public static void DrawingWand_PathLineToRel(
					global::System.IntPtr Instance, 
					double x, 
					double y, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.DrawingWand_PathLineToRel(
									Instance, 
									x, 
									y, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, DrawingWand_PathLineToHorizontalAbs, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingWand+NativeMethods+X64", "DrawingWand_PathLineToHorizontalAbs")]
		public static void DrawingWand_PathLineToHorizontalAbs(
					global::System.IntPtr Instance, 
					double x, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.DrawingWand_PathLineToHorizontalAbs(
									Instance, 
									x, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, DrawingWand_PathLineToHorizontalRel, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingWand+NativeMethods+X64", "DrawingWand_PathLineToHorizontalRel")]
		public static void DrawingWand_PathLineToHorizontalRel(
					global::System.IntPtr Instance, 
					double x, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.DrawingWand_PathLineToHorizontalRel(
									Instance, 
									x, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, DrawingWand_PathLineToVerticalAbs, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingWand+NativeMethods+X64", "DrawingWand_PathLineToVerticalAbs")]
		public static void DrawingWand_PathLineToVerticalAbs(
					global::System.IntPtr Instance, 
					double y, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.DrawingWand_PathLineToVerticalAbs(
									Instance, 
									y, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, DrawingWand_PathLineToVerticalRel, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingWand+NativeMethods+X64", "DrawingWand_PathLineToVerticalRel")]
		public static void DrawingWand_PathLineToVerticalRel(
					global::System.IntPtr Instance, 
					double y, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.DrawingWand_PathLineToVerticalRel(
									Instance, 
									y, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, DrawingWand_PathMoveToAbs, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingWand+NativeMethods+X64", "DrawingWand_PathMoveToAbs")]
		public static void DrawingWand_PathMoveToAbs(
					global::System.IntPtr Instance, 
					double x, 
					double y, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.DrawingWand_PathMoveToAbs(
									Instance, 
									x, 
									y, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, DrawingWand_PathMoveToRel, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingWand+NativeMethods+X64", "DrawingWand_PathMoveToRel")]
		public static void DrawingWand_PathMoveToRel(
					global::System.IntPtr Instance, 
					double x, 
					double y, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.DrawingWand_PathMoveToRel(
									Instance, 
									x, 
									y, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, DrawingWand_PathQuadraticCurveToAbs, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingWand+NativeMethods+X64", "DrawingWand_PathQuadraticCurveToAbs")]
		public static void DrawingWand_PathQuadraticCurveToAbs(
					global::System.IntPtr Instance, 
					double x1, 
					double y1, 
					double x, 
					double y, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.DrawingWand_PathQuadraticCurveToAbs(
									Instance, 
									x1, 
									y1, 
									x, 
									y, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, DrawingWand_PathQuadraticCurveToRel, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingWand+NativeMethods+X64", "DrawingWand_PathQuadraticCurveToRel")]
		public static void DrawingWand_PathQuadraticCurveToRel(
					global::System.IntPtr Instance, 
					double x1, 
					double y1, 
					double x, 
					double y, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.DrawingWand_PathQuadraticCurveToRel(
									Instance, 
									x1, 
									y1, 
									x, 
									y, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, DrawingWand_PathSmoothCurveToAbs, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingWand+NativeMethods+X64", "DrawingWand_PathSmoothCurveToAbs")]
		public static void DrawingWand_PathSmoothCurveToAbs(
					global::System.IntPtr Instance, 
					double x2, 
					double y2, 
					double x, 
					double y, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.DrawingWand_PathSmoothCurveToAbs(
									Instance, 
									x2, 
									y2, 
									x, 
									y, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, DrawingWand_PathSmoothCurveToRel, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingWand+NativeMethods+X64", "DrawingWand_PathSmoothCurveToRel")]
		public static void DrawingWand_PathSmoothCurveToRel(
					global::System.IntPtr Instance, 
					double x2, 
					double y2, 
					double x, 
					double y, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.DrawingWand_PathSmoothCurveToRel(
									Instance, 
									x2, 
									y2, 
									x, 
									y, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, DrawingWand_PathSmoothQuadraticCurveToAbs, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingWand+NativeMethods+X64", "DrawingWand_PathSmoothQuadraticCurveToAbs")]
		public static void DrawingWand_PathSmoothQuadraticCurveToAbs(
					global::System.IntPtr Instance, 
					double x, 
					double y, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.DrawingWand_PathSmoothQuadraticCurveToAbs(
									Instance, 
									x, 
									y, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, DrawingWand_PathSmoothQuadraticCurveToRel, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingWand+NativeMethods+X64", "DrawingWand_PathSmoothQuadraticCurveToRel")]
		public static void DrawingWand_PathSmoothQuadraticCurveToRel(
					global::System.IntPtr Instance, 
					double x, 
					double y, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.DrawingWand_PathSmoothQuadraticCurveToRel(
									Instance, 
									x, 
									y, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, DrawingWand_PathStart, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingWand+NativeMethods+X64", "DrawingWand_PathStart")]
		public static void DrawingWand_PathStart(
					global::System.IntPtr Instance, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.DrawingWand_PathStart(
									Instance, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, DrawingWand_Point, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingWand+NativeMethods+X64", "DrawingWand_Point")]
		public static void DrawingWand_Point(
					global::System.IntPtr Instance, 
					double x, 
					double y, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.DrawingWand_Point(
									Instance, 
									x, 
									y, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, DrawingWand_Polygon, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingWand+NativeMethods+X64", "DrawingWand_Polygon")]
		public static void DrawingWand_Polygon(
					global::System.IntPtr Instance, 
					global::System.IntPtr coordinates, 
					global::System.UIntPtr length, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.DrawingWand_Polygon(
									Instance, 
									coordinates, 
									length, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, DrawingWand_Polyline, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingWand+NativeMethods+X64", "DrawingWand_Polyline")]
		public static void DrawingWand_Polyline(
					global::System.IntPtr Instance, 
					global::System.IntPtr coordinates, 
					global::System.UIntPtr length, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.DrawingWand_Polyline(
									Instance, 
									coordinates, 
									length, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, DrawingWand_PopClipPath, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingWand+NativeMethods+X64", "DrawingWand_PopClipPath")]
		public static void DrawingWand_PopClipPath(
					global::System.IntPtr Instance, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.DrawingWand_PopClipPath(
									Instance, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, DrawingWand_PopGraphicContext, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingWand+NativeMethods+X64", "DrawingWand_PopGraphicContext")]
		public static void DrawingWand_PopGraphicContext(
					global::System.IntPtr Instance, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.DrawingWand_PopGraphicContext(
									Instance, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, DrawingWand_PopPattern, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingWand+NativeMethods+X64", "DrawingWand_PopPattern")]
		public static void DrawingWand_PopPattern(
					global::System.IntPtr Instance, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.DrawingWand_PopPattern(
									Instance, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, DrawingWand_PushClipPath, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingWand+NativeMethods+X64", "DrawingWand_PushClipPath")]
		public static void DrawingWand_PushClipPath(
					global::System.IntPtr Instance, 
					global::System.IntPtr clipPath, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.DrawingWand_PushClipPath(
									Instance, 
									clipPath, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, DrawingWand_PushGraphicContext, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingWand+NativeMethods+X64", "DrawingWand_PushGraphicContext")]
		public static void DrawingWand_PushGraphicContext(
					global::System.IntPtr Instance, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.DrawingWand_PushGraphicContext(
									Instance, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, DrawingWand_PushPattern, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingWand+NativeMethods+X64", "DrawingWand_PushPattern")]
		public static void DrawingWand_PushPattern(
					global::System.IntPtr Instance, 
					global::System.IntPtr id, 
					double x, 
					double y, 
					double width, 
					double height, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.DrawingWand_PushPattern(
									Instance, 
									id, 
									x, 
									y, 
									width, 
									height, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, DrawingWand_Rectangle, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingWand+NativeMethods+X64", "DrawingWand_Rectangle")]
		public static void DrawingWand_Rectangle(
					global::System.IntPtr Instance, 
					double upperLeftX, 
					double upperLeftY, 
					double lowerRightX, 
					double lowerRightY, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.DrawingWand_Rectangle(
									Instance, 
									upperLeftX, 
									upperLeftY, 
									lowerRightX, 
									lowerRightY, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, DrawingWand_Rotation, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingWand+NativeMethods+X64", "DrawingWand_Rotation")]
		public static void DrawingWand_Rotation(
					global::System.IntPtr Instance, 
					double angle, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.DrawingWand_Rotation(
									Instance, 
									angle, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, DrawingWand_RoundRectangle, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingWand+NativeMethods+X64", "DrawingWand_RoundRectangle")]
		public static void DrawingWand_RoundRectangle(
					global::System.IntPtr Instance, 
					double upperLeftX, 
					double upperLeftY, 
					double lowerRightX, 
					double lowerRightY, 
					double cornerWidth, 
					double cornerHeight, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.DrawingWand_RoundRectangle(
									Instance, 
									upperLeftX, 
									upperLeftY, 
									lowerRightX, 
									lowerRightY, 
									cornerWidth, 
									cornerHeight, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, DrawingWand_Scaling, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingWand+NativeMethods+X64", "DrawingWand_Scaling")]
		public static void DrawingWand_Scaling(
					global::System.IntPtr Instance, 
					double x, 
					double y, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.DrawingWand_Scaling(
									Instance, 
									x, 
									y, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, DrawingWand_SkewX, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingWand+NativeMethods+X64", "DrawingWand_SkewX")]
		public static void DrawingWand_SkewX(
					global::System.IntPtr Instance, 
					double angle, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.DrawingWand_SkewX(
									Instance, 
									angle, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, DrawingWand_SkewY, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingWand+NativeMethods+X64", "DrawingWand_SkewY")]
		public static void DrawingWand_SkewY(
					global::System.IntPtr Instance, 
					double angle, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.DrawingWand_SkewY(
									Instance, 
									angle, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, DrawingWand_StrokeAntialias, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingWand+NativeMethods+X64", "DrawingWand_StrokeAntialias")]
		public static void DrawingWand_StrokeAntialias(
					global::System.IntPtr Instance, 
					bool isEnabled, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.DrawingWand_StrokeAntialias(
									Instance, 
									(isEnabled ? 1 : 0), 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, DrawingWand_StrokeColor, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingWand+NativeMethods+X64", "DrawingWand_StrokeColor")]
		public static void DrawingWand_StrokeColor(
					global::System.IntPtr Instance, 
					global::System.IntPtr value, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.DrawingWand_StrokeColor(
									Instance, 
									value, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, DrawingWand_StrokeDashArray, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00042A40] rg_double__double *, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingWand+NativeMethods+X64", "DrawingWand_StrokeDashArray")]
		public static void DrawingWand_StrokeDashArray(
					global::System.IntPtr Instance, 
					double[] dash, 
					global::System.UIntPtr length, 
					out global::System.IntPtr exception)
		{
			// Setup
			double* unsafe_dash;
			// Marshalling
			fixed (double* pinned_dash = ((dash != null 
						&& dash.Length == 0) ? new double[1] : dash))
			{
				unsafe_dash = (double*)pinned_dash;
				fixed (global::System.IntPtr* pinned_exception = &(exception))
				{
					// Call to native method
					global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.DrawingWand_StrokeDashArray(
										Instance, 
										unsafe_dash, 
										length, 
										pinned_exception
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				}
			}
			// Return
		}

		// Signature, DrawingWand_StrokeDashOffset, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingWand+NativeMethods+X64", "DrawingWand_StrokeDashOffset")]
		public static void DrawingWand_StrokeDashOffset(
					global::System.IntPtr Instance, 
					double value, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.DrawingWand_StrokeDashOffset(
									Instance, 
									value, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, DrawingWand_StrokeLineCap, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingWand+NativeMethods+X64", "DrawingWand_StrokeLineCap")]
		public static void DrawingWand_StrokeLineCap(
					global::System.IntPtr Instance, 
					global::System.UIntPtr value, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.DrawingWand_StrokeLineCap(
									Instance, 
									value, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, DrawingWand_StrokeLineJoin, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingWand+NativeMethods+X64", "DrawingWand_StrokeLineJoin")]
		public static void DrawingWand_StrokeLineJoin(
					global::System.IntPtr Instance, 
					global::System.UIntPtr value, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.DrawingWand_StrokeLineJoin(
									Instance, 
									value, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, DrawingWand_StrokeMiterLimit, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingWand+NativeMethods+X64", "DrawingWand_StrokeMiterLimit")]
		public static void DrawingWand_StrokeMiterLimit(
					global::System.IntPtr Instance, 
					global::System.UIntPtr value, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.DrawingWand_StrokeMiterLimit(
									Instance, 
									value, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, DrawingWand_StrokeOpacity, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingWand+NativeMethods+X64", "DrawingWand_StrokeOpacity")]
		public static void DrawingWand_StrokeOpacity(
					global::System.IntPtr Instance, 
					double value, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.DrawingWand_StrokeOpacity(
									Instance, 
									value, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, DrawingWand_StrokePatternUrl, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingWand+NativeMethods+X64", "DrawingWand_StrokePatternUrl")]
		public static void DrawingWand_StrokePatternUrl(
					global::System.IntPtr Instance, 
					global::System.IntPtr value, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.DrawingWand_StrokePatternUrl(
									Instance, 
									value, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, DrawingWand_StrokeWidth, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingWand+NativeMethods+X64", "DrawingWand_StrokeWidth")]
		public static void DrawingWand_StrokeWidth(
					global::System.IntPtr Instance, 
					double value, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.DrawingWand_StrokeWidth(
									Instance, 
									value, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, DrawingWand_TextAlignment, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingWand+NativeMethods+X64", "DrawingWand_TextAlignment")]
		public static void DrawingWand_TextAlignment(
					global::System.IntPtr Instance, 
					global::System.UIntPtr value, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.DrawingWand_TextAlignment(
									Instance, 
									value, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, DrawingWand_TextAntialias, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingWand+NativeMethods+X64", "DrawingWand_TextAntialias")]
		public static void DrawingWand_TextAntialias(
					global::System.IntPtr Instance, 
					bool isEnabled, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.DrawingWand_TextAntialias(
									Instance, 
									(isEnabled ? 1 : 0), 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, DrawingWand_TextDecoration, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingWand+NativeMethods+X64", "DrawingWand_TextDecoration")]
		public static void DrawingWand_TextDecoration(
					global::System.IntPtr Instance, 
					global::System.UIntPtr value, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.DrawingWand_TextDecoration(
									Instance, 
									value, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, DrawingWand_TextDirection, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingWand+NativeMethods+X64", "DrawingWand_TextDirection")]
		public static void DrawingWand_TextDirection(
					global::System.IntPtr Instance, 
					global::System.UIntPtr value, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.DrawingWand_TextDirection(
									Instance, 
									value, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, DrawingWand_TextEncoding, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingWand+NativeMethods+X64", "DrawingWand_TextEncoding")]
		public static void DrawingWand_TextEncoding(
					global::System.IntPtr Instance, 
					global::System.IntPtr encoding, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.DrawingWand_TextEncoding(
									Instance, 
									encoding, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, DrawingWand_TextInterlineSpacing, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingWand+NativeMethods+X64", "DrawingWand_TextInterlineSpacing")]
		public static void DrawingWand_TextInterlineSpacing(
					global::System.IntPtr Instance, 
					double value, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.DrawingWand_TextInterlineSpacing(
									Instance, 
									value, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, DrawingWand_TextInterwordSpacing, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingWand+NativeMethods+X64", "DrawingWand_TextInterwordSpacing")]
		public static void DrawingWand_TextInterwordSpacing(
					global::System.IntPtr Instance, 
					double value, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.DrawingWand_TextInterwordSpacing(
									Instance, 
									value, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, DrawingWand_TextKerning, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingWand+NativeMethods+X64", "DrawingWand_TextKerning")]
		public static void DrawingWand_TextKerning(
					global::System.IntPtr Instance, 
					double value, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.DrawingWand_TextKerning(
									Instance, 
									value, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, DrawingWand_TextUnderColor, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingWand+NativeMethods+X64", "DrawingWand_TextUnderColor")]
		public static void DrawingWand_TextUnderColor(
					global::System.IntPtr Instance, 
					global::System.IntPtr color, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.DrawingWand_TextUnderColor(
									Instance, 
									color, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, DrawingWand_Translation, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingWand+NativeMethods+X64", "DrawingWand_Translation")]
		public static void DrawingWand_Translation(
					global::System.IntPtr Instance, 
					double x, 
					double y, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.DrawingWand_Translation(
									Instance, 
									x, 
									y, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, DrawingWand_Viewbox, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingWand+NativeMethods+X64", "DrawingWand_Viewbox")]
		public static void DrawingWand_Viewbox(
					global::System.IntPtr Instance, 
					double upperLeftX, 
					double upperLeftY, 
					double lowerRightX, 
					double lowerRightY, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.DrawingWand_Viewbox(
									Instance, 
									upperLeftX, 
									upperLeftY, 
									lowerRightX, 
									lowerRightY, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, MagickExceptionHelper_Description, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickExceptionHelper+NativeMethods+X64", "MagickExceptionHelper_Description")]
		public static global::System.IntPtr MagickExceptionHelper_Description(global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickExceptionHelper_Description(exception);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, MagickExceptionHelper_Dispose, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickExceptionHelper+NativeMethods+X64", "MagickExceptionHelper_Dispose")]
		public static void MagickExceptionHelper_Dispose(global::System.IntPtr exception)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickExceptionHelper_Dispose(exception);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, MagickExceptionHelper_Message, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickExceptionHelper+NativeMethods+X64", "MagickExceptionHelper_Message")]
		public static global::System.IntPtr MagickExceptionHelper_Message(global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickExceptionHelper_Message(exception);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, MagickExceptionHelper_Related, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickExceptionHelper+NativeMethods+X64", "MagickExceptionHelper_Related")]
		public static global::System.IntPtr MagickExceptionHelper_Related(
					global::System.IntPtr exception, 
					global::System.UIntPtr index)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickExceptionHelper_Related(
								exception, 
								index
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, MagickExceptionHelper_RelatedCount, [fwd] [return] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickExceptionHelper+NativeMethods+X64", "MagickExceptionHelper_RelatedCount")]
		public static global::System.UIntPtr MagickExceptionHelper_RelatedCount(global::System.IntPtr exception)
		{
			// Setup
			global::System.UIntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickExceptionHelper_RelatedCount(exception);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, MagickExceptionHelper_Severity, [fwd] [return] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickExceptionHelper+NativeMethods+X64", "MagickExceptionHelper_Severity")]
		public static global::System.UIntPtr MagickExceptionHelper_Severity(global::System.IntPtr exception)
		{
			// Setup
			global::System.UIntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickExceptionHelper_Severity(exception);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, Environment_Initialize, [fwd] [return] [EETypeRva:0x00041F6C] void__void, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.Environment+NativeMethods+X64", "Environment_Initialize")]
		public static void Environment_Initialize()
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.Environment_Initialize();
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, Environment_SetEnv, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.Environment+NativeMethods+X64", "Environment_SetEnv")]
		public static void Environment_SetEnv(
					global::System.IntPtr name, 
					global::System.IntPtr value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.Environment_SetEnv(
								name, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, MagickMemory_Relinquish, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickMemory+NativeMethods+X64", "MagickMemory_Relinquish")]
		public static void MagickMemory_Relinquish(global::System.IntPtr value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickMemory_Relinquish(value);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, Magick_Delegates_Get, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickNET+NativeMethods+X64", "Magick_Delegates_Get")]
		public static global::System.IntPtr Magick_Delegates_Get()
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.Magick_Delegates_Get();
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, Magick_Features_Get, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickNET+NativeMethods+X64", "Magick_Features_Get")]
		public static global::System.IntPtr Magick_Features_Get()
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.Magick_Features_Get();
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, Magick_GetFonts, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickNET+NativeMethods+X64", "Magick_GetFonts")]
		public static global::System.IntPtr Magick_GetFonts(
					out global::System.UIntPtr length, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.UIntPtr* pinned_length = &(length))
				fixed (global::System.IntPtr* pinned_exception = &(exception))
				{
					// Call to native method
					unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.Magick_GetFonts(
										pinned_length, 
										pinned_exception
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				}
			// Return
			return unsafe___value;
		}

		// Signature, Magick_GetFontName, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickNET+NativeMethods+X64", "Magick_GetFontName")]
		public static global::System.IntPtr Magick_GetFontName(
					global::System.IntPtr instance, 
					global::System.UIntPtr index)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.Magick_GetFontName(
								instance, 
								index
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, Magick_GetFontFamily, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickNET+NativeMethods+X64", "Magick_GetFontFamily")]
		public static global::System.IntPtr Magick_GetFontFamily(
					global::System.IntPtr instance, 
					global::System.UIntPtr index)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.Magick_GetFontFamily(
								instance, 
								index
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, Magick_DisposeFonts, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickNET+NativeMethods+X64", "Magick_DisposeFonts")]
		public static void Magick_DisposeFonts(global::System.IntPtr instance)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.Magick_DisposeFonts(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, Magick_SetLogDelegate, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x00041EA8] ImageMagick_MagickNET_LogDelegate__Magick_NET_Q16_AnyCPU__ImageMagick__MagickNET_LogDelegate__Magick_NET_Q16_AnyCPU, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickNET+NativeMethods+X64", "Magick_SetLogDelegate")]
		public static void Magick_SetLogDelegate(global::ImageMagick.MagickNET_LogDelegate__Magick_NET_Q16_AnyCPU method)
		{
			// Setup
			void* unsafe_method = default(void*);
			try
			{
				// Marshalling
				unsafe_method = (void*)global::System.Runtime.InteropServices.McgMarshal.GetStubForPInvokeDelegate(
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("ImageMagick.MagickNET+LogDelegate,Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=20048" +
											"25badfa91ec"), 
									method
								);
				// Call to native method
				global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.Magick_SetLogDelegate(unsafe_method);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(method);
			}
		}

		// Signature, Magick_SetLogEvents, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickNET+NativeMethods+X64", "Magick_SetLogEvents")]
		public static void Magick_SetLogEvents(global::System.IntPtr events)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.Magick_SetLogEvents(events);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, Magick_SetRandomSeed, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] long____int64, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickNET+NativeMethods+X64", "Magick_SetRandomSeed")]
		public static void Magick_SetRandomSeed(long value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.Magick_SetRandomSeed(value);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, MagickFormatInfo_Description_Get, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickFormatInfo+NativeMethods+X64", "MagickFormatInfo_Description_Get")]
		public static global::System.IntPtr MagickFormatInfo_Description_Get(global::System.IntPtr instance)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickFormatInfo_Description_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, MagickFormatInfo_CanReadMultithreaded_Get, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickFormatInfo+NativeMethods+X64", "MagickFormatInfo_CanReadMultithreaded_Get")]
		public static bool MagickFormatInfo_CanReadMultithreaded_Get(global::System.IntPtr instance)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickFormatInfo_CanReadMultithreaded_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value != 0;
		}

		// Signature, MagickFormatInfo_CanWriteMultithreaded_Get, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickFormatInfo+NativeMethods+X64", "MagickFormatInfo_CanWriteMultithreaded_Get")]
		public static bool MagickFormatInfo_CanWriteMultithreaded_Get(global::System.IntPtr instance)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickFormatInfo_CanWriteMultithreaded_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value != 0;
		}

		// Signature, MagickFormatInfo_Format_Get, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickFormatInfo+NativeMethods+X64", "MagickFormatInfo_Format_Get")]
		public static global::System.IntPtr MagickFormatInfo_Format_Get(global::System.IntPtr instance)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickFormatInfo_Format_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, MagickFormatInfo_IsMultiFrame_Get, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickFormatInfo+NativeMethods+X64", "MagickFormatInfo_IsMultiFrame_Get")]
		public static bool MagickFormatInfo_IsMultiFrame_Get(global::System.IntPtr instance)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickFormatInfo_IsMultiFrame_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value != 0;
		}

		// Signature, MagickFormatInfo_IsReadable_Get, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickFormatInfo+NativeMethods+X64", "MagickFormatInfo_IsReadable_Get")]
		public static bool MagickFormatInfo_IsReadable_Get(global::System.IntPtr instance)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickFormatInfo_IsReadable_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value != 0;
		}

		// Signature, MagickFormatInfo_IsWritable_Get, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickFormatInfo+NativeMethods+X64", "MagickFormatInfo_IsWritable_Get")]
		public static bool MagickFormatInfo_IsWritable_Get(global::System.IntPtr instance)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickFormatInfo_IsWritable_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value != 0;
		}

		// Signature, MagickFormatInfo_MimeType_Get, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickFormatInfo+NativeMethods+X64", "MagickFormatInfo_MimeType_Get")]
		public static global::System.IntPtr MagickFormatInfo_MimeType_Get(global::System.IntPtr instance)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickFormatInfo_MimeType_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, MagickFormatInfo_Module_Get, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickFormatInfo+NativeMethods+X64", "MagickFormatInfo_Module_Get")]
		public static global::System.IntPtr MagickFormatInfo_Module_Get(global::System.IntPtr instance)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickFormatInfo_Module_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, MagickFormatInfo_CreateList, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickFormatInfo+NativeMethods+X64", "MagickFormatInfo_CreateList")]
		public static global::System.IntPtr MagickFormatInfo_CreateList(
					out global::System.UIntPtr length, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.UIntPtr* pinned_length = &(length))
				fixed (global::System.IntPtr* pinned_exception = &(exception))
				{
					// Call to native method
					unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickFormatInfo_CreateList(
										pinned_length, 
										pinned_exception
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				}
			// Return
			return unsafe___value;
		}

		// Signature, MagickFormatInfo_DisposeList, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickFormatInfo+NativeMethods+X64", "MagickFormatInfo_DisposeList")]
		public static void MagickFormatInfo_DisposeList(
					global::System.IntPtr instance, 
					global::System.UIntPtr length)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickFormatInfo_DisposeList(
								instance, 
								length
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, MagickFormatInfo_GetInfo, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickFormatInfo+NativeMethods+X64", "MagickFormatInfo_GetInfo")]
		public static global::System.IntPtr MagickFormatInfo_GetInfo(
					global::System.IntPtr list, 
					global::System.UIntPtr index, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickFormatInfo_GetInfo(
									list, 
									index, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickFormatInfo_GetInfoByName, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickFormatInfo+NativeMethods+X64", "MagickFormatInfo_GetInfoByName")]
		public static global::System.IntPtr MagickFormatInfo_GetInfoByName(
					global::System.IntPtr name, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickFormatInfo_GetInfoByName(
									name, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickFormatInfo_Unregister, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickFormatInfo+NativeMethods+X64", "MagickFormatInfo_Unregister")]
		public static bool MagickFormatInfo_Unregister(global::System.IntPtr name)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickFormatInfo_Unregister(name);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value != 0;
		}

		// Signature, MagickImage_Create, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_Create")]
		public static global::System.IntPtr MagickImage_Create(
					global::System.IntPtr settings, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_Create(
									settings, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_Dispose, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_Dispose")]
		public static void MagickImage_Dispose(global::System.IntPtr instance)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_Dispose(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, MagickImage_AnimationDelay_Get, [fwd] [return] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_AnimationDelay_Get")]
		public static global::System.UIntPtr MagickImage_AnimationDelay_Get(global::System.IntPtr instance)
		{
			// Setup
			global::System.UIntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_AnimationDelay_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_AnimationDelay_Set, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_AnimationDelay_Set")]
		public static void MagickImage_AnimationDelay_Set(
					global::System.IntPtr instance, 
					global::System.UIntPtr value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_AnimationDelay_Set(
								instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, MagickImage_AnimationIterations_Get, [fwd] [return] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_AnimationIterations_Get")]
		public static global::System.UIntPtr MagickImage_AnimationIterations_Get(global::System.IntPtr instance)
		{
			// Setup
			global::System.UIntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_AnimationIterations_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_AnimationIterations_Set, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_AnimationIterations_Set")]
		public static void MagickImage_AnimationIterations_Set(
					global::System.IntPtr instance, 
					global::System.UIntPtr value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_AnimationIterations_Set(
								instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, MagickImage_AnimationTicksPerSecond_Get, [fwd] [return] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_AnimationTicksPerSecond_Get")]
		public static global::System.UIntPtr MagickImage_AnimationTicksPerSecond_Get(global::System.IntPtr instance)
		{
			// Setup
			global::System.UIntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_AnimationTicksPerSecond_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_AnimationTicksPerSecond_Set, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_AnimationTicksPerSecond_Set")]
		public static void MagickImage_AnimationTicksPerSecond_Set(
					global::System.IntPtr instance, 
					global::System.UIntPtr value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_AnimationTicksPerSecond_Set(
								instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, MagickImage_BackgroundColor_Get, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_BackgroundColor_Get")]
		public static global::System.IntPtr MagickImage_BackgroundColor_Get(global::System.IntPtr instance)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_BackgroundColor_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_BackgroundColor_Set, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_BackgroundColor_Set")]
		public static void MagickImage_BackgroundColor_Set(
					global::System.IntPtr instance, 
					global::System.IntPtr value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_BackgroundColor_Set(
								instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, MagickImage_BaseHeight_Get, [fwd] [return] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_BaseHeight_Get")]
		public static global::System.UIntPtr MagickImage_BaseHeight_Get(global::System.IntPtr instance)
		{
			// Setup
			global::System.UIntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_BaseHeight_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_BaseWidth_Get, [fwd] [return] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_BaseWidth_Get")]
		public static global::System.UIntPtr MagickImage_BaseWidth_Get(global::System.IntPtr instance)
		{
			// Setup
			global::System.UIntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_BaseWidth_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_BlackPointCompensation_Get, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_BlackPointCompensation_Get")]
		public static bool MagickImage_BlackPointCompensation_Get(global::System.IntPtr instance)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_BlackPointCompensation_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value != 0;
		}

		// Signature, MagickImage_BlackPointCompensation_Set, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00040848] bool__System.Boolean, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_BlackPointCompensation_Set")]
		public static void MagickImage_BlackPointCompensation_Set(
					global::System.IntPtr instance, 
					bool value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_BlackPointCompensation_Set(
								instance, 
								(value ? 1 : 0)
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, MagickImage_BorderColor_Get, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_BorderColor_Get")]
		public static global::System.IntPtr MagickImage_BorderColor_Get(global::System.IntPtr instance)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_BorderColor_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_BorderColor_Set, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_BorderColor_Set")]
		public static void MagickImage_BorderColor_Set(
					global::System.IntPtr instance, 
					global::System.IntPtr value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_BorderColor_Set(
								instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, MagickImage_BoundingBox_Get, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_BoundingBox_Get")]
		public static global::System.IntPtr MagickImage_BoundingBox_Get(global::System.IntPtr instance)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_BoundingBox_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_ChannelCount_Get, [fwd] [return] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_ChannelCount_Get")]
		public static global::System.UIntPtr MagickImage_ChannelCount_Get(global::System.IntPtr instance)
		{
			// Setup
			global::System.UIntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_ChannelCount_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_ChromaBluePrimary_Get, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_ChromaBluePrimary_Get")]
		public static global::System.IntPtr MagickImage_ChromaBluePrimary_Get(global::System.IntPtr instance)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_ChromaBluePrimary_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_ChromaBluePrimary_Set, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_ChromaBluePrimary_Set")]
		public static void MagickImage_ChromaBluePrimary_Set(
					global::System.IntPtr instance, 
					global::System.IntPtr value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_ChromaBluePrimary_Set(
								instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, MagickImage_ChromaGreenPrimary_Get, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_ChromaGreenPrimary_Get")]
		public static global::System.IntPtr MagickImage_ChromaGreenPrimary_Get(global::System.IntPtr instance)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_ChromaGreenPrimary_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_ChromaGreenPrimary_Set, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_ChromaGreenPrimary_Set")]
		public static void MagickImage_ChromaGreenPrimary_Set(
					global::System.IntPtr instance, 
					global::System.IntPtr value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_ChromaGreenPrimary_Set(
								instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, MagickImage_ChromaRedPrimary_Get, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_ChromaRedPrimary_Get")]
		public static global::System.IntPtr MagickImage_ChromaRedPrimary_Get(global::System.IntPtr instance)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_ChromaRedPrimary_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_ChromaRedPrimary_Set, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_ChromaRedPrimary_Set")]
		public static void MagickImage_ChromaRedPrimary_Set(
					global::System.IntPtr instance, 
					global::System.IntPtr value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_ChromaRedPrimary_Set(
								instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, MagickImage_ChromaWhitePoint_Get, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_ChromaWhitePoint_Get")]
		public static global::System.IntPtr MagickImage_ChromaWhitePoint_Get(global::System.IntPtr instance)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_ChromaWhitePoint_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_ChromaWhitePoint_Set, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_ChromaWhitePoint_Set")]
		public static void MagickImage_ChromaWhitePoint_Set(
					global::System.IntPtr instance, 
					global::System.IntPtr value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_ChromaWhitePoint_Set(
								instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, MagickImage_ClassType_Get, [fwd] [return] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_ClassType_Get")]
		public static global::System.UIntPtr MagickImage_ClassType_Get(
					global::System.IntPtr instance, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.UIntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_ClassType_Get(
									instance, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_ClassType_Set, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_ClassType_Set")]
		public static void MagickImage_ClassType_Set(
					global::System.IntPtr instance, 
					global::System.UIntPtr value, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_ClassType_Set(
									instance, 
									value, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, MagickImage_ColorFuzz_Get, [fwd] [return] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_ColorFuzz_Get")]
		public static double MagickImage_ColorFuzz_Get(
					global::System.IntPtr instance, 
					out global::System.IntPtr exception)
		{
			// Setup
			double unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_ColorFuzz_Get(
									instance, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_ColorFuzz_Set, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_ColorFuzz_Set")]
		public static void MagickImage_ColorFuzz_Set(
					global::System.IntPtr instance, 
					double value, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_ColorFuzz_Set(
									instance, 
									value, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, MagickImage_ColormapSize_Get, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_ColormapSize_Get")]
		public static global::System.IntPtr MagickImage_ColormapSize_Get(
					global::System.IntPtr instance, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_ColormapSize_Get(
									instance, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_ColormapSize_Set, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_ColormapSize_Set")]
		public static void MagickImage_ColormapSize_Set(
					global::System.IntPtr instance, 
					global::System.IntPtr value, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_ColormapSize_Set(
									instance, 
									value, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, MagickImage_ColorSpace_Get, [fwd] [return] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_ColorSpace_Get")]
		public static global::System.UIntPtr MagickImage_ColorSpace_Get(
					global::System.IntPtr instance, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.UIntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_ColorSpace_Get(
									instance, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_ColorSpace_Set, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_ColorSpace_Set")]
		public static void MagickImage_ColorSpace_Set(
					global::System.IntPtr instance, 
					global::System.UIntPtr value, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_ColorSpace_Set(
									instance, 
									value, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, MagickImage_ColorType_Get, [fwd] [return] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_ColorType_Get")]
		public static global::System.UIntPtr MagickImage_ColorType_Get(
					global::System.IntPtr instance, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.UIntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_ColorType_Get(
									instance, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_ColorType_Set, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_ColorType_Set")]
		public static void MagickImage_ColorType_Set(
					global::System.IntPtr instance, 
					global::System.UIntPtr value, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_ColorType_Set(
									instance, 
									value, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, MagickImage_Compose_Get, [fwd] [return] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_Compose_Get")]
		public static global::System.UIntPtr MagickImage_Compose_Get(global::System.IntPtr instance)
		{
			// Setup
			global::System.UIntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_Compose_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_Compose_Set, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_Compose_Set")]
		public static void MagickImage_Compose_Set(
					global::System.IntPtr instance, 
					global::System.UIntPtr value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_Compose_Set(
								instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, MagickImage_Compression_Get, [fwd] [return] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_Compression_Get")]
		public static global::System.UIntPtr MagickImage_Compression_Get(global::System.IntPtr instance)
		{
			// Setup
			global::System.UIntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_Compression_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_Depth_Get, [fwd] [return] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_Depth_Get")]
		public static global::System.UIntPtr MagickImage_Depth_Get(global::System.IntPtr instance)
		{
			// Setup
			global::System.UIntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_Depth_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_Depth_Set, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_Depth_Set")]
		public static void MagickImage_Depth_Set(
					global::System.IntPtr instance, 
					global::System.UIntPtr value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_Depth_Set(
								instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, MagickImage_Endian_Get, [fwd] [return] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_Endian_Get")]
		public static global::System.UIntPtr MagickImage_Endian_Get(global::System.IntPtr instance)
		{
			// Setup
			global::System.UIntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_Endian_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_Endian_Set, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_Endian_Set")]
		public static void MagickImage_Endian_Set(
					global::System.IntPtr instance, 
					global::System.UIntPtr value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_Endian_Set(
								instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, MagickImage_EncodingGeometry_Get, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_EncodingGeometry_Get")]
		public static global::System.IntPtr MagickImage_EncodingGeometry_Get(global::System.IntPtr instance)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_EncodingGeometry_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_FileName_Get, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_FileName_Get")]
		public static global::System.IntPtr MagickImage_FileName_Get(global::System.IntPtr instance)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_FileName_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_FileName_Set, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_FileName_Set")]
		public static void MagickImage_FileName_Set(
					global::System.IntPtr instance, 
					global::System.IntPtr value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_FileName_Set(
								instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, MagickImage_FilterType_Get, [fwd] [return] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_FilterType_Get")]
		public static global::System.UIntPtr MagickImage_FilterType_Get(global::System.IntPtr instance)
		{
			// Setup
			global::System.UIntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_FilterType_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_FilterType_Set, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_FilterType_Set")]
		public static void MagickImage_FilterType_Set(
					global::System.IntPtr instance, 
					global::System.UIntPtr value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_FilterType_Set(
								instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, MagickImage_Format_Get, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_Format_Get")]
		public static global::System.IntPtr MagickImage_Format_Get(global::System.IntPtr instance)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_Format_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_Format_Set, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_Format_Set")]
		public static void MagickImage_Format_Set(
					global::System.IntPtr instance, 
					global::System.IntPtr value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_Format_Set(
								instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, MagickImage_Gamma_Get, [fwd] [return] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_Gamma_Get")]
		public static double MagickImage_Gamma_Get(global::System.IntPtr instance)
		{
			// Setup
			double unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_Gamma_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_GifDisposeMethod_Get, [fwd] [return] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_GifDisposeMethod_Get")]
		public static global::System.UIntPtr MagickImage_GifDisposeMethod_Get(global::System.IntPtr instance)
		{
			// Setup
			global::System.UIntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_GifDisposeMethod_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_GifDisposeMethod_Set, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_GifDisposeMethod_Set")]
		public static void MagickImage_GifDisposeMethod_Set(
					global::System.IntPtr instance, 
					global::System.UIntPtr value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_GifDisposeMethod_Set(
								instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, MagickImage_Height_Get, [fwd] [return] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_Height_Get")]
		public static global::System.UIntPtr MagickImage_Height_Get(global::System.IntPtr instance)
		{
			// Setup
			global::System.UIntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_Height_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_HasAlpha_Get, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_HasAlpha_Get")]
		public static bool MagickImage_HasAlpha_Get(
					global::System.IntPtr instance, 
					out global::System.IntPtr exception)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_HasAlpha_Get(
									instance, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value != 0;
		}

		// Signature, MagickImage_HasAlpha_Set, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_HasAlpha_Set")]
		public static void MagickImage_HasAlpha_Set(
					global::System.IntPtr instance, 
					bool value, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_HasAlpha_Set(
									instance, 
									(value ? 1 : 0), 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, MagickImage_Interlace_Get, [fwd] [return] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_Interlace_Get")]
		public static global::System.UIntPtr MagickImage_Interlace_Get(global::System.IntPtr instance)
		{
			// Setup
			global::System.UIntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_Interlace_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_Interlace_Set, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_Interlace_Set")]
		public static void MagickImage_Interlace_Set(
					global::System.IntPtr instance, 
					global::System.UIntPtr value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_Interlace_Set(
								instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, MagickImage_Interpolate_Get, [fwd] [return] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_Interpolate_Get")]
		public static global::System.UIntPtr MagickImage_Interpolate_Get(global::System.IntPtr instance)
		{
			// Setup
			global::System.UIntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_Interpolate_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_Interpolate_Set, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_Interpolate_Set")]
		public static void MagickImage_Interpolate_Set(
					global::System.IntPtr instance, 
					global::System.UIntPtr value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_Interpolate_Set(
								instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, MagickImage_IsOpaque_Get, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_IsOpaque_Get")]
		public static bool MagickImage_IsOpaque_Get(
					global::System.IntPtr instance, 
					out global::System.IntPtr exception)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_IsOpaque_Get(
									instance, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value != 0;
		}

		// Signature, MagickImage_MatteColor_Get, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_MatteColor_Get")]
		public static global::System.IntPtr MagickImage_MatteColor_Get(global::System.IntPtr instance)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_MatteColor_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_MatteColor_Set, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_MatteColor_Set")]
		public static void MagickImage_MatteColor_Set(
					global::System.IntPtr instance, 
					global::System.IntPtr value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_MatteColor_Set(
								instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, MagickImage_MeanErrorPerPixel_Get, [fwd] [return] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_MeanErrorPerPixel_Get")]
		public static double MagickImage_MeanErrorPerPixel_Get(global::System.IntPtr instance)
		{
			// Setup
			double unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_MeanErrorPerPixel_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_NormalizedMaximumError_Get, [fwd] [return] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_NormalizedMaximumError_Get")]
		public static double MagickImage_NormalizedMaximumError_Get(global::System.IntPtr instance)
		{
			// Setup
			double unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_NormalizedMaximumError_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_NormalizedMeanError_Get, [fwd] [return] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_NormalizedMeanError_Get")]
		public static double MagickImage_NormalizedMeanError_Get(global::System.IntPtr instance)
		{
			// Setup
			double unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_NormalizedMeanError_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_Orientation_Get, [fwd] [return] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_Orientation_Get")]
		public static global::System.UIntPtr MagickImage_Orientation_Get(global::System.IntPtr instance)
		{
			// Setup
			global::System.UIntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_Orientation_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_Orientation_Set, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_Orientation_Set")]
		public static void MagickImage_Orientation_Set(
					global::System.IntPtr instance, 
					global::System.UIntPtr value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_Orientation_Set(
								instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, MagickImage_Page_Get, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_Page_Get")]
		public static global::System.IntPtr MagickImage_Page_Get(global::System.IntPtr instance)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_Page_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_Page_Set, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_Page_Set")]
		public static void MagickImage_Page_Set(
					global::System.IntPtr instance, 
					global::System.IntPtr value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_Page_Set(
								instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, MagickImage_Quality_Get, [fwd] [return] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_Quality_Get")]
		public static global::System.UIntPtr MagickImage_Quality_Get(global::System.IntPtr instance)
		{
			// Setup
			global::System.UIntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_Quality_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_Quality_Set, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_Quality_Set")]
		public static void MagickImage_Quality_Set(
					global::System.IntPtr instance, 
					global::System.UIntPtr value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_Quality_Set(
								instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, MagickImage_RenderingIntent_Get, [fwd] [return] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_RenderingIntent_Get")]
		public static global::System.UIntPtr MagickImage_RenderingIntent_Get(global::System.IntPtr instance)
		{
			// Setup
			global::System.UIntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_RenderingIntent_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_RenderingIntent_Set, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_RenderingIntent_Set")]
		public static void MagickImage_RenderingIntent_Set(
					global::System.IntPtr instance, 
					global::System.UIntPtr value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_RenderingIntent_Set(
								instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, MagickImage_ResolutionUnits_Get, [fwd] [return] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_ResolutionUnits_Get")]
		public static global::System.UIntPtr MagickImage_ResolutionUnits_Get(global::System.IntPtr instance)
		{
			// Setup
			global::System.UIntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_ResolutionUnits_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_ResolutionUnits_Set, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_ResolutionUnits_Set")]
		public static void MagickImage_ResolutionUnits_Set(
					global::System.IntPtr instance, 
					global::System.UIntPtr value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_ResolutionUnits_Set(
								instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, MagickImage_ResolutionX_Get, [fwd] [return] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_ResolutionX_Get")]
		public static double MagickImage_ResolutionX_Get(global::System.IntPtr instance)
		{
			// Setup
			double unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_ResolutionX_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_ResolutionX_Set, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_ResolutionX_Set")]
		public static void MagickImage_ResolutionX_Set(
					global::System.IntPtr instance, 
					double value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_ResolutionX_Set(
								instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, MagickImage_ResolutionY_Get, [fwd] [return] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_ResolutionY_Get")]
		public static double MagickImage_ResolutionY_Get(global::System.IntPtr instance)
		{
			// Setup
			double unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_ResolutionY_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_ResolutionY_Set, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_ResolutionY_Set")]
		public static void MagickImage_ResolutionY_Set(
					global::System.IntPtr instance, 
					double value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_ResolutionY_Set(
								instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, MagickImage_Signature_Get, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_Signature_Get")]
		public static global::System.IntPtr MagickImage_Signature_Get(
					global::System.IntPtr instance, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_Signature_Get(
									instance, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_TotalColors_Get, [fwd] [return] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_TotalColors_Get")]
		public static global::System.UIntPtr MagickImage_TotalColors_Get(
					global::System.IntPtr instance, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.UIntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_TotalColors_Get(
									instance, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_VirtualPixelMethod_Get, [fwd] [return] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_VirtualPixelMethod_Get")]
		public static global::System.UIntPtr MagickImage_VirtualPixelMethod_Get(
					global::System.IntPtr instance, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.UIntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_VirtualPixelMethod_Get(
									instance, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_VirtualPixelMethod_Set, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_VirtualPixelMethod_Set")]
		public static void MagickImage_VirtualPixelMethod_Set(
					global::System.IntPtr instance, 
					global::System.UIntPtr value, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_VirtualPixelMethod_Set(
									instance, 
									value, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, MagickImage_Width_Get, [fwd] [return] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_Width_Get")]
		public static global::System.UIntPtr MagickImage_Width_Get(global::System.IntPtr instance)
		{
			// Setup
			global::System.UIntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_Width_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_AdaptiveBlur, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_AdaptiveBlur")]
		public static global::System.IntPtr MagickImage_AdaptiveBlur(
					global::System.IntPtr Instance, 
					double radius, 
					double sigma, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_AdaptiveBlur(
									Instance, 
									radius, 
									sigma, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_AdaptiveResize, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_AdaptiveResize")]
		public static global::System.IntPtr MagickImage_AdaptiveResize(
					global::System.IntPtr Instance, 
					global::System.IntPtr geometry, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_AdaptiveResize(
									Instance, 
									geometry, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_AdaptiveSharpen, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_AdaptiveSharpen")]
		public static global::System.IntPtr MagickImage_AdaptiveSharpen(
					global::System.IntPtr Instance, 
					double radius, 
					double sigma, 
					global::System.UIntPtr channels, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_AdaptiveSharpen(
									Instance, 
									radius, 
									sigma, 
									channels, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_AdaptiveThreshold, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_AdaptiveThreshold")]
		public static global::System.IntPtr MagickImage_AdaptiveThreshold(
					global::System.IntPtr Instance, 
					global::System.UIntPtr width, 
					global::System.UIntPtr height, 
					double bias, 
					global::System.UIntPtr channels, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_AdaptiveThreshold(
									Instance, 
									width, 
									height, 
									bias, 
									channels, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_AddNoise, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_AddNoise")]
		public static global::System.IntPtr MagickImage_AddNoise(
					global::System.IntPtr Instance, 
					global::System.UIntPtr noiseType, 
					double attenuate, 
					global::System.UIntPtr channels, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_AddNoise(
									Instance, 
									noiseType, 
									attenuate, 
									channels, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_AddProfile, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00042A40] rg_byte__unsigned char *, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_AddProfile")]
		public static void MagickImage_AddProfile(
					global::System.IntPtr Instance, 
					global::System.IntPtr name, 
					byte[] datum, 
					global::System.UIntPtr length, 
					out global::System.IntPtr exception)
		{
			// Setup
			byte* unsafe_datum;
			// Marshalling
			fixed (byte* pinned_datum = ((datum != null 
						&& datum.Length == 0) ? new byte[1] : datum))
			{
				unsafe_datum = (byte*)pinned_datum;
				fixed (global::System.IntPtr* pinned_exception = &(exception))
				{
					// Call to native method
					global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_AddProfile(
										Instance, 
										name, 
										unsafe_datum, 
										length, 
										pinned_exception
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				}
			}
			// Return
		}

		// Signature, MagickImage_AffineTransform, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_AffineTransform")]
		public static global::System.IntPtr MagickImage_AffineTransform(
					global::System.IntPtr Instance, 
					double scaleX, 
					double scaleY, 
					double shearX, 
					double shearY, 
					double translateX, 
					double translateY, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_AffineTransform(
									Instance, 
									scaleX, 
									scaleY, 
									shearX, 
									shearY, 
									translateX, 
									translateY, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_Annotate, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_Annotate")]
		public static void MagickImage_Annotate(
					global::System.IntPtr Instance, 
					global::System.IntPtr settings, 
					global::System.IntPtr text, 
					global::System.IntPtr boundingArea, 
					global::System.UIntPtr gravity, 
					double degrees, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_Annotate(
									Instance, 
									settings, 
									text, 
									boundingArea, 
									gravity, 
									degrees, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, MagickImage_AnnotateGravity, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_AnnotateGravity")]
		public static void MagickImage_AnnotateGravity(
					global::System.IntPtr Instance, 
					global::System.IntPtr settings, 
					global::System.IntPtr text, 
					global::System.UIntPtr gravity, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_AnnotateGravity(
									Instance, 
									settings, 
									text, 
									gravity, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, MagickImage_AutoGamma, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_AutoGamma")]
		public static void MagickImage_AutoGamma(
					global::System.IntPtr Instance, 
					global::System.UIntPtr channels, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_AutoGamma(
									Instance, 
									channels, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, MagickImage_AutoLevel, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_AutoLevel")]
		public static void MagickImage_AutoLevel(
					global::System.IntPtr Instance, 
					global::System.UIntPtr channels, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_AutoLevel(
									Instance, 
									channels, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, MagickImage_AutoOrient, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_AutoOrient")]
		public static global::System.IntPtr MagickImage_AutoOrient(
					global::System.IntPtr Instance, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_AutoOrient(
									Instance, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_AutoThreshold, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_AutoThreshold")]
		public static void MagickImage_AutoThreshold(
					global::System.IntPtr Instance, 
					global::System.UIntPtr method, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_AutoThreshold(
									Instance, 
									method, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, MagickImage_BlackThreshold, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_BlackThreshold")]
		public static void MagickImage_BlackThreshold(
					global::System.IntPtr Instance, 
					global::System.IntPtr threshold, 
					global::System.UIntPtr channels, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_BlackThreshold(
									Instance, 
									threshold, 
									channels, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, MagickImage_BlueShift, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_BlueShift")]
		public static global::System.IntPtr MagickImage_BlueShift(
					global::System.IntPtr Instance, 
					double factor, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_BlueShift(
									Instance, 
									factor, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_Blur, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_Blur")]
		public static global::System.IntPtr MagickImage_Blur(
					global::System.IntPtr Instance, 
					double radius, 
					double sigma, 
					global::System.UIntPtr channels, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_Blur(
									Instance, 
									radius, 
									sigma, 
									channels, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_Border, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_Border")]
		public static global::System.IntPtr MagickImage_Border(
					global::System.IntPtr Instance, 
					global::System.IntPtr value, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_Border(
									Instance, 
									value, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_BrightnessContrast, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_BrightnessContrast")]
		public static void MagickImage_BrightnessContrast(
					global::System.IntPtr Instance, 
					double brightness, 
					double contrast, 
					global::System.UIntPtr channels, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_BrightnessContrast(
									Instance, 
									brightness, 
									contrast, 
									channels, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, MagickImage_CannyEdge, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_CannyEdge")]
		public static global::System.IntPtr MagickImage_CannyEdge(
					global::System.IntPtr Instance, 
					double radius, 
					double sigma, 
					double lower, 
					double upper, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_CannyEdge(
									Instance, 
									radius, 
									sigma, 
									lower, 
									upper, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_ChannelOffset, [fwd] [return] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_ChannelOffset")]
		public static global::System.UIntPtr MagickImage_ChannelOffset(
					global::System.IntPtr Instance, 
					global::System.UIntPtr channel)
		{
			// Setup
			global::System.UIntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_ChannelOffset(
								Instance, 
								channel
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_Charcoal, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_Charcoal")]
		public static global::System.IntPtr MagickImage_Charcoal(
					global::System.IntPtr Instance, 
					double radius, 
					double sigma, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_Charcoal(
									Instance, 
									radius, 
									sigma, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_Chop, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_Chop")]
		public static global::System.IntPtr MagickImage_Chop(
					global::System.IntPtr Instance, 
					global::System.IntPtr geometry, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_Chop(
									Instance, 
									geometry, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_Clahe, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_Clahe")]
		public static void MagickImage_Clahe(
					global::System.IntPtr Instance, 
					global::System.UIntPtr xTiles, 
					global::System.UIntPtr yTiles, 
					global::System.UIntPtr numberBins, 
					double clipLimit, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_Clahe(
									Instance, 
									xTiles, 
									yTiles, 
									numberBins, 
									clipLimit, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, MagickImage_Clamp, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_Clamp")]
		public static void MagickImage_Clamp(
					global::System.IntPtr Instance, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_Clamp(
									Instance, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, MagickImage_ClampChannel, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_ClampChannel")]
		public static void MagickImage_ClampChannel(
					global::System.IntPtr Instance, 
					global::System.UIntPtr channels, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_ClampChannel(
									Instance, 
									channels, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, MagickImage_Clip, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_Clip")]
		public static void MagickImage_Clip(
					global::System.IntPtr Instance, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_Clip(
									Instance, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, MagickImage_ClipPath, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_ClipPath")]
		public static void MagickImage_ClipPath(
					global::System.IntPtr Instance, 
					global::System.IntPtr pathName, 
					bool inside, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_ClipPath(
									Instance, 
									pathName, 
									(inside ? 1 : 0), 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, MagickImage_Clone, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_Clone")]
		public static global::System.IntPtr MagickImage_Clone(
					global::System.IntPtr Instance, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_Clone(
									Instance, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_CloneArea, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_CloneArea")]
		public static global::System.IntPtr MagickImage_CloneArea(
					global::System.IntPtr Instance, 
					global::System.UIntPtr width, 
					global::System.UIntPtr height, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_CloneArea(
									Instance, 
									width, 
									height, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_Clut, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_Clut")]
		public static void MagickImage_Clut(
					global::System.IntPtr Instance, 
					global::System.IntPtr image, 
					global::System.UIntPtr method, 
					global::System.UIntPtr channels, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_Clut(
									Instance, 
									image, 
									method, 
									channels, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, MagickImage_ColorDecisionList, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_ColorDecisionList")]
		public static void MagickImage_ColorDecisionList(
					global::System.IntPtr Instance, 
					global::System.IntPtr fileName, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_ColorDecisionList(
									Instance, 
									fileName, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, MagickImage_Colorize, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_Colorize")]
		public static global::System.IntPtr MagickImage_Colorize(
					global::System.IntPtr Instance, 
					global::System.IntPtr color, 
					global::System.IntPtr blend, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_Colorize(
									Instance, 
									color, 
									blend, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_ColorMatrix, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_ColorMatrix")]
		public static global::System.IntPtr MagickImage_ColorMatrix(
					global::System.IntPtr Instance, 
					global::System.IntPtr matrix, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_ColorMatrix(
									Instance, 
									matrix, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_ColorThreshold, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_ColorThreshold")]
		public static void MagickImage_ColorThreshold(
					global::System.IntPtr Instance, 
					global::System.IntPtr startColor, 
					global::System.IntPtr stopColor, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_ColorThreshold(
									Instance, 
									startColor, 
									stopColor, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, MagickImage_Compare, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] double__double, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_Compare")]
		public static global::System.IntPtr MagickImage_Compare(
					global::System.IntPtr Instance, 
					global::System.IntPtr image, 
					global::System.UIntPtr metric, 
					global::System.UIntPtr channels, 
					out double distortion, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (double* pinned_distortion = &(distortion))
				fixed (global::System.IntPtr* pinned_exception = &(exception))
				{
					// Call to native method
					unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_Compare(
										Instance, 
										image, 
										metric, 
										channels, 
										pinned_distortion, 
										pinned_exception
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_CompareDistortion, [fwd] [return] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_CompareDistortion")]
		public static double MagickImage_CompareDistortion(
					global::System.IntPtr Instance, 
					global::System.IntPtr image, 
					global::System.UIntPtr metric, 
					global::System.UIntPtr channels, 
					out global::System.IntPtr exception)
		{
			// Setup
			double unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_CompareDistortion(
									Instance, 
									image, 
									metric, 
									channels, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_Composite, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_Composite")]
		public static void MagickImage_Composite(
					global::System.IntPtr Instance, 
					global::System.IntPtr image, 
					global::System.IntPtr x, 
					global::System.IntPtr y, 
					global::System.UIntPtr compose, 
					global::System.UIntPtr channels, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_Composite(
									Instance, 
									image, 
									x, 
									y, 
									compose, 
									channels, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, MagickImage_CompositeGravity, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_CompositeGravity")]
		public static void MagickImage_CompositeGravity(
					global::System.IntPtr Instance, 
					global::System.IntPtr image, 
					global::System.UIntPtr gravity, 
					global::System.IntPtr x, 
					global::System.IntPtr y, 
					global::System.UIntPtr compose, 
					global::System.UIntPtr channels, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_CompositeGravity(
									Instance, 
									image, 
									gravity, 
									x, 
									y, 
									compose, 
									channels, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, MagickImage_ConnectedComponents, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_ConnectedComponents")]
		public static global::System.IntPtr MagickImage_ConnectedComponents(
					global::System.IntPtr Instance, 
					global::System.UIntPtr connectivity, 
					out global::System.IntPtr objects, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_objects = &(objects))
				fixed (global::System.IntPtr* pinned_exception = &(exception))
				{
					// Call to native method
					unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_ConnectedComponents(
										Instance, 
										connectivity, 
										pinned_objects, 
										pinned_exception
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_Contrast, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_Contrast")]
		public static void MagickImage_Contrast(
					global::System.IntPtr Instance, 
					bool enhance, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_Contrast(
									Instance, 
									(enhance ? 1 : 0), 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, MagickImage_ContrastStretch, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_ContrastStretch")]
		public static void MagickImage_ContrastStretch(
					global::System.IntPtr Instance, 
					double blackPoint, 
					double whitePoint, 
					global::System.UIntPtr channels, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_ContrastStretch(
									Instance, 
									blackPoint, 
									whitePoint, 
									channels, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, MagickImage_ConvexHull, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_ConvexHull")]
		public static global::System.IntPtr MagickImage_ConvexHull(
					global::System.IntPtr Instance, 
					out global::System.UIntPtr length, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.UIntPtr* pinned_length = &(length))
				fixed (global::System.IntPtr* pinned_exception = &(exception))
				{
					// Call to native method
					unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_ConvexHull(
										Instance, 
										pinned_length, 
										pinned_exception
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_Convolve, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_Convolve")]
		public static global::System.IntPtr MagickImage_Convolve(
					global::System.IntPtr Instance, 
					global::System.IntPtr matrix, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_Convolve(
									Instance, 
									matrix, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_CopyPixels, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_CopyPixels")]
		public static void MagickImage_CopyPixels(
					global::System.IntPtr Instance, 
					global::System.IntPtr image, 
					global::System.IntPtr geometry, 
					global::System.IntPtr offset, 
					global::System.UIntPtr channels, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_CopyPixels(
									Instance, 
									image, 
									geometry, 
									offset, 
									channels, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, MagickImage_Crop, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_Crop")]
		public static global::System.IntPtr MagickImage_Crop(
					global::System.IntPtr Instance, 
					global::System.IntPtr geometry, 
					global::System.UIntPtr gravity, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_Crop(
									Instance, 
									geometry, 
									gravity, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_CropToTiles, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_CropToTiles")]
		public static global::System.IntPtr MagickImage_CropToTiles(
					global::System.IntPtr Instance, 
					global::System.IntPtr geometry, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_CropToTiles(
									Instance, 
									geometry, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_CycleColormap, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_CycleColormap")]
		public static void MagickImage_CycleColormap(
					global::System.IntPtr Instance, 
					global::System.IntPtr amount, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_CycleColormap(
									Instance, 
									amount, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, MagickImage_Decipher, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_Decipher")]
		public static void MagickImage_Decipher(
					global::System.IntPtr Instance, 
					global::System.IntPtr passphrase, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_Decipher(
									Instance, 
									passphrase, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, MagickImage_Deskew, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_Deskew")]
		public static global::System.IntPtr MagickImage_Deskew(
					global::System.IntPtr Instance, 
					double threshold, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_Deskew(
									Instance, 
									threshold, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_Despeckle, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_Despeckle")]
		public static global::System.IntPtr MagickImage_Despeckle(
					global::System.IntPtr Instance, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_Despeckle(
									Instance, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_DetermineColorType, [fwd] [return] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_DetermineColorType")]
		public static global::System.UIntPtr MagickImage_DetermineColorType(
					global::System.IntPtr Instance, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.UIntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_DetermineColorType(
									Instance, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_Distort, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x00042A40] rg_double__double *, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_Distort")]
		public static global::System.IntPtr MagickImage_Distort(
					global::System.IntPtr Instance, 
					global::System.UIntPtr method, 
					bool bestfit, 
					double[] arguments, 
					global::System.UIntPtr length, 
					out global::System.IntPtr exception)
		{
			// Setup
			double* unsafe_arguments;
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (double* pinned_arguments = ((arguments != null 
						&& arguments.Length == 0) ? new double[1] : arguments))
			{
				unsafe_arguments = (double*)pinned_arguments;
				fixed (global::System.IntPtr* pinned_exception = &(exception))
				{
					// Call to native method
					unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_Distort(
										Instance, 
										method, 
										(bestfit ? 1 : 0), 
										unsafe_arguments, 
										length, 
										pinned_exception
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				}
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_Edge, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_Edge")]
		public static global::System.IntPtr MagickImage_Edge(
					global::System.IntPtr Instance, 
					double radius, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_Edge(
									Instance, 
									radius, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_Emboss, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_Emboss")]
		public static global::System.IntPtr MagickImage_Emboss(
					global::System.IntPtr Instance, 
					double radius, 
					double sigma, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_Emboss(
									Instance, 
									radius, 
									sigma, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_Encipher, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_Encipher")]
		public static void MagickImage_Encipher(
					global::System.IntPtr Instance, 
					global::System.IntPtr passphrase, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_Encipher(
									Instance, 
									passphrase, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, MagickImage_Enhance, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_Enhance")]
		public static global::System.IntPtr MagickImage_Enhance(
					global::System.IntPtr Instance, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_Enhance(
									Instance, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_Equalize, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_Equalize")]
		public static void MagickImage_Equalize(
					global::System.IntPtr Instance, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_Equalize(
									Instance, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, MagickImage_Equals, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_Equals")]
		public static bool MagickImage_Equals(
					global::System.IntPtr Instance, 
					global::System.IntPtr image, 
					out global::System.IntPtr exception)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_Equals(
									Instance, 
									image, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value != 0;
		}

		// Signature, MagickImage_EvaluateFunction, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x00042A40] rg_double__double *, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_EvaluateFunction")]
		public static void MagickImage_EvaluateFunction(
					global::System.IntPtr Instance, 
					global::System.UIntPtr channels, 
					global::System.UIntPtr evaluateFunction, 
					double[] values, 
					global::System.UIntPtr length, 
					out global::System.IntPtr exception)
		{
			// Setup
			double* unsafe_values;
			// Marshalling
			fixed (double* pinned_values = ((values != null 
						&& values.Length == 0) ? new double[1] : values))
			{
				unsafe_values = (double*)pinned_values;
				fixed (global::System.IntPtr* pinned_exception = &(exception))
				{
					// Call to native method
					global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_EvaluateFunction(
										Instance, 
										channels, 
										evaluateFunction, 
										unsafe_values, 
										length, 
										pinned_exception
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				}
			}
			// Return
		}

		// Signature, MagickImage_EvaluateGeometry, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_EvaluateGeometry")]
		public static void MagickImage_EvaluateGeometry(
					global::System.IntPtr Instance, 
					global::System.UIntPtr channels, 
					global::System.IntPtr geometry, 
					global::System.UIntPtr evaluateOperator, 
					double value, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_EvaluateGeometry(
									Instance, 
									channels, 
									geometry, 
									evaluateOperator, 
									value, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, MagickImage_EvaluateOperator, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_EvaluateOperator")]
		public static void MagickImage_EvaluateOperator(
					global::System.IntPtr Instance, 
					global::System.UIntPtr channels, 
					global::System.UIntPtr evaluateOperator, 
					double value, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_EvaluateOperator(
									Instance, 
									channels, 
									evaluateOperator, 
									value, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, MagickImage_Extent, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_Extent")]
		public static global::System.IntPtr MagickImage_Extent(
					global::System.IntPtr Instance, 
					global::System.IntPtr geometry, 
					global::System.UIntPtr gravity, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_Extent(
									Instance, 
									geometry, 
									gravity, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_Flip, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_Flip")]
		public static global::System.IntPtr MagickImage_Flip(
					global::System.IntPtr Instance, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_Flip(
									Instance, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_FloodFill, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_FloodFill")]
		public static void MagickImage_FloodFill(
					global::System.IntPtr Instance, 
					global::System.IntPtr settings, 
					global::System.IntPtr x, 
					global::System.IntPtr y, 
					global::System.IntPtr target, 
					bool invert, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_FloodFill(
									Instance, 
									settings, 
									x, 
									y, 
									target, 
									(invert ? 1 : 0), 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, MagickImage_Flop, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_Flop")]
		public static global::System.IntPtr MagickImage_Flop(
					global::System.IntPtr Instance, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_Flop(
									Instance, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_FontTypeMetrics, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_FontTypeMetrics")]
		public static global::System.IntPtr MagickImage_FontTypeMetrics(
					global::System.IntPtr Instance, 
					global::System.IntPtr settings, 
					bool ignoreNewlines, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_FontTypeMetrics(
									Instance, 
									settings, 
									(ignoreNewlines ? 1 : 0), 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_FormatExpression, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_FormatExpression")]
		public static global::System.IntPtr MagickImage_FormatExpression(
					global::System.IntPtr Instance, 
					global::System.IntPtr settings, 
					global::System.IntPtr expression, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_FormatExpression(
									Instance, 
									settings, 
									expression, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_Frame, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_Frame")]
		public static global::System.IntPtr MagickImage_Frame(
					global::System.IntPtr Instance, 
					global::System.IntPtr geometry, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_Frame(
									Instance, 
									geometry, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_Fx, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_Fx")]
		public static global::System.IntPtr MagickImage_Fx(
					global::System.IntPtr Instance, 
					global::System.IntPtr expression, 
					global::System.UIntPtr channels, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_Fx(
									Instance, 
									expression, 
									channels, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_GammaCorrect, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_GammaCorrect")]
		public static void MagickImage_GammaCorrect(
					global::System.IntPtr Instance, 
					double gamma, 
					global::System.UIntPtr channels, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_GammaCorrect(
									Instance, 
									gamma, 
									channels, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, MagickImage_GaussianBlur, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_GaussianBlur")]
		public static global::System.IntPtr MagickImage_GaussianBlur(
					global::System.IntPtr Instance, 
					double radius, 
					double sigma, 
					global::System.UIntPtr channels, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_GaussianBlur(
									Instance, 
									radius, 
									sigma, 
									channels, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_GetArtifact, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_GetArtifact")]
		public static global::System.IntPtr MagickImage_GetArtifact(
					global::System.IntPtr Instance, 
					global::System.IntPtr name)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_GetArtifact(
								Instance, 
								name
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_GetAttribute, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_GetAttribute")]
		public static global::System.IntPtr MagickImage_GetAttribute(
					global::System.IntPtr Instance, 
					global::System.IntPtr name, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_GetAttribute(
									Instance, 
									name, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_GetBitDepth, [fwd] [return] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_GetBitDepth")]
		public static global::System.UIntPtr MagickImage_GetBitDepth(
					global::System.IntPtr Instance, 
					global::System.UIntPtr channels, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.UIntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_GetBitDepth(
									Instance, 
									channels, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_GetColormap, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_GetColormap")]
		public static global::System.IntPtr MagickImage_GetColormap(
					global::System.IntPtr Instance, 
					global::System.UIntPtr index)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_GetColormap(
								Instance, 
								index
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_GetNext, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_GetNext")]
		public static global::System.IntPtr MagickImage_GetNext(global::System.IntPtr image)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_GetNext(image);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_GetNextArtifactName, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_GetNextArtifactName")]
		public static global::System.IntPtr MagickImage_GetNextArtifactName(global::System.IntPtr Instance)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_GetNextArtifactName(Instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_GetNextAttributeName, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_GetNextAttributeName")]
		public static global::System.IntPtr MagickImage_GetNextAttributeName(global::System.IntPtr Instance)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_GetNextAttributeName(Instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_GetNextProfileName, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_GetNextProfileName")]
		public static global::System.IntPtr MagickImage_GetNextProfileName(global::System.IntPtr Instance)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_GetNextProfileName(Instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_GetProfile, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_GetProfile")]
		public static global::System.IntPtr MagickImage_GetProfile(
					global::System.IntPtr Instance, 
					global::System.IntPtr name, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_GetProfile(
									Instance, 
									name, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_GetReadMask, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_GetReadMask")]
		public static global::System.IntPtr MagickImage_GetReadMask(
					global::System.IntPtr Instance, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_GetReadMask(
									Instance, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_GetWriteMask, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_GetWriteMask")]
		public static global::System.IntPtr MagickImage_GetWriteMask(
					global::System.IntPtr Instance, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_GetWriteMask(
									Instance, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_Grayscale, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_Grayscale")]
		public static void MagickImage_Grayscale(
					global::System.IntPtr Instance, 
					global::System.UIntPtr method, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_Grayscale(
									Instance, 
									method, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, MagickImage_HaldClut, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_HaldClut")]
		public static void MagickImage_HaldClut(
					global::System.IntPtr Instance, 
					global::System.IntPtr image, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_HaldClut(
									Instance, 
									image, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, MagickImage_HasChannel, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_HasChannel")]
		public static bool MagickImage_HasChannel(
					global::System.IntPtr Instance, 
					global::System.UIntPtr channel)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_HasChannel(
								Instance, 
								channel
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value != 0;
		}

		// Signature, MagickImage_HasProfile, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_HasProfile")]
		public static bool MagickImage_HasProfile(
					global::System.IntPtr Instance, 
					global::System.IntPtr name)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_HasProfile(
								Instance, 
								name
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value != 0;
		}

		// Signature, MagickImage_Histogram, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_Histogram")]
		public static global::System.IntPtr MagickImage_Histogram(
					global::System.IntPtr Instance, 
					out global::System.UIntPtr length, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.UIntPtr* pinned_length = &(length))
				fixed (global::System.IntPtr* pinned_exception = &(exception))
				{
					// Call to native method
					unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_Histogram(
										Instance, 
										pinned_length, 
										pinned_exception
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_HoughLine, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_HoughLine")]
		public static global::System.IntPtr MagickImage_HoughLine(
					global::System.IntPtr Instance, 
					global::System.UIntPtr width, 
					global::System.UIntPtr height, 
					global::System.UIntPtr threshold, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_HoughLine(
									Instance, 
									width, 
									height, 
									threshold, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_Implode, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_Implode")]
		public static global::System.IntPtr MagickImage_Implode(
					global::System.IntPtr Instance, 
					double amount, 
					global::System.UIntPtr method, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_Implode(
									Instance, 
									amount, 
									method, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_Kmeans, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_Kmeans")]
		public static void MagickImage_Kmeans(
					global::System.IntPtr Instance, 
					global::System.UIntPtr numberColors, 
					global::System.UIntPtr maxIterations, 
					double tolerance, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_Kmeans(
									Instance, 
									numberColors, 
									maxIterations, 
									tolerance, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, MagickImage_Kuwahara, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_Kuwahara")]
		public static global::System.IntPtr MagickImage_Kuwahara(
					global::System.IntPtr Instance, 
					double radius, 
					double sigma, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_Kuwahara(
									Instance, 
									radius, 
									sigma, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_Level, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_Level")]
		public static void MagickImage_Level(
					global::System.IntPtr Instance, 
					double blackPoint, 
					double whitePoint, 
					double gamma, 
					global::System.UIntPtr channels, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_Level(
									Instance, 
									blackPoint, 
									whitePoint, 
									gamma, 
									channels, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, MagickImage_LevelColors, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_LevelColors")]
		public static void MagickImage_LevelColors(
					global::System.IntPtr Instance, 
					global::System.IntPtr blackColor, 
					global::System.IntPtr whiteColor, 
					global::System.UIntPtr channels, 
					bool invert, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_LevelColors(
									Instance, 
									blackColor, 
									whiteColor, 
									channels, 
									(invert ? 1 : 0), 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, MagickImage_Levelize, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_Levelize")]
		public static void MagickImage_Levelize(
					global::System.IntPtr Instance, 
					double blackPoint, 
					double whitePoint, 
					double gamma, 
					global::System.UIntPtr channels, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_Levelize(
									Instance, 
									blackPoint, 
									whitePoint, 
									gamma, 
									channels, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, MagickImage_LinearStretch, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_LinearStretch")]
		public static void MagickImage_LinearStretch(
					global::System.IntPtr Instance, 
					double blackPoint, 
					double whitePoint, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_LinearStretch(
									Instance, 
									blackPoint, 
									whitePoint, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, MagickImage_LiquidRescale, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_LiquidRescale")]
		public static global::System.IntPtr MagickImage_LiquidRescale(
					global::System.IntPtr Instance, 
					global::System.IntPtr geometry, 
					double deltaX, 
					double rigidity, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_LiquidRescale(
									Instance, 
									geometry, 
									deltaX, 
									rigidity, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_LocalContrast, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_LocalContrast")]
		public static global::System.IntPtr MagickImage_LocalContrast(
					global::System.IntPtr Instance, 
					double radius, 
					double strength, 
					global::System.UIntPtr channels, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_LocalContrast(
									Instance, 
									radius, 
									strength, 
									channels, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_Magnify, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_Magnify")]
		public static global::System.IntPtr MagickImage_Magnify(
					global::System.IntPtr Instance, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_Magnify(
									Instance, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_Map, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_Map")]
		public static bool MagickImage_Map(
					global::System.IntPtr Instance, 
					global::System.IntPtr image, 
					global::System.IntPtr settings, 
					out global::System.IntPtr exception)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_Map(
									Instance, 
									image, 
									settings, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value != 0;
		}

		// Signature, MagickImage_MeanShift, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_MeanShift")]
		public static global::System.IntPtr MagickImage_MeanShift(
					global::System.IntPtr Instance, 
					global::System.UIntPtr width, 
					global::System.UIntPtr height, 
					double colorDistance, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_MeanShift(
									Instance, 
									width, 
									height, 
									colorDistance, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_Minify, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_Minify")]
		public static global::System.IntPtr MagickImage_Minify(
					global::System.IntPtr Instance, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_Minify(
									Instance, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_Moments, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_Moments")]
		public static global::System.IntPtr MagickImage_Moments(
					global::System.IntPtr Instance, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_Moments(
									Instance, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_Modulate, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_Modulate")]
		public static void MagickImage_Modulate(
					global::System.IntPtr Instance, 
					global::System.IntPtr modulate, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_Modulate(
									Instance, 
									modulate, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, MagickImage_MinimumBoundingBox, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_MinimumBoundingBox")]
		public static global::System.IntPtr MagickImage_MinimumBoundingBox(
					global::System.IntPtr Instance, 
					out global::System.UIntPtr length, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.UIntPtr* pinned_length = &(length))
				fixed (global::System.IntPtr* pinned_exception = &(exception))
				{
					// Call to native method
					unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_MinimumBoundingBox(
										Instance, 
										pinned_length, 
										pinned_exception
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_Morphology, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_Morphology")]
		public static global::System.IntPtr MagickImage_Morphology(
					global::System.IntPtr Instance, 
					global::System.UIntPtr method, 
					global::System.IntPtr kernel, 
					global::System.UIntPtr channels, 
					global::System.UIntPtr iterations, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_Morphology(
									Instance, 
									method, 
									kernel, 
									channels, 
									iterations, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_MotionBlur, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_MotionBlur")]
		public static global::System.IntPtr MagickImage_MotionBlur(
					global::System.IntPtr Instance, 
					double radius, 
					double sigma, 
					double angle, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_MotionBlur(
									Instance, 
									radius, 
									sigma, 
									angle, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_Negate, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_Negate")]
		public static void MagickImage_Negate(
					global::System.IntPtr Instance, 
					bool onlyGrayscale, 
					global::System.UIntPtr channels, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_Negate(
									Instance, 
									(onlyGrayscale ? 1 : 0), 
									channels, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, MagickImage_Normalize, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_Normalize")]
		public static void MagickImage_Normalize(
					global::System.IntPtr Instance, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_Normalize(
									Instance, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, MagickImage_OilPaint, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_OilPaint")]
		public static global::System.IntPtr MagickImage_OilPaint(
					global::System.IntPtr Instance, 
					double radius, 
					double sigma, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_OilPaint(
									Instance, 
									radius, 
									sigma, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_Opaque, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_Opaque")]
		public static void MagickImage_Opaque(
					global::System.IntPtr Instance, 
					global::System.IntPtr target, 
					global::System.IntPtr fill, 
					bool invert, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_Opaque(
									Instance, 
									target, 
									fill, 
									(invert ? 1 : 0), 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, MagickImage_OrderedDither, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_OrderedDither")]
		public static void MagickImage_OrderedDither(
					global::System.IntPtr Instance, 
					global::System.IntPtr thresholdMap, 
					global::System.UIntPtr channels, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_OrderedDither(
									Instance, 
									thresholdMap, 
									channels, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, MagickImage_Perceptible, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_Perceptible")]
		public static void MagickImage_Perceptible(
					global::System.IntPtr Instance, 
					double epsilon, 
					global::System.UIntPtr channels, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_Perceptible(
									Instance, 
									epsilon, 
									channels, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, MagickImage_PerceptualHash, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_PerceptualHash")]
		public static global::System.IntPtr MagickImage_PerceptualHash(
					global::System.IntPtr Instance, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_PerceptualHash(
									Instance, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_Polaroid, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_Polaroid")]
		public static global::System.IntPtr MagickImage_Polaroid(
					global::System.IntPtr Instance, 
					global::System.IntPtr settings, 
					global::System.IntPtr caption, 
					double angle, 
					global::System.UIntPtr method, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_Polaroid(
									Instance, 
									settings, 
									caption, 
									angle, 
									method, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_Posterize, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_Posterize")]
		public static void MagickImage_Posterize(
					global::System.IntPtr Instance, 
					global::System.UIntPtr levels, 
					global::System.UIntPtr method, 
					global::System.UIntPtr channels, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_Posterize(
									Instance, 
									levels, 
									method, 
									channels, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, MagickImage_Quantize, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_Quantize")]
		public static void MagickImage_Quantize(
					global::System.IntPtr Instance, 
					global::System.IntPtr settings, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_Quantize(
									Instance, 
									settings, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, MagickImage_RaiseOrLower, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_RaiseOrLower")]
		public static void MagickImage_RaiseOrLower(
					global::System.IntPtr Instance, 
					global::System.UIntPtr size, 
					bool raise, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_RaiseOrLower(
									Instance, 
									size, 
									(raise ? 1 : 0), 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, MagickImage_RandomThreshold, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_RandomThreshold")]
		public static void MagickImage_RandomThreshold(
					global::System.IntPtr Instance, 
					double low, 
					double high, 
					global::System.UIntPtr channels, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_RandomThreshold(
									Instance, 
									low, 
									high, 
									channels, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, MagickImage_RangeThreshold, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_RangeThreshold")]
		public static void MagickImage_RangeThreshold(
					global::System.IntPtr Instance, 
					double low_black, 
					double low_white, 
					double high_white, 
					double high_black, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_RangeThreshold(
									Instance, 
									low_black, 
									low_white, 
									high_white, 
									high_black, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, MagickImage_ReadBlob, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00042A40] rg_byte__unsigned char *, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_ReadBlob")]
		public static global::System.IntPtr MagickImage_ReadBlob(
					global::System.IntPtr settings, 
					byte[] data, 
					global::System.UIntPtr offset, 
					global::System.UIntPtr length, 
					out global::System.IntPtr exception)
		{
			// Setup
			byte* unsafe_data;
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (byte* pinned_data = ((data != null 
						&& data.Length == 0) ? new byte[1] : data))
			{
				unsafe_data = (byte*)pinned_data;
				fixed (global::System.IntPtr* pinned_exception = &(exception))
				{
					// Call to native method
					unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_ReadBlob(
										settings, 
										unsafe_data, 
										offset, 
										length, 
										pinned_exception
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				}
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_ReadFile, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_ReadFile")]
		public static global::System.IntPtr MagickImage_ReadFile(
					global::System.IntPtr settings, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_ReadFile(
									settings, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_ReadPixels, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x00042A40] rg_byte__unsigned char *, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_ReadPixels")]
		public static global::System.IntPtr MagickImage_ReadPixels(
					global::System.UIntPtr width, 
					global::System.UIntPtr height, 
					global::System.IntPtr map, 
					global::System.UIntPtr storageType, 
					byte[] data, 
					global::System.UIntPtr offset, 
					out global::System.IntPtr exception)
		{
			// Setup
			byte* unsafe_data;
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (byte* pinned_data = ((data != null 
						&& data.Length == 0) ? new byte[1] : data))
			{
				unsafe_data = (byte*)pinned_data;
				fixed (global::System.IntPtr* pinned_exception = &(exception))
				{
					// Call to native method
					unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_ReadPixels(
										width, 
										height, 
										map, 
										storageType, 
										unsafe_data, 
										offset, 
										pinned_exception
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				}
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_ReadStream, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00041EA8] ImageMagick_MagickImage_ReadWriteStreamDelegate__Magick_NET_Q16_AnyCPU__ImageMagick__MagickImage_ReadWriteStreamDelegate__Magick_NET_Q16_AnyCPU, [fwd] [in] [EETypeRva:0x00041EA8] ImageMagick_MagickImage_SeekStreamDelegate__Magick_NET_Q16_AnyCPU__ImageMagick__MagickImage_SeekStreamDelegate__Magick_NET_Q16_AnyCPU, [fwd] [in] [EETypeRva:0x00041EA8] ImageMagick_MagickImage_TellStreamDelegate__Magick_NET_Q16_AnyCPU__ImageMagick__MagickImage_TellStreamDelegate__Magick_NET_Q16_AnyCPU, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_ReadStream")]
		public static global::System.IntPtr MagickImage_ReadStream(
					global::System.IntPtr settings, 
					global::ImageMagick.MagickImage_ReadWriteStreamDelegate__Magick_NET_Q16_AnyCPU reader, 
					global::ImageMagick.MagickImage_SeekStreamDelegate__Magick_NET_Q16_AnyCPU seeker, 
					global::ImageMagick.MagickImage_TellStreamDelegate__Magick_NET_Q16_AnyCPU teller, 
					out global::System.IntPtr exception)
		{
			// Setup
			void* unsafe_reader = default(void*);
			void* unsafe_seeker = default(void*);
			void* unsafe_teller = default(void*);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				unsafe_reader = (void*)global::System.Runtime.InteropServices.McgMarshal.GetStubForPInvokeDelegate(
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("ImageMagick.MagickImage+ReadWriteStreamDelegate,Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, Public" +
											"KeyToken=2004825badfa91ec"), 
									reader
								);
				unsafe_seeker = (void*)global::System.Runtime.InteropServices.McgMarshal.GetStubForPInvokeDelegate(
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("ImageMagick.MagickImage+SeekStreamDelegate,Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyTo" +
											"ken=2004825badfa91ec"), 
									seeker
								);
				unsafe_teller = (void*)global::System.Runtime.InteropServices.McgMarshal.GetStubForPInvokeDelegate(
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("ImageMagick.MagickImage+TellStreamDelegate,Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyTo" +
											"ken=2004825badfa91ec"), 
									teller
								);
				fixed (global::System.IntPtr* pinned_exception = &(exception))
				{
					// Call to native method
					unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_ReadStream(
										settings, 
										unsafe_reader, 
										unsafe_seeker, 
										unsafe_teller, 
										pinned_exception
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				}
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(reader);
				global::System.GC.KeepAlive(seeker);
				global::System.GC.KeepAlive(teller);
			}
		}

		// Signature, MagickImage_RegionMask, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_RegionMask")]
		public static void MagickImage_RegionMask(
					global::System.IntPtr Instance, 
					global::System.IntPtr region, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_RegionMask(
									Instance, 
									region, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, MagickImage_RemoveArtifact, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_RemoveArtifact")]
		public static void MagickImage_RemoveArtifact(
					global::System.IntPtr Instance, 
					global::System.IntPtr name)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_RemoveArtifact(
								Instance, 
								name
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, MagickImage_RemoveAttribute, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_RemoveAttribute")]
		public static void MagickImage_RemoveAttribute(
					global::System.IntPtr Instance, 
					global::System.IntPtr name)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_RemoveAttribute(
								Instance, 
								name
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, MagickImage_RemoveProfile, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_RemoveProfile")]
		public static void MagickImage_RemoveProfile(
					global::System.IntPtr Instance, 
					global::System.IntPtr name)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_RemoveProfile(
								Instance, 
								name
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, MagickImage_ResetArtifactIterator, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_ResetArtifactIterator")]
		public static void MagickImage_ResetArtifactIterator(global::System.IntPtr Instance)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_ResetArtifactIterator(Instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, MagickImage_ResetAttributeIterator, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_ResetAttributeIterator")]
		public static void MagickImage_ResetAttributeIterator(global::System.IntPtr Instance)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_ResetAttributeIterator(Instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, MagickImage_ResetProfileIterator, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_ResetProfileIterator")]
		public static void MagickImage_ResetProfileIterator(global::System.IntPtr Instance)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_ResetProfileIterator(Instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, MagickImage_Resample, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_Resample")]
		public static global::System.IntPtr MagickImage_Resample(
					global::System.IntPtr Instance, 
					double resolutionX, 
					double resolutionY, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_Resample(
									Instance, 
									resolutionX, 
									resolutionY, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_Resize, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_Resize")]
		public static global::System.IntPtr MagickImage_Resize(
					global::System.IntPtr Instance, 
					global::System.IntPtr geometry, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_Resize(
									Instance, 
									geometry, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_Roll, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_Roll")]
		public static global::System.IntPtr MagickImage_Roll(
					global::System.IntPtr Instance, 
					global::System.IntPtr x, 
					global::System.IntPtr y, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_Roll(
									Instance, 
									x, 
									y, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_Rotate, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_Rotate")]
		public static global::System.IntPtr MagickImage_Rotate(
					global::System.IntPtr Instance, 
					double degrees, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_Rotate(
									Instance, 
									degrees, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_RotationalBlur, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_RotationalBlur")]
		public static global::System.IntPtr MagickImage_RotationalBlur(
					global::System.IntPtr Instance, 
					double angle, 
					global::System.UIntPtr channels, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_RotationalBlur(
									Instance, 
									angle, 
									channels, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_Sample, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_Sample")]
		public static global::System.IntPtr MagickImage_Sample(
					global::System.IntPtr Instance, 
					global::System.IntPtr geometry, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_Sample(
									Instance, 
									geometry, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_Scale, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_Scale")]
		public static global::System.IntPtr MagickImage_Scale(
					global::System.IntPtr Instance, 
					global::System.IntPtr geometry, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_Scale(
									Instance, 
									geometry, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_Segment, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_Segment")]
		public static void MagickImage_Segment(
					global::System.IntPtr Instance, 
					global::System.UIntPtr colorSpace, 
					double clusterThreshold, 
					double smoothingThreshold, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_Segment(
									Instance, 
									colorSpace, 
									clusterThreshold, 
									smoothingThreshold, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, MagickImage_SelectiveBlur, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_SelectiveBlur")]
		public static global::System.IntPtr MagickImage_SelectiveBlur(
					global::System.IntPtr Instance, 
					double radius, 
					double sigma, 
					double threshold, 
					global::System.UIntPtr channels, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_SelectiveBlur(
									Instance, 
									radius, 
									sigma, 
									threshold, 
									channels, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_Separate, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_Separate")]
		public static global::System.IntPtr MagickImage_Separate(
					global::System.IntPtr Instance, 
					global::System.UIntPtr channels, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_Separate(
									Instance, 
									channels, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_SepiaTone, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_SepiaTone")]
		public static global::System.IntPtr MagickImage_SepiaTone(
					global::System.IntPtr Instance, 
					double threshold, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_SepiaTone(
									Instance, 
									threshold, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_SetAlpha, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_SetAlpha")]
		public static void MagickImage_SetAlpha(
					global::System.IntPtr Instance, 
					global::System.UIntPtr value, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_SetAlpha(
									Instance, 
									value, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, MagickImage_SetArtifact, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_SetArtifact")]
		public static void MagickImage_SetArtifact(
					global::System.IntPtr Instance, 
					global::System.IntPtr name, 
					global::System.IntPtr value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_SetArtifact(
								Instance, 
								name, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, MagickImage_SetAttribute, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_SetAttribute")]
		public static void MagickImage_SetAttribute(
					global::System.IntPtr Instance, 
					global::System.IntPtr name, 
					global::System.IntPtr value, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_SetAttribute(
									Instance, 
									name, 
									value, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, MagickImage_SetBitDepth, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_SetBitDepth")]
		public static void MagickImage_SetBitDepth(
					global::System.IntPtr Instance, 
					global::System.UIntPtr channels, 
					global::System.UIntPtr value, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_SetBitDepth(
									Instance, 
									channels, 
									value, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, MagickImage_SetColormap, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_SetColormap")]
		public static void MagickImage_SetColormap(
					global::System.IntPtr Instance, 
					global::System.UIntPtr index, 
					global::System.IntPtr color, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_SetColormap(
									Instance, 
									index, 
									color, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, MagickImage_SetColorMetric, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_SetColorMetric")]
		public static bool MagickImage_SetColorMetric(
					global::System.IntPtr Instance, 
					global::System.IntPtr image, 
					out global::System.IntPtr exception)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_SetColorMetric(
									Instance, 
									image, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value != 0;
		}

		// Signature, MagickImage_SetNext, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_SetNext")]
		public static void MagickImage_SetNext(
					global::System.IntPtr Instance, 
					global::System.IntPtr image)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_SetNext(
								Instance, 
								image
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, MagickImage_SetProgressDelegate, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00041EA8] ImageMagick_MagickImage_ProgressDelegate__Magick_NET_Q16_AnyCPU__ImageMagick__MagickImage_ProgressDelegate__Magick_NET_Q16_AnyCPU, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_SetProgressDelegate")]
		public static void MagickImage_SetProgressDelegate(
					global::System.IntPtr Instance, 
					global::ImageMagick.MagickImage_ProgressDelegate__Magick_NET_Q16_AnyCPU method)
		{
			// Setup
			void* unsafe_method = default(void*);
			try
			{
				// Marshalling
				unsafe_method = (void*)global::System.Runtime.InteropServices.McgMarshal.GetStubForPInvokeDelegate(
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("ImageMagick.MagickImage+ProgressDelegate,Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToke" +
											"n=2004825badfa91ec"), 
									method
								);
				// Call to native method
				global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_SetProgressDelegate(
									Instance, 
									unsafe_method
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(method);
			}
		}

		// Signature, MagickImage_SetReadMask, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_SetReadMask")]
		public static void MagickImage_SetReadMask(
					global::System.IntPtr Instance, 
					global::System.IntPtr image, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_SetReadMask(
									Instance, 
									image, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, MagickImage_SetWriteMask, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_SetWriteMask")]
		public static void MagickImage_SetWriteMask(
					global::System.IntPtr Instance, 
					global::System.IntPtr image, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_SetWriteMask(
									Instance, 
									image, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, MagickImage_Shade, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_Shade")]
		public static global::System.IntPtr MagickImage_Shade(
					global::System.IntPtr Instance, 
					double azimuth, 
					double elevation, 
					bool colorShading, 
					global::System.UIntPtr channels, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_Shade(
									Instance, 
									azimuth, 
									elevation, 
									(colorShading ? 1 : 0), 
									channels, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_Shadow, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_Shadow")]
		public static global::System.IntPtr MagickImage_Shadow(
					global::System.IntPtr Instance, 
					global::System.IntPtr x, 
					global::System.IntPtr y, 
					double sigma, 
					double alphaPercentage, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_Shadow(
									Instance, 
									x, 
									y, 
									sigma, 
									alphaPercentage, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_Sharpen, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_Sharpen")]
		public static global::System.IntPtr MagickImage_Sharpen(
					global::System.IntPtr Instance, 
					double radius, 
					double sigma, 
					global::System.UIntPtr channel, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_Sharpen(
									Instance, 
									radius, 
									sigma, 
									channel, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_Shave, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_Shave")]
		public static global::System.IntPtr MagickImage_Shave(
					global::System.IntPtr Instance, 
					global::System.UIntPtr leftRight, 
					global::System.UIntPtr topBottom, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_Shave(
									Instance, 
									leftRight, 
									topBottom, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_Shear, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_Shear")]
		public static global::System.IntPtr MagickImage_Shear(
					global::System.IntPtr Instance, 
					double xAngle, 
					double yAngle, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_Shear(
									Instance, 
									xAngle, 
									yAngle, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_SigmoidalContrast, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_SigmoidalContrast")]
		public static void MagickImage_SigmoidalContrast(
					global::System.IntPtr Instance, 
					bool sharpen, 
					double contrast, 
					double midpoint, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_SigmoidalContrast(
									Instance, 
									(sharpen ? 1 : 0), 
									contrast, 
									midpoint, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, MagickImage_SparseColor, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x00042A40] rg_double__double *, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_SparseColor")]
		public static global::System.IntPtr MagickImage_SparseColor(
					global::System.IntPtr Instance, 
					global::System.UIntPtr channel, 
					global::System.UIntPtr method, 
					double[] values, 
					global::System.UIntPtr length, 
					out global::System.IntPtr exception)
		{
			// Setup
			double* unsafe_values;
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (double* pinned_values = ((values != null 
						&& values.Length == 0) ? new double[1] : values))
			{
				unsafe_values = (double*)pinned_values;
				fixed (global::System.IntPtr* pinned_exception = &(exception))
				{
					// Call to native method
					unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_SparseColor(
										Instance, 
										channel, 
										method, 
										unsafe_values, 
										length, 
										pinned_exception
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				}
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_Sketch, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_Sketch")]
		public static global::System.IntPtr MagickImage_Sketch(
					global::System.IntPtr Instance, 
					double radius, 
					double sigma, 
					double angle, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_Sketch(
									Instance, 
									radius, 
									sigma, 
									angle, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_Solarize, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_Solarize")]
		public static void MagickImage_Solarize(
					global::System.IntPtr Instance, 
					double factor, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_Solarize(
									Instance, 
									factor, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, MagickImage_Splice, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_Splice")]
		public static global::System.IntPtr MagickImage_Splice(
					global::System.IntPtr Instance, 
					global::System.IntPtr geometry, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_Splice(
									Instance, 
									geometry, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_Spread, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_Spread")]
		public static global::System.IntPtr MagickImage_Spread(
					global::System.IntPtr Instance, 
					global::System.UIntPtr method, 
					double radius, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_Spread(
									Instance, 
									method, 
									radius, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_Statistic, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_Statistic")]
		public static global::System.IntPtr MagickImage_Statistic(
					global::System.IntPtr Instance, 
					global::System.UIntPtr type, 
					global::System.UIntPtr width, 
					global::System.UIntPtr height, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_Statistic(
									Instance, 
									type, 
									width, 
									height, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_Statistics, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_Statistics")]
		public static global::System.IntPtr MagickImage_Statistics(
					global::System.IntPtr Instance, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_Statistics(
									Instance, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_Stegano, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_Stegano")]
		public static global::System.IntPtr MagickImage_Stegano(
					global::System.IntPtr Instance, 
					global::System.IntPtr watermark, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_Stegano(
									Instance, 
									watermark, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_Stereo, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_Stereo")]
		public static global::System.IntPtr MagickImage_Stereo(
					global::System.IntPtr Instance, 
					global::System.IntPtr rightImage, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_Stereo(
									Instance, 
									rightImage, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_Strip, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_Strip")]
		public static void MagickImage_Strip(
					global::System.IntPtr Instance, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_Strip(
									Instance, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, MagickImage_SubImageSearch, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] double__double, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_SubImageSearch")]
		public static global::System.IntPtr MagickImage_SubImageSearch(
					global::System.IntPtr Instance, 
					global::System.IntPtr reference, 
					global::System.UIntPtr metric, 
					double similarityThreshold, 
					global::System.IntPtr offset, 
					out double similarityMetric, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (double* pinned_similarityMetric = &(similarityMetric))
				fixed (global::System.IntPtr* pinned_exception = &(exception))
				{
					// Call to native method
					unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_SubImageSearch(
										Instance, 
										reference, 
										metric, 
										similarityThreshold, 
										offset, 
										pinned_similarityMetric, 
										pinned_exception
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_Swirl, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_Swirl")]
		public static global::System.IntPtr MagickImage_Swirl(
					global::System.IntPtr Instance, 
					global::System.UIntPtr method, 
					double degrees, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_Swirl(
									Instance, 
									method, 
									degrees, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_Texture, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_Texture")]
		public static void MagickImage_Texture(
					global::System.IntPtr Instance, 
					global::System.IntPtr image, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_Texture(
									Instance, 
									image, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, MagickImage_Threshold, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_Threshold")]
		public static void MagickImage_Threshold(
					global::System.IntPtr Instance, 
					double threshold, 
					global::System.UIntPtr channels, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_Threshold(
									Instance, 
									threshold, 
									channels, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, MagickImage_Thumbnail, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_Thumbnail")]
		public static global::System.IntPtr MagickImage_Thumbnail(
					global::System.IntPtr Instance, 
					global::System.IntPtr geometry, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_Thumbnail(
									Instance, 
									geometry, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_Tint, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_Tint")]
		public static global::System.IntPtr MagickImage_Tint(
					global::System.IntPtr Instance, 
					global::System.IntPtr opacity, 
					global::System.IntPtr tint, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_Tint(
									Instance, 
									opacity, 
									tint, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_Transparent, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_Transparent")]
		public static void MagickImage_Transparent(
					global::System.IntPtr Instance, 
					global::System.IntPtr color, 
					bool invert, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_Transparent(
									Instance, 
									color, 
									(invert ? 1 : 0), 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, MagickImage_TransparentChroma, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_TransparentChroma")]
		public static void MagickImage_TransparentChroma(
					global::System.IntPtr Instance, 
					global::System.IntPtr colorLow, 
					global::System.IntPtr colorHigh, 
					bool invert, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_TransparentChroma(
									Instance, 
									colorLow, 
									colorHigh, 
									(invert ? 1 : 0), 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, MagickImage_Transpose, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_Transpose")]
		public static global::System.IntPtr MagickImage_Transpose(
					global::System.IntPtr Instance, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_Transpose(
									Instance, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_Transverse, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_Transverse")]
		public static global::System.IntPtr MagickImage_Transverse(
					global::System.IntPtr Instance, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_Transverse(
									Instance, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_Trim, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_Trim")]
		public static global::System.IntPtr MagickImage_Trim(
					global::System.IntPtr Instance, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_Trim(
									Instance, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_UniqueColors, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_UniqueColors")]
		public static global::System.IntPtr MagickImage_UniqueColors(
					global::System.IntPtr Instance, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_UniqueColors(
									Instance, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_UnsharpMask, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_UnsharpMask")]
		public static global::System.IntPtr MagickImage_UnsharpMask(
					global::System.IntPtr Instance, 
					double radius, 
					double sigma, 
					double amount, 
					double threshold, 
					global::System.UIntPtr channels, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_UnsharpMask(
									Instance, 
									radius, 
									sigma, 
									amount, 
									threshold, 
									channels, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_Vignette, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_Vignette")]
		public static global::System.IntPtr MagickImage_Vignette(
					global::System.IntPtr Instance, 
					double radius, 
					double sigma, 
					global::System.IntPtr x, 
					global::System.IntPtr y, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_Vignette(
									Instance, 
									radius, 
									sigma, 
									x, 
									y, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_Wave, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_Wave")]
		public static global::System.IntPtr MagickImage_Wave(
					global::System.IntPtr Instance, 
					global::System.UIntPtr method, 
					double amplitude, 
					double length, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_Wave(
									Instance, 
									method, 
									amplitude, 
									length, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_WaveletDenoise, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_WaveletDenoise")]
		public static global::System.IntPtr MagickImage_WaveletDenoise(
					global::System.IntPtr Instance, 
					double threshold, 
					double softness, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_WaveletDenoise(
									Instance, 
									threshold, 
									softness, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_WhiteThreshold, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_WhiteThreshold")]
		public static void MagickImage_WhiteThreshold(
					global::System.IntPtr Instance, 
					global::System.IntPtr threshold, 
					global::System.UIntPtr channels, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_WhiteThreshold(
									Instance, 
									threshold, 
									channels, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, MagickImage_WriteFile, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_WriteFile")]
		public static void MagickImage_WriteFile(
					global::System.IntPtr Instance, 
					global::System.IntPtr settings, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_WriteFile(
									Instance, 
									settings, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, MagickImage_WriteStream, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00041EA8] ImageMagick_MagickImage_ReadWriteStreamDelegate__Magick_NET_Q16_AnyCPU__ImageMagick__MagickImage_ReadWriteStreamDelegate__Magick_NET_Q16_AnyCPU, [fwd] [in] [EETypeRva:0x00041EA8] ImageMagick_MagickImage_SeekStreamDelegate__Magick_NET_Q16_AnyCPU__ImageMagick__MagickImage_SeekStreamDelegate__Magick_NET_Q16_AnyCPU, [fwd] [in] [EETypeRva:0x00041EA8] ImageMagick_MagickImage_TellStreamDelegate__Magick_NET_Q16_AnyCPU__ImageMagick__MagickImage_TellStreamDelegate__Magick_NET_Q16_AnyCPU, [fwd] [in] [EETypeRva:0x00041EA8] ImageMagick_MagickImage_ReadWriteStreamDelegate__Magick_NET_Q16_AnyCPU__ImageMagick__MagickImage_ReadWriteStreamDelegate__Magick_NET_Q16_AnyCPU, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X64", "MagickImage_WriteStream")]
		public static void MagickImage_WriteStream(
					global::System.IntPtr Instance, 
					global::System.IntPtr settings, 
					global::ImageMagick.MagickImage_ReadWriteStreamDelegate__Magick_NET_Q16_AnyCPU writer, 
					global::ImageMagick.MagickImage_SeekStreamDelegate__Magick_NET_Q16_AnyCPU seeker, 
					global::ImageMagick.MagickImage_TellStreamDelegate__Magick_NET_Q16_AnyCPU teller, 
					global::ImageMagick.MagickImage_ReadWriteStreamDelegate__Magick_NET_Q16_AnyCPU reader, 
					out global::System.IntPtr exception)
		{
			// Setup
			void* unsafe_writer = default(void*);
			void* unsafe_seeker = default(void*);
			void* unsafe_teller = default(void*);
			void* unsafe_reader = default(void*);
			try
			{
				// Marshalling
				unsafe_writer = (void*)global::System.Runtime.InteropServices.McgMarshal.GetStubForPInvokeDelegate(
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("ImageMagick.MagickImage+ReadWriteStreamDelegate,Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, Public" +
											"KeyToken=2004825badfa91ec"), 
									writer
								);
				unsafe_seeker = (void*)global::System.Runtime.InteropServices.McgMarshal.GetStubForPInvokeDelegate(
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("ImageMagick.MagickImage+SeekStreamDelegate,Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyTo" +
											"ken=2004825badfa91ec"), 
									seeker
								);
				unsafe_teller = (void*)global::System.Runtime.InteropServices.McgMarshal.GetStubForPInvokeDelegate(
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("ImageMagick.MagickImage+TellStreamDelegate,Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyTo" +
											"ken=2004825badfa91ec"), 
									teller
								);
				unsafe_reader = (void*)global::System.Runtime.InteropServices.McgMarshal.GetStubForPInvokeDelegate(
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("ImageMagick.MagickImage+ReadWriteStreamDelegate,Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, Public" +
											"KeyToken=2004825badfa91ec"), 
									reader
								);
				fixed (global::System.IntPtr* pinned_exception = &(exception))
				{
					// Call to native method
					global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImage_WriteStream(
										Instance, 
										settings, 
										unsafe_writer, 
										unsafe_seeker, 
										unsafe_teller, 
										unsafe_reader, 
										pinned_exception
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				}
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(writer);
				global::System.GC.KeepAlive(seeker);
				global::System.GC.KeepAlive(teller);
				global::System.GC.KeepAlive(reader);
			}
		}

		// Signature, MagickImageCollection_Append, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImageCollection+NativeMethods+X64", "MagickImageCollection_Append")]
		public static global::System.IntPtr MagickImageCollection_Append(
					global::System.IntPtr image, 
					bool stack, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImageCollection_Append(
									image, 
									(stack ? 1 : 0), 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImageCollection_Coalesce, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImageCollection+NativeMethods+X64", "MagickImageCollection_Coalesce")]
		public static global::System.IntPtr MagickImageCollection_Coalesce(
					global::System.IntPtr image, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImageCollection_Coalesce(
									image, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImageCollection_Combine, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImageCollection+NativeMethods+X64", "MagickImageCollection_Combine")]
		public static global::System.IntPtr MagickImageCollection_Combine(
					global::System.IntPtr image, 
					global::System.UIntPtr colorSpace, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImageCollection_Combine(
									image, 
									colorSpace, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImageCollection_Complex, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImageCollection+NativeMethods+X64", "MagickImageCollection_Complex")]
		public static global::System.IntPtr MagickImageCollection_Complex(
					global::System.IntPtr image, 
					global::System.UIntPtr complexOperator, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImageCollection_Complex(
									image, 
									complexOperator, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImageCollection_Deconstruct, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImageCollection+NativeMethods+X64", "MagickImageCollection_Deconstruct")]
		public static global::System.IntPtr MagickImageCollection_Deconstruct(
					global::System.IntPtr image, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImageCollection_Deconstruct(
									image, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImageCollection_Dispose, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImageCollection+NativeMethods+X64", "MagickImageCollection_Dispose")]
		public static void MagickImageCollection_Dispose(global::System.IntPtr value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImageCollection_Dispose(value);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, MagickImageCollection_Evaluate, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImageCollection+NativeMethods+X64", "MagickImageCollection_Evaluate")]
		public static global::System.IntPtr MagickImageCollection_Evaluate(
					global::System.IntPtr image, 
					global::System.UIntPtr evaluateOperator, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImageCollection_Evaluate(
									image, 
									evaluateOperator, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImageCollection_Map, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImageCollection+NativeMethods+X64", "MagickImageCollection_Map")]
		public static void MagickImageCollection_Map(
					global::System.IntPtr image, 
					global::System.IntPtr settings, 
					global::System.IntPtr remapImage, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImageCollection_Map(
									image, 
									settings, 
									remapImage, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, MagickImageCollection_Merge, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImageCollection+NativeMethods+X64", "MagickImageCollection_Merge")]
		public static global::System.IntPtr MagickImageCollection_Merge(
					global::System.IntPtr image, 
					global::System.UIntPtr method, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImageCollection_Merge(
									image, 
									method, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImageCollection_Montage, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImageCollection+NativeMethods+X64", "MagickImageCollection_Montage")]
		public static global::System.IntPtr MagickImageCollection_Montage(
					global::System.IntPtr image, 
					global::System.IntPtr settings, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImageCollection_Montage(
									image, 
									settings, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImageCollection_Morph, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImageCollection+NativeMethods+X64", "MagickImageCollection_Morph")]
		public static global::System.IntPtr MagickImageCollection_Morph(
					global::System.IntPtr image, 
					global::System.UIntPtr frames, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImageCollection_Morph(
									image, 
									frames, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImageCollection_Optimize, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImageCollection+NativeMethods+X64", "MagickImageCollection_Optimize")]
		public static global::System.IntPtr MagickImageCollection_Optimize(
					global::System.IntPtr image, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImageCollection_Optimize(
									image, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImageCollection_OptimizePlus, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImageCollection+NativeMethods+X64", "MagickImageCollection_OptimizePlus")]
		public static global::System.IntPtr MagickImageCollection_OptimizePlus(
					global::System.IntPtr image, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImageCollection_OptimizePlus(
									image, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImageCollection_OptimizeTransparency, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImageCollection+NativeMethods+X64", "MagickImageCollection_OptimizeTransparency")]
		public static void MagickImageCollection_OptimizeTransparency(
					global::System.IntPtr image, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImageCollection_OptimizeTransparency(
									image, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, MagickImageCollection_Polynomial, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00042A40] rg_double__double *, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImageCollection+NativeMethods+X64", "MagickImageCollection_Polynomial")]
		public static global::System.IntPtr MagickImageCollection_Polynomial(
					global::System.IntPtr image, 
					double[] terms, 
					global::System.UIntPtr length, 
					out global::System.IntPtr exception)
		{
			// Setup
			double* unsafe_terms;
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (double* pinned_terms = ((terms != null 
						&& terms.Length == 0) ? new double[1] : terms))
			{
				unsafe_terms = (double*)pinned_terms;
				fixed (global::System.IntPtr* pinned_exception = &(exception))
				{
					// Call to native method
					unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImageCollection_Polynomial(
										image, 
										unsafe_terms, 
										length, 
										pinned_exception
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				}
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImageCollection_Quantize, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImageCollection+NativeMethods+X64", "MagickImageCollection_Quantize")]
		public static void MagickImageCollection_Quantize(
					global::System.IntPtr image, 
					global::System.IntPtr settings, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImageCollection_Quantize(
									image, 
									settings, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, MagickImageCollection_ReadBlob, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00042A40] rg_byte__unsigned char *, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImageCollection+NativeMethods+X64", "MagickImageCollection_ReadBlob")]
		public static global::System.IntPtr MagickImageCollection_ReadBlob(
					global::System.IntPtr settings, 
					byte[] data, 
					global::System.UIntPtr offset, 
					global::System.UIntPtr length, 
					out global::System.IntPtr exception)
		{
			// Setup
			byte* unsafe_data;
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (byte* pinned_data = ((data != null 
						&& data.Length == 0) ? new byte[1] : data))
			{
				unsafe_data = (byte*)pinned_data;
				fixed (global::System.IntPtr* pinned_exception = &(exception))
				{
					// Call to native method
					unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImageCollection_ReadBlob(
										settings, 
										unsafe_data, 
										offset, 
										length, 
										pinned_exception
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				}
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImageCollection_ReadFile, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImageCollection+NativeMethods+X64", "MagickImageCollection_ReadFile")]
		public static global::System.IntPtr MagickImageCollection_ReadFile(
					global::System.IntPtr settings, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImageCollection_ReadFile(
									settings, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImageCollection_ReadStream, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00041EA8] ImageMagick_MagickImageCollection_ReadWriteStreamDelegate__Magick_NET_Q16_AnyCPU__ImageMagick__MagickImageCollection_ReadWriteStreamDelegate__Magick_NET_Q16_AnyCPU, [fwd] [in] [EETypeRva:0x00041EA8] ImageMagick_MagickImageCollection_SeekStreamDelegate__Magick_NET_Q16_AnyCPU__ImageMagick__MagickImageCollection_SeekStreamDelegate__Magick_NET_Q16_AnyCPU, [fwd] [in] [EETypeRva:0x00041EA8] ImageMagick_MagickImageCollection_TellStreamDelegate__Magick_NET_Q16_AnyCPU__ImageMagick__MagickImageCollection_TellStreamDelegate__Magick_NET_Q16_AnyCPU, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImageCollection+NativeMethods+X64", "MagickImageCollection_ReadStream")]
		public static global::System.IntPtr MagickImageCollection_ReadStream(
					global::System.IntPtr settings, 
					global::ImageMagick.MagickImageCollection_ReadWriteStreamDelegate__Magick_NET_Q16_AnyCPU reader, 
					global::ImageMagick.MagickImageCollection_SeekStreamDelegate__Magick_NET_Q16_AnyCPU seeker, 
					global::ImageMagick.MagickImageCollection_TellStreamDelegate__Magick_NET_Q16_AnyCPU teller, 
					out global::System.IntPtr exception)
		{
			// Setup
			void* unsafe_reader = default(void*);
			void* unsafe_seeker = default(void*);
			void* unsafe_teller = default(void*);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				unsafe_reader = (void*)global::System.Runtime.InteropServices.McgMarshal.GetStubForPInvokeDelegate(
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("ImageMagick.MagickImageCollection+ReadWriteStreamDelegate,Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutr" +
											"al, PublicKeyToken=2004825badfa91ec"), 
									reader
								);
				unsafe_seeker = (void*)global::System.Runtime.InteropServices.McgMarshal.GetStubForPInvokeDelegate(
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("ImageMagick.MagickImageCollection+SeekStreamDelegate,Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, P" +
											"ublicKeyToken=2004825badfa91ec"), 
									seeker
								);
				unsafe_teller = (void*)global::System.Runtime.InteropServices.McgMarshal.GetStubForPInvokeDelegate(
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("ImageMagick.MagickImageCollection+TellStreamDelegate,Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, P" +
											"ublicKeyToken=2004825badfa91ec"), 
									teller
								);
				fixed (global::System.IntPtr* pinned_exception = &(exception))
				{
					// Call to native method
					unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImageCollection_ReadStream(
										settings, 
										unsafe_reader, 
										unsafe_seeker, 
										unsafe_teller, 
										pinned_exception
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				}
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(reader);
				global::System.GC.KeepAlive(seeker);
				global::System.GC.KeepAlive(teller);
			}
		}

		// Signature, MagickImageCollection_Smush, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImageCollection+NativeMethods+X64", "MagickImageCollection_Smush")]
		public static global::System.IntPtr MagickImageCollection_Smush(
					global::System.IntPtr image, 
					global::System.IntPtr offset, 
					bool stack, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImageCollection_Smush(
									image, 
									offset, 
									(stack ? 1 : 0), 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImageCollection_WriteFile, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImageCollection+NativeMethods+X64", "MagickImageCollection_WriteFile")]
		public static void MagickImageCollection_WriteFile(
					global::System.IntPtr image, 
					global::System.IntPtr settings, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImageCollection_WriteFile(
									image, 
									settings, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, MagickImageCollection_WriteStream, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00041EA8] ImageMagick_MagickImageCollection_ReadWriteStreamDelegate__Magick_NET_Q16_AnyCPU__ImageMagick__MagickImageCollection_ReadWriteStreamDelegate__Magick_NET_Q16_AnyCPU, [fwd] [in] [EETypeRva:0x00041EA8] ImageMagick_MagickImageCollection_SeekStreamDelegate__Magick_NET_Q16_AnyCPU__ImageMagick__MagickImageCollection_SeekStreamDelegate__Magick_NET_Q16_AnyCPU, [fwd] [in] [EETypeRva:0x00041EA8] ImageMagick_MagickImageCollection_TellStreamDelegate__Magick_NET_Q16_AnyCPU__ImageMagick__MagickImageCollection_TellStreamDelegate__Magick_NET_Q16_AnyCPU, [fwd] [in] [EETypeRva:0x00041EA8] ImageMagick_MagickImageCollection_ReadWriteStreamDelegate__Magick_NET_Q16_AnyCPU__ImageMagick__MagickImageCollection_ReadWriteStreamDelegate__Magick_NET_Q16_AnyCPU, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImageCollection+NativeMethods+X64", "MagickImageCollection_WriteStream")]
		public static void MagickImageCollection_WriteStream(
					global::System.IntPtr image, 
					global::System.IntPtr settings, 
					global::ImageMagick.MagickImageCollection_ReadWriteStreamDelegate__Magick_NET_Q16_AnyCPU writer, 
					global::ImageMagick.MagickImageCollection_SeekStreamDelegate__Magick_NET_Q16_AnyCPU seeker, 
					global::ImageMagick.MagickImageCollection_TellStreamDelegate__Magick_NET_Q16_AnyCPU teller, 
					global::ImageMagick.MagickImageCollection_ReadWriteStreamDelegate__Magick_NET_Q16_AnyCPU reader, 
					out global::System.IntPtr exception)
		{
			// Setup
			void* unsafe_writer = default(void*);
			void* unsafe_seeker = default(void*);
			void* unsafe_teller = default(void*);
			void* unsafe_reader = default(void*);
			try
			{
				// Marshalling
				unsafe_writer = (void*)global::System.Runtime.InteropServices.McgMarshal.GetStubForPInvokeDelegate(
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("ImageMagick.MagickImageCollection+ReadWriteStreamDelegate,Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutr" +
											"al, PublicKeyToken=2004825badfa91ec"), 
									writer
								);
				unsafe_seeker = (void*)global::System.Runtime.InteropServices.McgMarshal.GetStubForPInvokeDelegate(
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("ImageMagick.MagickImageCollection+SeekStreamDelegate,Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, P" +
											"ublicKeyToken=2004825badfa91ec"), 
									seeker
								);
				unsafe_teller = (void*)global::System.Runtime.InteropServices.McgMarshal.GetStubForPInvokeDelegate(
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("ImageMagick.MagickImageCollection+TellStreamDelegate,Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, P" +
											"ublicKeyToken=2004825badfa91ec"), 
									teller
								);
				unsafe_reader = (void*)global::System.Runtime.InteropServices.McgMarshal.GetStubForPInvokeDelegate(
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("ImageMagick.MagickImageCollection+ReadWriteStreamDelegate,Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutr" +
											"al, PublicKeyToken=2004825badfa91ec"), 
									reader
								);
				fixed (global::System.IntPtr* pinned_exception = &(exception))
				{
					// Call to native method
					global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickImageCollection_WriteStream(
										image, 
										settings, 
										unsafe_writer, 
										unsafe_seeker, 
										unsafe_teller, 
										unsafe_reader, 
										pinned_exception
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				}
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(writer);
				global::System.GC.KeepAlive(seeker);
				global::System.GC.KeepAlive(teller);
				global::System.GC.KeepAlive(reader);
			}
		}

		// Signature, DoubleMatrix_Create, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00042A40] rg_double__double *, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DoubleMatrix+NativeMethods+X64", "DoubleMatrix_Create")]
		public static global::System.IntPtr DoubleMatrix_Create(
					double[] values, 
					global::System.UIntPtr order)
		{
			// Setup
			double* unsafe_values;
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (double* pinned_values = ((values != null 
						&& values.Length == 0) ? new double[1] : values))
			{
				unsafe_values = (double*)pinned_values;
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.DoubleMatrix_Create(
									unsafe_values, 
									order
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, DoubleMatrix_Dispose, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DoubleMatrix+NativeMethods+X64", "DoubleMatrix_Dispose")]
		public static void DoubleMatrix_Dispose(global::System.IntPtr instance)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.DoubleMatrix_Dispose(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, OpenCL_GetDevices, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.OpenCL+NativeMethods+X64", "OpenCL_GetDevices")]
		public static global::System.IntPtr OpenCL_GetDevices(out global::System.UIntPtr length)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.UIntPtr* pinned_length = &(length))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.OpenCL_GetDevices(pinned_length);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, OpenCL_GetDevice, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.OpenCL+NativeMethods+X64", "OpenCL_GetDevice")]
		public static global::System.IntPtr OpenCL_GetDevice(
					global::System.IntPtr list, 
					global::System.UIntPtr index)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.OpenCL_GetDevice(
								list, 
								index
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, OpenCL_SetEnabled, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x00040848] bool__System.Boolean, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.OpenCL+NativeMethods+X64", "OpenCL_SetEnabled")]
		public static bool OpenCL_SetEnabled(bool value)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.OpenCL_SetEnabled((value ? 1 : 0));
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value != 0;
		}

		// Signature, OpenCLDevice_BenchmarkScore_Get, [fwd] [return] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.OpenCLDevice+NativeMethods+X64", "OpenCLDevice_BenchmarkScore_Get")]
		public static double OpenCLDevice_BenchmarkScore_Get(global::System.IntPtr instance)
		{
			// Setup
			double unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.OpenCLDevice_BenchmarkScore_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, OpenCLDevice_DeviceType_Get, [fwd] [return] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.OpenCLDevice+NativeMethods+X64", "OpenCLDevice_DeviceType_Get")]
		public static global::System.UIntPtr OpenCLDevice_DeviceType_Get(global::System.IntPtr instance)
		{
			// Setup
			global::System.UIntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.OpenCLDevice_DeviceType_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, OpenCLDevice_IsEnabled_Get, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.OpenCLDevice+NativeMethods+X64", "OpenCLDevice_IsEnabled_Get")]
		public static bool OpenCLDevice_IsEnabled_Get(global::System.IntPtr instance)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.OpenCLDevice_IsEnabled_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value != 0;
		}

		// Signature, OpenCLDevice_IsEnabled_Set, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00040848] bool__System.Boolean, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.OpenCLDevice+NativeMethods+X64", "OpenCLDevice_IsEnabled_Set")]
		public static void OpenCLDevice_IsEnabled_Set(
					global::System.IntPtr instance, 
					bool value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.OpenCLDevice_IsEnabled_Set(
								instance, 
								(value ? 1 : 0)
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, OpenCLDevice_Name_Get, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.OpenCLDevice+NativeMethods+X64", "OpenCLDevice_Name_Get")]
		public static global::System.IntPtr OpenCLDevice_Name_Get(global::System.IntPtr instance)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.OpenCLDevice_Name_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, OpenCLDevice_Version_Get, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.OpenCLDevice+NativeMethods+X64", "OpenCLDevice_Version_Get")]
		public static global::System.IntPtr OpenCLDevice_Version_Get(global::System.IntPtr instance)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.OpenCLDevice_Version_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, OpenCLDevice_GetKernelProfileRecords, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.OpenCLDevice+NativeMethods+X64", "OpenCLDevice_GetKernelProfileRecords")]
		public static global::System.IntPtr OpenCLDevice_GetKernelProfileRecords(
					global::System.IntPtr Instance, 
					out global::System.UIntPtr length)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.UIntPtr* pinned_length = &(length))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.OpenCLDevice_GetKernelProfileRecords(
									Instance, 
									pinned_length
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, OpenCLDevice_GetKernelProfileRecord, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.OpenCLDevice+NativeMethods+X64", "OpenCLDevice_GetKernelProfileRecord")]
		public static global::System.IntPtr OpenCLDevice_GetKernelProfileRecord(
					global::System.IntPtr list, 
					global::System.UIntPtr index)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.OpenCLDevice_GetKernelProfileRecord(
								list, 
								index
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, OpenCLDevice_SetProfileKernels, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00040848] bool__System.Boolean, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.OpenCLDevice+NativeMethods+X64", "OpenCLDevice_SetProfileKernels")]
		public static void OpenCLDevice_SetProfileKernels(
					global::System.IntPtr Instance, 
					bool value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.OpenCLDevice_SetProfileKernels(
								Instance, 
								(value ? 1 : 0)
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, OpenCLKernelProfileRecord_Count_Get, [fwd] [return] [EETypeRva:0x000419B0] long____int64, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.OpenCLKernelProfileRecord+NativeMethods+X64", "OpenCLKernelProfileRecord_Count_Get")]
		public static long OpenCLKernelProfileRecord_Count_Get(global::System.IntPtr instance)
		{
			// Setup
			long unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.OpenCLKernelProfileRecord_Count_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, OpenCLKernelProfileRecord_MaximumDuration_Get, [fwd] [return] [EETypeRva:0x000419B0] long____int64, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.OpenCLKernelProfileRecord+NativeMethods+X64", "OpenCLKernelProfileRecord_MaximumDuration_Get")]
		public static long OpenCLKernelProfileRecord_MaximumDuration_Get(global::System.IntPtr instance)
		{
			// Setup
			long unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.OpenCLKernelProfileRecord_MaximumDuration_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, OpenCLKernelProfileRecord_MinimumDuration_Get, [fwd] [return] [EETypeRva:0x000419B0] long____int64, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.OpenCLKernelProfileRecord+NativeMethods+X64", "OpenCLKernelProfileRecord_MinimumDuration_Get")]
		public static long OpenCLKernelProfileRecord_MinimumDuration_Get(global::System.IntPtr instance)
		{
			// Setup
			long unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.OpenCLKernelProfileRecord_MinimumDuration_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, OpenCLKernelProfileRecord_Name_Get, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.OpenCLKernelProfileRecord+NativeMethods+X64", "OpenCLKernelProfileRecord_Name_Get")]
		public static global::System.IntPtr OpenCLKernelProfileRecord_Name_Get(global::System.IntPtr instance)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.OpenCLKernelProfileRecord_Name_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, OpenCLKernelProfileRecord_TotalDuration_Get, [fwd] [return] [EETypeRva:0x000419B0] long____int64, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.OpenCLKernelProfileRecord+NativeMethods+X64", "OpenCLKernelProfileRecord_TotalDuration_Get")]
		public static long OpenCLKernelProfileRecord_TotalDuration_Get(global::System.IntPtr instance)
		{
			// Setup
			long unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.OpenCLKernelProfileRecord_TotalDuration_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, PixelCollection_Create, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.PixelCollection+NativeMethods+X64", "PixelCollection_Create")]
		public static global::System.IntPtr PixelCollection_Create(
					global::System.IntPtr image, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.PixelCollection_Create(
									image, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, PixelCollection_Dispose, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.PixelCollection+NativeMethods+X64", "PixelCollection_Dispose")]
		public static void PixelCollection_Dispose(global::System.IntPtr instance)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.PixelCollection_Dispose(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, PixelCollection_GetArea, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.PixelCollection+NativeMethods+X64", "PixelCollection_GetArea")]
		public static global::System.IntPtr PixelCollection_GetArea(
					global::System.IntPtr Instance, 
					global::System.UIntPtr x, 
					global::System.UIntPtr y, 
					global::System.UIntPtr width, 
					global::System.UIntPtr height, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.PixelCollection_GetArea(
									Instance, 
									x, 
									y, 
									width, 
									height, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, PixelCollection_SetArea, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x00042A40] rg_ushort__unsigned short *, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.PixelCollection+NativeMethods+X64", "PixelCollection_SetArea")]
		public static void PixelCollection_SetArea(
					global::System.IntPtr Instance, 
					global::System.UIntPtr x, 
					global::System.UIntPtr y, 
					global::System.UIntPtr width, 
					global::System.UIntPtr height, 
					ushort[] values, 
					global::System.UIntPtr length, 
					out global::System.IntPtr exception)
		{
			// Setup
			ushort* unsafe_values;
			// Marshalling
			fixed (ushort* pinned_values = ((values != null 
						&& values.Length == 0) ? new ushort[1] : values))
			{
				unsafe_values = (ushort*)pinned_values;
				fixed (global::System.IntPtr* pinned_exception = &(exception))
				{
					// Call to native method
					global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.PixelCollection_SetArea(
										Instance, 
										x, 
										y, 
										width, 
										height, 
										unsafe_values, 
										length, 
										pinned_exception
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				}
			}
			// Return
		}

		// Signature, PixelCollection_ToByteArray, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.PixelCollection+NativeMethods+X64", "PixelCollection_ToByteArray")]
		public static global::System.IntPtr PixelCollection_ToByteArray(
					global::System.IntPtr Instance, 
					global::System.UIntPtr x, 
					global::System.UIntPtr y, 
					global::System.UIntPtr width, 
					global::System.UIntPtr height, 
					global::System.IntPtr mapping, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.PixelCollection_ToByteArray(
									Instance, 
									x, 
									y, 
									width, 
									height, 
									mapping, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, PixelCollection_ToShortArray, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.PixelCollection+NativeMethods+X64", "PixelCollection_ToShortArray")]
		public static global::System.IntPtr PixelCollection_ToShortArray(
					global::System.IntPtr Instance, 
					global::System.UIntPtr x, 
					global::System.UIntPtr y, 
					global::System.UIntPtr width, 
					global::System.UIntPtr height, 
					global::System.IntPtr mapping, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.PixelCollection_ToShortArray(
									Instance, 
									x, 
									y, 
									width, 
									height, 
									mapping, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, Quantum_Depth_Get, [fwd] [return] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.Quantum+NativeMethods+X64", "Quantum_Depth_Get")]
		public static global::System.UIntPtr Quantum_Depth_Get()
		{
			// Setup
			global::System.UIntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.Quantum_Depth_Get();
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, Quantum_Max_Get, [fwd] [return] [EETypeRva:0x000419B0] ushort__unsigned short, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.Quantum+NativeMethods+X64", "Quantum_Max_Get")]
		public static ushort Quantum_Max_Get()
		{
			// Setup
			ushort unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.Quantum_Max_Get();
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, Quantum_ScaleToByte, [fwd] [return] [EETypeRva:0x000419B0] byte__unsigned char, [fwd] [in] [EETypeRva:0x000419B0] ushort__unsigned short, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.Quantum+NativeMethods+X64", "Quantum_ScaleToByte")]
		public static byte Quantum_ScaleToByte(ushort value)
		{
			// Setup
			byte unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.Quantum_ScaleToByte(value);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, ResourceLimits_Area_Get, [fwd] [return] [EETypeRva:0x000419B0] ulong__unsigned __int64, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.ResourceLimits+NativeMethods+X64", "ResourceLimits_Area_Get")]
		public static ulong ResourceLimits_Area_Get()
		{
			// Setup
			ulong unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.ResourceLimits_Area_Get();
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, ResourceLimits_Area_Set, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] ulong__unsigned __int64, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.ResourceLimits+NativeMethods+X64", "ResourceLimits_Area_Set")]
		public static void ResourceLimits_Area_Set(ulong value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.ResourceLimits_Area_Set(value);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, ResourceLimits_Disk_Get, [fwd] [return] [EETypeRva:0x000419B0] ulong__unsigned __int64, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.ResourceLimits+NativeMethods+X64", "ResourceLimits_Disk_Get")]
		public static ulong ResourceLimits_Disk_Get()
		{
			// Setup
			ulong unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.ResourceLimits_Disk_Get();
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, ResourceLimits_Disk_Set, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] ulong__unsigned __int64, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.ResourceLimits+NativeMethods+X64", "ResourceLimits_Disk_Set")]
		public static void ResourceLimits_Disk_Set(ulong value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.ResourceLimits_Disk_Set(value);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, ResourceLimits_Height_Get, [fwd] [return] [EETypeRva:0x000419B0] ulong__unsigned __int64, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.ResourceLimits+NativeMethods+X64", "ResourceLimits_Height_Get")]
		public static ulong ResourceLimits_Height_Get()
		{
			// Setup
			ulong unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.ResourceLimits_Height_Get();
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, ResourceLimits_Height_Set, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] ulong__unsigned __int64, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.ResourceLimits+NativeMethods+X64", "ResourceLimits_Height_Set")]
		public static void ResourceLimits_Height_Set(ulong value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.ResourceLimits_Height_Set(value);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, ResourceLimits_ListLength_Get, [fwd] [return] [EETypeRva:0x000419B0] ulong__unsigned __int64, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.ResourceLimits+NativeMethods+X64", "ResourceLimits_ListLength_Get")]
		public static ulong ResourceLimits_ListLength_Get()
		{
			// Setup
			ulong unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.ResourceLimits_ListLength_Get();
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, ResourceLimits_ListLength_Set, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] ulong__unsigned __int64, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.ResourceLimits+NativeMethods+X64", "ResourceLimits_ListLength_Set")]
		public static void ResourceLimits_ListLength_Set(ulong value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.ResourceLimits_ListLength_Set(value);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, ResourceLimits_Memory_Get, [fwd] [return] [EETypeRva:0x000419B0] ulong__unsigned __int64, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.ResourceLimits+NativeMethods+X64", "ResourceLimits_Memory_Get")]
		public static ulong ResourceLimits_Memory_Get()
		{
			// Setup
			ulong unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.ResourceLimits_Memory_Get();
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, ResourceLimits_Memory_Set, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] ulong__unsigned __int64, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.ResourceLimits+NativeMethods+X64", "ResourceLimits_Memory_Set")]
		public static void ResourceLimits_Memory_Set(ulong value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.ResourceLimits_Memory_Set(value);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, ResourceLimits_Thread_Get, [fwd] [return] [EETypeRva:0x000419B0] ulong__unsigned __int64, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.ResourceLimits+NativeMethods+X64", "ResourceLimits_Thread_Get")]
		public static ulong ResourceLimits_Thread_Get()
		{
			// Setup
			ulong unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.ResourceLimits_Thread_Get();
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, ResourceLimits_Thread_Set, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] ulong__unsigned __int64, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.ResourceLimits+NativeMethods+X64", "ResourceLimits_Thread_Set")]
		public static void ResourceLimits_Thread_Set(ulong value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.ResourceLimits_Thread_Set(value);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, ResourceLimits_Throttle_Get, [fwd] [return] [EETypeRva:0x000419B0] ulong__unsigned __int64, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.ResourceLimits+NativeMethods+X64", "ResourceLimits_Throttle_Get")]
		public static ulong ResourceLimits_Throttle_Get()
		{
			// Setup
			ulong unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.ResourceLimits_Throttle_Get();
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, ResourceLimits_Throttle_Set, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] ulong__unsigned __int64, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.ResourceLimits+NativeMethods+X64", "ResourceLimits_Throttle_Set")]
		public static void ResourceLimits_Throttle_Set(ulong value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.ResourceLimits_Throttle_Set(value);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, ResourceLimits_Width_Get, [fwd] [return] [EETypeRva:0x000419B0] ulong__unsigned __int64, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.ResourceLimits+NativeMethods+X64", "ResourceLimits_Width_Get")]
		public static ulong ResourceLimits_Width_Get()
		{
			// Setup
			ulong unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.ResourceLimits_Width_Get();
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, ResourceLimits_Width_Set, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] ulong__unsigned __int64, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.ResourceLimits+NativeMethods+X64", "ResourceLimits_Width_Set")]
		public static void ResourceLimits_Width_Set(ulong value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.ResourceLimits_Width_Set(value);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, ResourceLimits_LimitMemory, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] double__double, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.ResourceLimits+NativeMethods+X64", "ResourceLimits_LimitMemory")]
		public static void ResourceLimits_LimitMemory(double percentage)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.ResourceLimits_LimitMemory(percentage);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, DrawingSettings_Create, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingSettings+NativeMethods+X64", "DrawingSettings_Create")]
		public static global::System.IntPtr DrawingSettings_Create()
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.DrawingSettings_Create();
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, DrawingSettings_Dispose, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingSettings+NativeMethods+X64", "DrawingSettings_Dispose")]
		public static void DrawingSettings_Dispose(global::System.IntPtr instance)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.DrawingSettings_Dispose(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, DrawingSettings_BorderColor_Get, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingSettings+NativeMethods+X64", "DrawingSettings_BorderColor_Get")]
		public static global::System.IntPtr DrawingSettings_BorderColor_Get(global::System.IntPtr instance)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.DrawingSettings_BorderColor_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, DrawingSettings_BorderColor_Set, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingSettings+NativeMethods+X64", "DrawingSettings_BorderColor_Set")]
		public static void DrawingSettings_BorderColor_Set(
					global::System.IntPtr instance, 
					global::System.IntPtr value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.DrawingSettings_BorderColor_Set(
								instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, DrawingSettings_FillColor_Get, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingSettings+NativeMethods+X64", "DrawingSettings_FillColor_Get")]
		public static global::System.IntPtr DrawingSettings_FillColor_Get(global::System.IntPtr instance)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.DrawingSettings_FillColor_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, DrawingSettings_FillColor_Set, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingSettings+NativeMethods+X64", "DrawingSettings_FillColor_Set")]
		public static void DrawingSettings_FillColor_Set(
					global::System.IntPtr instance, 
					global::System.IntPtr value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.DrawingSettings_FillColor_Set(
								instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, DrawingSettings_FillRule_Get, [fwd] [return] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingSettings+NativeMethods+X64", "DrawingSettings_FillRule_Get")]
		public static global::System.UIntPtr DrawingSettings_FillRule_Get(global::System.IntPtr instance)
		{
			// Setup
			global::System.UIntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.DrawingSettings_FillRule_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, DrawingSettings_FillRule_Set, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingSettings+NativeMethods+X64", "DrawingSettings_FillRule_Set")]
		public static void DrawingSettings_FillRule_Set(
					global::System.IntPtr instance, 
					global::System.UIntPtr value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.DrawingSettings_FillRule_Set(
								instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, DrawingSettings_Font_Get, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingSettings+NativeMethods+X64", "DrawingSettings_Font_Get")]
		public static global::System.IntPtr DrawingSettings_Font_Get(global::System.IntPtr instance)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.DrawingSettings_Font_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, DrawingSettings_Font_Set, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingSettings+NativeMethods+X64", "DrawingSettings_Font_Set")]
		public static void DrawingSettings_Font_Set(
					global::System.IntPtr instance, 
					global::System.IntPtr value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.DrawingSettings_Font_Set(
								instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, DrawingSettings_FontFamily_Get, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingSettings+NativeMethods+X64", "DrawingSettings_FontFamily_Get")]
		public static global::System.IntPtr DrawingSettings_FontFamily_Get(global::System.IntPtr instance)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.DrawingSettings_FontFamily_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, DrawingSettings_FontFamily_Set, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingSettings+NativeMethods+X64", "DrawingSettings_FontFamily_Set")]
		public static void DrawingSettings_FontFamily_Set(
					global::System.IntPtr instance, 
					global::System.IntPtr value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.DrawingSettings_FontFamily_Set(
								instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, DrawingSettings_FontPointsize_Get, [fwd] [return] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingSettings+NativeMethods+X64", "DrawingSettings_FontPointsize_Get")]
		public static double DrawingSettings_FontPointsize_Get(global::System.IntPtr instance)
		{
			// Setup
			double unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.DrawingSettings_FontPointsize_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, DrawingSettings_FontPointsize_Set, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingSettings+NativeMethods+X64", "DrawingSettings_FontPointsize_Set")]
		public static void DrawingSettings_FontPointsize_Set(
					global::System.IntPtr instance, 
					double value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.DrawingSettings_FontPointsize_Set(
								instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, DrawingSettings_FontStyle_Get, [fwd] [return] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingSettings+NativeMethods+X64", "DrawingSettings_FontStyle_Get")]
		public static global::System.UIntPtr DrawingSettings_FontStyle_Get(global::System.IntPtr instance)
		{
			// Setup
			global::System.UIntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.DrawingSettings_FontStyle_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, DrawingSettings_FontStyle_Set, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingSettings+NativeMethods+X64", "DrawingSettings_FontStyle_Set")]
		public static void DrawingSettings_FontStyle_Set(
					global::System.IntPtr instance, 
					global::System.UIntPtr value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.DrawingSettings_FontStyle_Set(
								instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, DrawingSettings_FontWeight_Get, [fwd] [return] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingSettings+NativeMethods+X64", "DrawingSettings_FontWeight_Get")]
		public static global::System.UIntPtr DrawingSettings_FontWeight_Get(global::System.IntPtr instance)
		{
			// Setup
			global::System.UIntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.DrawingSettings_FontWeight_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, DrawingSettings_FontWeight_Set, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingSettings+NativeMethods+X64", "DrawingSettings_FontWeight_Set")]
		public static void DrawingSettings_FontWeight_Set(
					global::System.IntPtr instance, 
					global::System.UIntPtr value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.DrawingSettings_FontWeight_Set(
								instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, DrawingSettings_StrokeAntiAlias_Get, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingSettings+NativeMethods+X64", "DrawingSettings_StrokeAntiAlias_Get")]
		public static bool DrawingSettings_StrokeAntiAlias_Get(global::System.IntPtr instance)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.DrawingSettings_StrokeAntiAlias_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value != 0;
		}

		// Signature, DrawingSettings_StrokeAntiAlias_Set, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00040848] bool__System.Boolean, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingSettings+NativeMethods+X64", "DrawingSettings_StrokeAntiAlias_Set")]
		public static void DrawingSettings_StrokeAntiAlias_Set(
					global::System.IntPtr instance, 
					bool value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.DrawingSettings_StrokeAntiAlias_Set(
								instance, 
								(value ? 1 : 0)
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, DrawingSettings_StrokeColor_Get, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingSettings+NativeMethods+X64", "DrawingSettings_StrokeColor_Get")]
		public static global::System.IntPtr DrawingSettings_StrokeColor_Get(global::System.IntPtr instance)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.DrawingSettings_StrokeColor_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, DrawingSettings_StrokeColor_Set, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingSettings+NativeMethods+X64", "DrawingSettings_StrokeColor_Set")]
		public static void DrawingSettings_StrokeColor_Set(
					global::System.IntPtr instance, 
					global::System.IntPtr value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.DrawingSettings_StrokeColor_Set(
								instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, DrawingSettings_StrokeDashOffset_Get, [fwd] [return] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingSettings+NativeMethods+X64", "DrawingSettings_StrokeDashOffset_Get")]
		public static double DrawingSettings_StrokeDashOffset_Get(global::System.IntPtr instance)
		{
			// Setup
			double unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.DrawingSettings_StrokeDashOffset_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, DrawingSettings_StrokeDashOffset_Set, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingSettings+NativeMethods+X64", "DrawingSettings_StrokeDashOffset_Set")]
		public static void DrawingSettings_StrokeDashOffset_Set(
					global::System.IntPtr instance, 
					double value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.DrawingSettings_StrokeDashOffset_Set(
								instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, DrawingSettings_StrokeLineCap_Get, [fwd] [return] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingSettings+NativeMethods+X64", "DrawingSettings_StrokeLineCap_Get")]
		public static global::System.UIntPtr DrawingSettings_StrokeLineCap_Get(global::System.IntPtr instance)
		{
			// Setup
			global::System.UIntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.DrawingSettings_StrokeLineCap_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, DrawingSettings_StrokeLineCap_Set, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingSettings+NativeMethods+X64", "DrawingSettings_StrokeLineCap_Set")]
		public static void DrawingSettings_StrokeLineCap_Set(
					global::System.IntPtr instance, 
					global::System.UIntPtr value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.DrawingSettings_StrokeLineCap_Set(
								instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, DrawingSettings_StrokeLineJoin_Get, [fwd] [return] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingSettings+NativeMethods+X64", "DrawingSettings_StrokeLineJoin_Get")]
		public static global::System.UIntPtr DrawingSettings_StrokeLineJoin_Get(global::System.IntPtr instance)
		{
			// Setup
			global::System.UIntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.DrawingSettings_StrokeLineJoin_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, DrawingSettings_StrokeLineJoin_Set, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingSettings+NativeMethods+X64", "DrawingSettings_StrokeLineJoin_Set")]
		public static void DrawingSettings_StrokeLineJoin_Set(
					global::System.IntPtr instance, 
					global::System.UIntPtr value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.DrawingSettings_StrokeLineJoin_Set(
								instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, DrawingSettings_StrokeMiterLimit_Get, [fwd] [return] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingSettings+NativeMethods+X64", "DrawingSettings_StrokeMiterLimit_Get")]
		public static global::System.UIntPtr DrawingSettings_StrokeMiterLimit_Get(global::System.IntPtr instance)
		{
			// Setup
			global::System.UIntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.DrawingSettings_StrokeMiterLimit_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, DrawingSettings_StrokeMiterLimit_Set, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingSettings+NativeMethods+X64", "DrawingSettings_StrokeMiterLimit_Set")]
		public static void DrawingSettings_StrokeMiterLimit_Set(
					global::System.IntPtr instance, 
					global::System.UIntPtr value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.DrawingSettings_StrokeMiterLimit_Set(
								instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, DrawingSettings_StrokeWidth_Get, [fwd] [return] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingSettings+NativeMethods+X64", "DrawingSettings_StrokeWidth_Get")]
		public static double DrawingSettings_StrokeWidth_Get(global::System.IntPtr instance)
		{
			// Setup
			double unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.DrawingSettings_StrokeWidth_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, DrawingSettings_StrokeWidth_Set, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingSettings+NativeMethods+X64", "DrawingSettings_StrokeWidth_Set")]
		public static void DrawingSettings_StrokeWidth_Set(
					global::System.IntPtr instance, 
					double value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.DrawingSettings_StrokeWidth_Set(
								instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, DrawingSettings_TextAntiAlias_Get, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingSettings+NativeMethods+X64", "DrawingSettings_TextAntiAlias_Get")]
		public static bool DrawingSettings_TextAntiAlias_Get(global::System.IntPtr instance)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.DrawingSettings_TextAntiAlias_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value != 0;
		}

		// Signature, DrawingSettings_TextAntiAlias_Set, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00040848] bool__System.Boolean, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingSettings+NativeMethods+X64", "DrawingSettings_TextAntiAlias_Set")]
		public static void DrawingSettings_TextAntiAlias_Set(
					global::System.IntPtr instance, 
					bool value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.DrawingSettings_TextAntiAlias_Set(
								instance, 
								(value ? 1 : 0)
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, DrawingSettings_TextDirection_Get, [fwd] [return] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingSettings+NativeMethods+X64", "DrawingSettings_TextDirection_Get")]
		public static global::System.UIntPtr DrawingSettings_TextDirection_Get(global::System.IntPtr instance)
		{
			// Setup
			global::System.UIntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.DrawingSettings_TextDirection_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, DrawingSettings_TextDirection_Set, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingSettings+NativeMethods+X64", "DrawingSettings_TextDirection_Set")]
		public static void DrawingSettings_TextDirection_Set(
					global::System.IntPtr instance, 
					global::System.UIntPtr value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.DrawingSettings_TextDirection_Set(
								instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, DrawingSettings_TextEncoding_Get, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingSettings+NativeMethods+X64", "DrawingSettings_TextEncoding_Get")]
		public static global::System.IntPtr DrawingSettings_TextEncoding_Get(global::System.IntPtr instance)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.DrawingSettings_TextEncoding_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, DrawingSettings_TextEncoding_Set, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingSettings+NativeMethods+X64", "DrawingSettings_TextEncoding_Set")]
		public static void DrawingSettings_TextEncoding_Set(
					global::System.IntPtr instance, 
					global::System.IntPtr value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.DrawingSettings_TextEncoding_Set(
								instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, DrawingSettings_TextGravity_Get, [fwd] [return] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingSettings+NativeMethods+X64", "DrawingSettings_TextGravity_Get")]
		public static global::System.UIntPtr DrawingSettings_TextGravity_Get(global::System.IntPtr instance)
		{
			// Setup
			global::System.UIntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.DrawingSettings_TextGravity_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, DrawingSettings_TextGravity_Set, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingSettings+NativeMethods+X64", "DrawingSettings_TextGravity_Set")]
		public static void DrawingSettings_TextGravity_Set(
					global::System.IntPtr instance, 
					global::System.UIntPtr value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.DrawingSettings_TextGravity_Set(
								instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, DrawingSettings_TextInterlineSpacing_Get, [fwd] [return] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingSettings+NativeMethods+X64", "DrawingSettings_TextInterlineSpacing_Get")]
		public static double DrawingSettings_TextInterlineSpacing_Get(global::System.IntPtr instance)
		{
			// Setup
			double unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.DrawingSettings_TextInterlineSpacing_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, DrawingSettings_TextInterlineSpacing_Set, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingSettings+NativeMethods+X64", "DrawingSettings_TextInterlineSpacing_Set")]
		public static void DrawingSettings_TextInterlineSpacing_Set(
					global::System.IntPtr instance, 
					double value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.DrawingSettings_TextInterlineSpacing_Set(
								instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, DrawingSettings_TextInterwordSpacing_Get, [fwd] [return] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingSettings+NativeMethods+X64", "DrawingSettings_TextInterwordSpacing_Get")]
		public static double DrawingSettings_TextInterwordSpacing_Get(global::System.IntPtr instance)
		{
			// Setup
			double unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.DrawingSettings_TextInterwordSpacing_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, DrawingSettings_TextInterwordSpacing_Set, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingSettings+NativeMethods+X64", "DrawingSettings_TextInterwordSpacing_Set")]
		public static void DrawingSettings_TextInterwordSpacing_Set(
					global::System.IntPtr instance, 
					double value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.DrawingSettings_TextInterwordSpacing_Set(
								instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, DrawingSettings_TextKerning_Get, [fwd] [return] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingSettings+NativeMethods+X64", "DrawingSettings_TextKerning_Get")]
		public static double DrawingSettings_TextKerning_Get(global::System.IntPtr instance)
		{
			// Setup
			double unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.DrawingSettings_TextKerning_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, DrawingSettings_TextKerning_Set, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingSettings+NativeMethods+X64", "DrawingSettings_TextKerning_Set")]
		public static void DrawingSettings_TextKerning_Set(
					global::System.IntPtr instance, 
					double value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.DrawingSettings_TextKerning_Set(
								instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, DrawingSettings_TextUnderColor_Get, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingSettings+NativeMethods+X64", "DrawingSettings_TextUnderColor_Get")]
		public static global::System.IntPtr DrawingSettings_TextUnderColor_Get(global::System.IntPtr instance)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.DrawingSettings_TextUnderColor_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, DrawingSettings_TextUnderColor_Set, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingSettings+NativeMethods+X64", "DrawingSettings_TextUnderColor_Set")]
		public static void DrawingSettings_TextUnderColor_Set(
					global::System.IntPtr instance, 
					global::System.IntPtr value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.DrawingSettings_TextUnderColor_Set(
								instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, DrawingSettings_SetFillPattern, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingSettings+NativeMethods+X64", "DrawingSettings_SetFillPattern")]
		public static void DrawingSettings_SetFillPattern(
					global::System.IntPtr Instance, 
					global::System.IntPtr value, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.DrawingSettings_SetFillPattern(
									Instance, 
									value, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, DrawingSettings_SetAffine, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingSettings+NativeMethods+X64", "DrawingSettings_SetAffine")]
		public static void DrawingSettings_SetAffine(
					global::System.IntPtr Instance, 
					double scaleX, 
					double scaleY, 
					double shearX, 
					double shearY, 
					double translateX, 
					double translateY, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.DrawingSettings_SetAffine(
									Instance, 
									scaleX, 
									scaleY, 
									shearX, 
									shearY, 
									translateX, 
									translateY, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, DrawingSettings_SetStrokeDashArray, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00042A40] rg_double__double *, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingSettings+NativeMethods+X64", "DrawingSettings_SetStrokeDashArray")]
		public static void DrawingSettings_SetStrokeDashArray(
					global::System.IntPtr Instance, 
					double[] dash, 
					global::System.UIntPtr length)
		{
			// Setup
			double* unsafe_dash;
			// Marshalling
			fixed (double* pinned_dash = ((dash != null 
						&& dash.Length == 0) ? new double[1] : dash))
			{
				unsafe_dash = (double*)pinned_dash;
				// Call to native method
				global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.DrawingSettings_SetStrokeDashArray(
									Instance, 
									unsafe_dash, 
									length
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, DrawingSettings_SetStrokePattern, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingSettings+NativeMethods+X64", "DrawingSettings_SetStrokePattern")]
		public static void DrawingSettings_SetStrokePattern(
					global::System.IntPtr Instance, 
					global::System.IntPtr value, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.DrawingSettings_SetStrokePattern(
									Instance, 
									value, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, DrawingSettings_SetText, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingSettings+NativeMethods+X64", "DrawingSettings_SetText")]
		public static void DrawingSettings_SetText(
					global::System.IntPtr Instance, 
					global::System.IntPtr value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.DrawingSettings_SetText(
								Instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, MagickSettings_Create, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickSettings+NativeMethods+X64", "MagickSettings_Create")]
		public static global::System.IntPtr MagickSettings_Create()
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickSettings_Create();
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, MagickSettings_Dispose, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickSettings+NativeMethods+X64", "MagickSettings_Dispose")]
		public static void MagickSettings_Dispose(global::System.IntPtr instance)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickSettings_Dispose(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, MagickSettings_AntiAlias_Get, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickSettings+NativeMethods+X64", "MagickSettings_AntiAlias_Get")]
		public static bool MagickSettings_AntiAlias_Get(global::System.IntPtr instance)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickSettings_AntiAlias_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value != 0;
		}

		// Signature, MagickSettings_AntiAlias_Set, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00040848] bool__System.Boolean, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickSettings+NativeMethods+X64", "MagickSettings_AntiAlias_Set")]
		public static void MagickSettings_AntiAlias_Set(
					global::System.IntPtr instance, 
					bool value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickSettings_AntiAlias_Set(
								instance, 
								(value ? 1 : 0)
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, MagickSettings_BackgroundColor_Get, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickSettings+NativeMethods+X64", "MagickSettings_BackgroundColor_Get")]
		public static global::System.IntPtr MagickSettings_BackgroundColor_Get(global::System.IntPtr instance)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickSettings_BackgroundColor_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, MagickSettings_BackgroundColor_Set, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickSettings+NativeMethods+X64", "MagickSettings_BackgroundColor_Set")]
		public static void MagickSettings_BackgroundColor_Set(
					global::System.IntPtr instance, 
					global::System.IntPtr value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickSettings_BackgroundColor_Set(
								instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, MagickSettings_ColorSpace_Get, [fwd] [return] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickSettings+NativeMethods+X64", "MagickSettings_ColorSpace_Get")]
		public static global::System.UIntPtr MagickSettings_ColorSpace_Get(global::System.IntPtr instance)
		{
			// Setup
			global::System.UIntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickSettings_ColorSpace_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, MagickSettings_ColorSpace_Set, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickSettings+NativeMethods+X64", "MagickSettings_ColorSpace_Set")]
		public static void MagickSettings_ColorSpace_Set(
					global::System.IntPtr instance, 
					global::System.UIntPtr value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickSettings_ColorSpace_Set(
								instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, MagickSettings_ColorType_Get, [fwd] [return] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickSettings+NativeMethods+X64", "MagickSettings_ColorType_Get")]
		public static global::System.UIntPtr MagickSettings_ColorType_Get(global::System.IntPtr instance)
		{
			// Setup
			global::System.UIntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickSettings_ColorType_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, MagickSettings_ColorType_Set, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickSettings+NativeMethods+X64", "MagickSettings_ColorType_Set")]
		public static void MagickSettings_ColorType_Set(
					global::System.IntPtr instance, 
					global::System.UIntPtr value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickSettings_ColorType_Set(
								instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, MagickSettings_Compression_Get, [fwd] [return] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickSettings+NativeMethods+X64", "MagickSettings_Compression_Get")]
		public static global::System.UIntPtr MagickSettings_Compression_Get(global::System.IntPtr instance)
		{
			// Setup
			global::System.UIntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickSettings_Compression_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, MagickSettings_Compression_Set, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickSettings+NativeMethods+X64", "MagickSettings_Compression_Set")]
		public static void MagickSettings_Compression_Set(
					global::System.IntPtr instance, 
					global::System.UIntPtr value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickSettings_Compression_Set(
								instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, MagickSettings_Debug_Get, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickSettings+NativeMethods+X64", "MagickSettings_Debug_Get")]
		public static bool MagickSettings_Debug_Get(global::System.IntPtr instance)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickSettings_Debug_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value != 0;
		}

		// Signature, MagickSettings_Debug_Set, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00040848] bool__System.Boolean, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickSettings+NativeMethods+X64", "MagickSettings_Debug_Set")]
		public static void MagickSettings_Debug_Set(
					global::System.IntPtr instance, 
					bool value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickSettings_Debug_Set(
								instance, 
								(value ? 1 : 0)
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, MagickSettings_Density_Get, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickSettings+NativeMethods+X64", "MagickSettings_Density_Get")]
		public static global::System.IntPtr MagickSettings_Density_Get(global::System.IntPtr instance)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickSettings_Density_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, MagickSettings_Density_Set, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickSettings+NativeMethods+X64", "MagickSettings_Density_Set")]
		public static void MagickSettings_Density_Set(
					global::System.IntPtr instance, 
					global::System.IntPtr value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickSettings_Density_Set(
								instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, MagickSettings_Depth_Get, [fwd] [return] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickSettings+NativeMethods+X64", "MagickSettings_Depth_Get")]
		public static global::System.UIntPtr MagickSettings_Depth_Get(global::System.IntPtr instance)
		{
			// Setup
			global::System.UIntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickSettings_Depth_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, MagickSettings_Depth_Set, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickSettings+NativeMethods+X64", "MagickSettings_Depth_Set")]
		public static void MagickSettings_Depth_Set(
					global::System.IntPtr instance, 
					global::System.UIntPtr value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickSettings_Depth_Set(
								instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, MagickSettings_Endian_Get, [fwd] [return] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickSettings+NativeMethods+X64", "MagickSettings_Endian_Get")]
		public static global::System.UIntPtr MagickSettings_Endian_Get(global::System.IntPtr instance)
		{
			// Setup
			global::System.UIntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickSettings_Endian_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, MagickSettings_Endian_Set, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickSettings+NativeMethods+X64", "MagickSettings_Endian_Set")]
		public static void MagickSettings_Endian_Set(
					global::System.IntPtr instance, 
					global::System.UIntPtr value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickSettings_Endian_Set(
								instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, MagickSettings_Extract_Get, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickSettings+NativeMethods+X64", "MagickSettings_Extract_Get")]
		public static global::System.IntPtr MagickSettings_Extract_Get(global::System.IntPtr instance)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickSettings_Extract_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, MagickSettings_Extract_Set, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickSettings+NativeMethods+X64", "MagickSettings_Extract_Set")]
		public static void MagickSettings_Extract_Set(
					global::System.IntPtr instance, 
					global::System.IntPtr value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickSettings_Extract_Set(
								instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, MagickSettings_Format_Get, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickSettings+NativeMethods+X64", "MagickSettings_Format_Get")]
		public static global::System.IntPtr MagickSettings_Format_Get(global::System.IntPtr instance)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickSettings_Format_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, MagickSettings_Format_Set, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickSettings+NativeMethods+X64", "MagickSettings_Format_Set")]
		public static void MagickSettings_Format_Set(
					global::System.IntPtr instance, 
					global::System.IntPtr value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickSettings_Format_Set(
								instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, MagickSettings_Font_Get, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickSettings+NativeMethods+X64", "MagickSettings_Font_Get")]
		public static global::System.IntPtr MagickSettings_Font_Get(global::System.IntPtr instance)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickSettings_Font_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, MagickSettings_Font_Set, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickSettings+NativeMethods+X64", "MagickSettings_Font_Set")]
		public static void MagickSettings_Font_Set(
					global::System.IntPtr instance, 
					global::System.IntPtr value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickSettings_Font_Set(
								instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, MagickSettings_FontPointsize_Get, [fwd] [return] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickSettings+NativeMethods+X64", "MagickSettings_FontPointsize_Get")]
		public static double MagickSettings_FontPointsize_Get(global::System.IntPtr instance)
		{
			// Setup
			double unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickSettings_FontPointsize_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, MagickSettings_FontPointsize_Set, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickSettings+NativeMethods+X64", "MagickSettings_FontPointsize_Set")]
		public static void MagickSettings_FontPointsize_Set(
					global::System.IntPtr instance, 
					double value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickSettings_FontPointsize_Set(
								instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, MagickSettings_Monochrome_Get, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickSettings+NativeMethods+X64", "MagickSettings_Monochrome_Get")]
		public static bool MagickSettings_Monochrome_Get(global::System.IntPtr instance)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickSettings_Monochrome_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value != 0;
		}

		// Signature, MagickSettings_Monochrome_Set, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00040848] bool__System.Boolean, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickSettings+NativeMethods+X64", "MagickSettings_Monochrome_Set")]
		public static void MagickSettings_Monochrome_Set(
					global::System.IntPtr instance, 
					bool value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickSettings_Monochrome_Set(
								instance, 
								(value ? 1 : 0)
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, MagickSettings_Interlace_Get, [fwd] [return] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickSettings+NativeMethods+X64", "MagickSettings_Interlace_Get")]
		public static global::System.UIntPtr MagickSettings_Interlace_Get(global::System.IntPtr instance)
		{
			// Setup
			global::System.UIntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickSettings_Interlace_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, MagickSettings_Interlace_Set, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickSettings+NativeMethods+X64", "MagickSettings_Interlace_Set")]
		public static void MagickSettings_Interlace_Set(
					global::System.IntPtr instance, 
					global::System.UIntPtr value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickSettings_Interlace_Set(
								instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, MagickSettings_Verbose_Get, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickSettings+NativeMethods+X64", "MagickSettings_Verbose_Get")]
		public static bool MagickSettings_Verbose_Get(global::System.IntPtr instance)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickSettings_Verbose_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value != 0;
		}

		// Signature, MagickSettings_Verbose_Set, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00040848] bool__System.Boolean, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickSettings+NativeMethods+X64", "MagickSettings_Verbose_Set")]
		public static void MagickSettings_Verbose_Set(
					global::System.IntPtr instance, 
					bool value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickSettings_Verbose_Set(
								instance, 
								(value ? 1 : 0)
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, MagickSettings_SetColorFuzz, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickSettings+NativeMethods+X64", "MagickSettings_SetColorFuzz")]
		public static void MagickSettings_SetColorFuzz(
					global::System.IntPtr Instance, 
					double value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickSettings_SetColorFuzz(
								Instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, MagickSettings_SetFileName, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickSettings+NativeMethods+X64", "MagickSettings_SetFileName")]
		public static void MagickSettings_SetFileName(
					global::System.IntPtr Instance, 
					global::System.IntPtr value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickSettings_SetFileName(
								Instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, MagickSettings_SetNumberScenes, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickSettings+NativeMethods+X64", "MagickSettings_SetNumberScenes")]
		public static void MagickSettings_SetNumberScenes(
					global::System.IntPtr Instance, 
					global::System.UIntPtr value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickSettings_SetNumberScenes(
								Instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, MagickSettings_SetOption, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickSettings+NativeMethods+X64", "MagickSettings_SetOption")]
		public static void MagickSettings_SetOption(
					global::System.IntPtr Instance, 
					global::System.IntPtr key, 
					global::System.IntPtr value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickSettings_SetOption(
								Instance, 
								key, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, MagickSettings_SetPage, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickSettings+NativeMethods+X64", "MagickSettings_SetPage")]
		public static void MagickSettings_SetPage(
					global::System.IntPtr Instance, 
					global::System.IntPtr value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickSettings_SetPage(
								Instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, MagickSettings_SetPing, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00040848] bool__System.Boolean, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickSettings+NativeMethods+X64", "MagickSettings_SetPing")]
		public static void MagickSettings_SetPing(
					global::System.IntPtr Instance, 
					bool value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickSettings_SetPing(
								Instance, 
								(value ? 1 : 0)
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, MagickSettings_SetQuality, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickSettings+NativeMethods+X64", "MagickSettings_SetQuality")]
		public static void MagickSettings_SetQuality(
					global::System.IntPtr Instance, 
					global::System.UIntPtr value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickSettings_SetQuality(
								Instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, MagickSettings_SetScenes, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickSettings+NativeMethods+X64", "MagickSettings_SetScenes")]
		public static void MagickSettings_SetScenes(
					global::System.IntPtr Instance, 
					global::System.IntPtr value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickSettings_SetScenes(
								Instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, MagickSettings_SetScene, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickSettings+NativeMethods+X64", "MagickSettings_SetScene")]
		public static void MagickSettings_SetScene(
					global::System.IntPtr Instance, 
					global::System.UIntPtr value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickSettings_SetScene(
								Instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, MagickSettings_SetSize, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickSettings+NativeMethods+X64", "MagickSettings_SetSize")]
		public static void MagickSettings_SetSize(
					global::System.IntPtr Instance, 
					global::System.IntPtr value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickSettings_SetSize(
								Instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, MontageSettings_Create, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MontageSettings+NativeMethods+X64", "MontageSettings_Create")]
		public static global::System.IntPtr MontageSettings_Create()
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MontageSettings_Create();
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, MontageSettings_Dispose, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MontageSettings+NativeMethods+X64", "MontageSettings_Dispose")]
		public static void MontageSettings_Dispose(global::System.IntPtr instance)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MontageSettings_Dispose(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, MontageSettings_SetBackgroundColor, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MontageSettings+NativeMethods+X64", "MontageSettings_SetBackgroundColor")]
		public static void MontageSettings_SetBackgroundColor(
					global::System.IntPtr Instance, 
					global::System.IntPtr value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MontageSettings_SetBackgroundColor(
								Instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, MontageSettings_SetBorderColor, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MontageSettings+NativeMethods+X64", "MontageSettings_SetBorderColor")]
		public static void MontageSettings_SetBorderColor(
					global::System.IntPtr Instance, 
					global::System.IntPtr value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MontageSettings_SetBorderColor(
								Instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, MontageSettings_SetBorderWidth, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MontageSettings+NativeMethods+X64", "MontageSettings_SetBorderWidth")]
		public static void MontageSettings_SetBorderWidth(
					global::System.IntPtr Instance, 
					global::System.UIntPtr value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MontageSettings_SetBorderWidth(
								Instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, MontageSettings_SetFillColor, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MontageSettings+NativeMethods+X64", "MontageSettings_SetFillColor")]
		public static void MontageSettings_SetFillColor(
					global::System.IntPtr Instance, 
					global::System.IntPtr value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MontageSettings_SetFillColor(
								Instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, MontageSettings_SetFont, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MontageSettings+NativeMethods+X64", "MontageSettings_SetFont")]
		public static void MontageSettings_SetFont(
					global::System.IntPtr Instance, 
					global::System.IntPtr value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MontageSettings_SetFont(
								Instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, MontageSettings_SetFontPointsize, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MontageSettings+NativeMethods+X64", "MontageSettings_SetFontPointsize")]
		public static void MontageSettings_SetFontPointsize(
					global::System.IntPtr Instance, 
					double value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MontageSettings_SetFontPointsize(
								Instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, MontageSettings_SetFrameGeometry, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MontageSettings+NativeMethods+X64", "MontageSettings_SetFrameGeometry")]
		public static void MontageSettings_SetFrameGeometry(
					global::System.IntPtr Instance, 
					global::System.IntPtr value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MontageSettings_SetFrameGeometry(
								Instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, MontageSettings_SetGeometry, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MontageSettings+NativeMethods+X64", "MontageSettings_SetGeometry")]
		public static void MontageSettings_SetGeometry(
					global::System.IntPtr Instance, 
					global::System.IntPtr value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MontageSettings_SetGeometry(
								Instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, MontageSettings_SetGravity, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MontageSettings+NativeMethods+X64", "MontageSettings_SetGravity")]
		public static void MontageSettings_SetGravity(
					global::System.IntPtr Instance, 
					global::System.UIntPtr value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MontageSettings_SetGravity(
								Instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, MontageSettings_SetShadow, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00040848] bool__System.Boolean, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MontageSettings+NativeMethods+X64", "MontageSettings_SetShadow")]
		public static void MontageSettings_SetShadow(
					global::System.IntPtr Instance, 
					bool value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MontageSettings_SetShadow(
								Instance, 
								(value ? 1 : 0)
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, MontageSettings_SetStrokeColor, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MontageSettings+NativeMethods+X64", "MontageSettings_SetStrokeColor")]
		public static void MontageSettings_SetStrokeColor(
					global::System.IntPtr Instance, 
					global::System.IntPtr value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MontageSettings_SetStrokeColor(
								Instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, MontageSettings_SetTextureFileName, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MontageSettings+NativeMethods+X64", "MontageSettings_SetTextureFileName")]
		public static void MontageSettings_SetTextureFileName(
					global::System.IntPtr Instance, 
					global::System.IntPtr value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MontageSettings_SetTextureFileName(
								Instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, MontageSettings_SetTileGeometry, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MontageSettings+NativeMethods+X64", "MontageSettings_SetTileGeometry")]
		public static void MontageSettings_SetTileGeometry(
					global::System.IntPtr Instance, 
					global::System.IntPtr value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MontageSettings_SetTileGeometry(
								Instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, MontageSettings_SetTitle, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MontageSettings+NativeMethods+X64", "MontageSettings_SetTitle")]
		public static void MontageSettings_SetTitle(
					global::System.IntPtr Instance, 
					global::System.IntPtr value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MontageSettings_SetTitle(
								Instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, QuantizeSettings_Create, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.QuantizeSettings+NativeMethods+X64", "QuantizeSettings_Create")]
		public static global::System.IntPtr QuantizeSettings_Create()
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.QuantizeSettings_Create();
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, QuantizeSettings_Dispose, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.QuantizeSettings+NativeMethods+X64", "QuantizeSettings_Dispose")]
		public static void QuantizeSettings_Dispose(global::System.IntPtr instance)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.QuantizeSettings_Dispose(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, QuantizeSettings_SetColors, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.QuantizeSettings+NativeMethods+X64", "QuantizeSettings_SetColors")]
		public static void QuantizeSettings_SetColors(
					global::System.IntPtr Instance, 
					global::System.UIntPtr value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.QuantizeSettings_SetColors(
								Instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, QuantizeSettings_SetColorSpace, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.QuantizeSettings+NativeMethods+X64", "QuantizeSettings_SetColorSpace")]
		public static void QuantizeSettings_SetColorSpace(
					global::System.IntPtr Instance, 
					global::System.UIntPtr value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.QuantizeSettings_SetColorSpace(
								Instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, QuantizeSettings_SetDitherMethod, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.QuantizeSettings+NativeMethods+X64", "QuantizeSettings_SetDitherMethod")]
		public static void QuantizeSettings_SetDitherMethod(
					global::System.IntPtr Instance, 
					global::System.UIntPtr value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.QuantizeSettings_SetDitherMethod(
								Instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, QuantizeSettings_SetMeasureErrors, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00040848] bool__System.Boolean, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.QuantizeSettings+NativeMethods+X64", "QuantizeSettings_SetMeasureErrors")]
		public static void QuantizeSettings_SetMeasureErrors(
					global::System.IntPtr Instance, 
					bool value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.QuantizeSettings_SetMeasureErrors(
								Instance, 
								(value ? 1 : 0)
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, QuantizeSettings_SetTreeDepth, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.QuantizeSettings+NativeMethods+X64", "QuantizeSettings_SetTreeDepth")]
		public static void QuantizeSettings_SetTreeDepth(
					global::System.IntPtr Instance, 
					global::System.UIntPtr value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.QuantizeSettings_SetTreeDepth(
								Instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, ChannelMoments_Centroid_Get, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.ChannelMoments+NativeMethods+X64", "ChannelMoments_Centroid_Get")]
		public static global::System.IntPtr ChannelMoments_Centroid_Get(global::System.IntPtr instance)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.ChannelMoments_Centroid_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, ChannelMoments_EllipseAngle_Get, [fwd] [return] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.ChannelMoments+NativeMethods+X64", "ChannelMoments_EllipseAngle_Get")]
		public static double ChannelMoments_EllipseAngle_Get(global::System.IntPtr instance)
		{
			// Setup
			double unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.ChannelMoments_EllipseAngle_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, ChannelMoments_EllipseAxis_Get, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.ChannelMoments+NativeMethods+X64", "ChannelMoments_EllipseAxis_Get")]
		public static global::System.IntPtr ChannelMoments_EllipseAxis_Get(global::System.IntPtr instance)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.ChannelMoments_EllipseAxis_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, ChannelMoments_EllipseEccentricity_Get, [fwd] [return] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.ChannelMoments+NativeMethods+X64", "ChannelMoments_EllipseEccentricity_Get")]
		public static double ChannelMoments_EllipseEccentricity_Get(global::System.IntPtr instance)
		{
			// Setup
			double unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.ChannelMoments_EllipseEccentricity_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, ChannelMoments_EllipseIntensity_Get, [fwd] [return] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.ChannelMoments+NativeMethods+X64", "ChannelMoments_EllipseIntensity_Get")]
		public static double ChannelMoments_EllipseIntensity_Get(global::System.IntPtr instance)
		{
			// Setup
			double unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.ChannelMoments_EllipseIntensity_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, ChannelMoments_GetHuInvariants, [fwd] [return] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.ChannelMoments+NativeMethods+X64", "ChannelMoments_GetHuInvariants")]
		public static double ChannelMoments_GetHuInvariants(
					global::System.IntPtr Instance, 
					global::System.UIntPtr index)
		{
			// Setup
			double unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.ChannelMoments_GetHuInvariants(
								Instance, 
								index
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, ChannelPerceptualHash_GetSrgbHuPhash, [fwd] [return] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.ChannelPerceptualHash+NativeMethods+X64", "ChannelPerceptualHash_GetSrgbHuPhash")]
		public static double ChannelPerceptualHash_GetSrgbHuPhash(
					global::System.IntPtr Instance, 
					global::System.UIntPtr index)
		{
			// Setup
			double unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.ChannelPerceptualHash_GetSrgbHuPhash(
								Instance, 
								index
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, ChannelPerceptualHash_GetHclpHuPhash, [fwd] [return] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.ChannelPerceptualHash+NativeMethods+X64", "ChannelPerceptualHash_GetHclpHuPhash")]
		public static double ChannelPerceptualHash_GetHclpHuPhash(
					global::System.IntPtr Instance, 
					global::System.UIntPtr index)
		{
			// Setup
			double unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.ChannelPerceptualHash_GetHclpHuPhash(
								Instance, 
								index
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, ChannelStatistics_Depth_Get, [fwd] [return] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.ChannelStatistics+NativeMethods+X64", "ChannelStatistics_Depth_Get")]
		public static global::System.UIntPtr ChannelStatistics_Depth_Get(global::System.IntPtr instance)
		{
			// Setup
			global::System.UIntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.ChannelStatistics_Depth_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, ChannelStatistics_Entropy_Get, [fwd] [return] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.ChannelStatistics+NativeMethods+X64", "ChannelStatistics_Entropy_Get")]
		public static double ChannelStatistics_Entropy_Get(global::System.IntPtr instance)
		{
			// Setup
			double unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.ChannelStatistics_Entropy_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, ChannelStatistics_Kurtosis_Get, [fwd] [return] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.ChannelStatistics+NativeMethods+X64", "ChannelStatistics_Kurtosis_Get")]
		public static double ChannelStatistics_Kurtosis_Get(global::System.IntPtr instance)
		{
			// Setup
			double unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.ChannelStatistics_Kurtosis_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, ChannelStatistics_Maximum_Get, [fwd] [return] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.ChannelStatistics+NativeMethods+X64", "ChannelStatistics_Maximum_Get")]
		public static double ChannelStatistics_Maximum_Get(global::System.IntPtr instance)
		{
			// Setup
			double unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.ChannelStatistics_Maximum_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, ChannelStatistics_Mean_Get, [fwd] [return] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.ChannelStatistics+NativeMethods+X64", "ChannelStatistics_Mean_Get")]
		public static double ChannelStatistics_Mean_Get(global::System.IntPtr instance)
		{
			// Setup
			double unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.ChannelStatistics_Mean_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, ChannelStatistics_Minimum_Get, [fwd] [return] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.ChannelStatistics+NativeMethods+X64", "ChannelStatistics_Minimum_Get")]
		public static double ChannelStatistics_Minimum_Get(global::System.IntPtr instance)
		{
			// Setup
			double unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.ChannelStatistics_Minimum_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, ChannelStatistics_Skewness_Get, [fwd] [return] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.ChannelStatistics+NativeMethods+X64", "ChannelStatistics_Skewness_Get")]
		public static double ChannelStatistics_Skewness_Get(global::System.IntPtr instance)
		{
			// Setup
			double unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.ChannelStatistics_Skewness_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, ChannelStatistics_StandardDeviation_Get, [fwd] [return] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.ChannelStatistics+NativeMethods+X64", "ChannelStatistics_StandardDeviation_Get")]
		public static double ChannelStatistics_StandardDeviation_Get(global::System.IntPtr instance)
		{
			// Setup
			double unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.ChannelStatistics_StandardDeviation_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, ChannelStatistics_Sum_Get, [fwd] [return] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.ChannelStatistics+NativeMethods+X64", "ChannelStatistics_Sum_Get")]
		public static double ChannelStatistics_Sum_Get(global::System.IntPtr instance)
		{
			// Setup
			double unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.ChannelStatistics_Sum_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, ChannelStatistics_SumCubed_Get, [fwd] [return] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.ChannelStatistics+NativeMethods+X64", "ChannelStatistics_SumCubed_Get")]
		public static double ChannelStatistics_SumCubed_Get(global::System.IntPtr instance)
		{
			// Setup
			double unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.ChannelStatistics_SumCubed_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, ChannelStatistics_SumFourthPower_Get, [fwd] [return] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.ChannelStatistics+NativeMethods+X64", "ChannelStatistics_SumFourthPower_Get")]
		public static double ChannelStatistics_SumFourthPower_Get(global::System.IntPtr instance)
		{
			// Setup
			double unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.ChannelStatistics_SumFourthPower_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, ChannelStatistics_SumSquared_Get, [fwd] [return] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.ChannelStatistics+NativeMethods+X64", "ChannelStatistics_SumSquared_Get")]
		public static double ChannelStatistics_SumSquared_Get(global::System.IntPtr instance)
		{
			// Setup
			double unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.ChannelStatistics_SumSquared_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, ChannelStatistics_Variance_Get, [fwd] [return] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.ChannelStatistics+NativeMethods+X64", "ChannelStatistics_Variance_Get")]
		public static double ChannelStatistics_Variance_Get(global::System.IntPtr instance)
		{
			// Setup
			double unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.ChannelStatistics_Variance_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, Moments_DisposeList, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.Moments+NativeMethods+X64", "Moments_DisposeList")]
		public static void Moments_DisposeList(global::System.IntPtr list)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.Moments_DisposeList(list);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, Moments_GetInstance, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.Moments+NativeMethods+X64", "Moments_GetInstance")]
		public static global::System.IntPtr Moments_GetInstance(
					global::System.IntPtr list, 
					global::System.UIntPtr channel)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.Moments_GetInstance(
								list, 
								channel
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, PerceptualHash_DisposeList, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.PerceptualHash+NativeMethods+X64", "PerceptualHash_DisposeList")]
		public static void PerceptualHash_DisposeList(global::System.IntPtr list)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.PerceptualHash_DisposeList(list);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, PerceptualHash_GetInstance, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.PerceptualHash+NativeMethods+X64", "PerceptualHash_GetInstance")]
		public static global::System.IntPtr PerceptualHash_GetInstance(
					global::System.IntPtr image, 
					global::System.IntPtr list, 
					global::System.UIntPtr channel)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.PerceptualHash_GetInstance(
								image, 
								list, 
								channel
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, Statistics_DisposeList, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.Statistics+NativeMethods+X64", "Statistics_DisposeList")]
		public static void Statistics_DisposeList(global::System.IntPtr list)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.Statistics_DisposeList(list);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, Statistics_GetInstance, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.Statistics+NativeMethods+X64", "Statistics_GetInstance")]
		public static global::System.IntPtr Statistics_GetInstance(
					global::System.IntPtr list, 
					global::System.UIntPtr channel)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.Statistics_GetInstance(
								list, 
								channel
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, ConnectedComponent_DisposeList, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.ConnectedComponent+NativeMethods+X64", "ConnectedComponent_DisposeList")]
		public static void ConnectedComponent_DisposeList(global::System.IntPtr list)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.ConnectedComponent_DisposeList(list);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, ConnectedComponent_GetArea, [fwd] [return] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.ConnectedComponent+NativeMethods+X64", "ConnectedComponent_GetArea")]
		public static global::System.UIntPtr ConnectedComponent_GetArea(global::System.IntPtr instance)
		{
			// Setup
			global::System.UIntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.ConnectedComponent_GetArea(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, ConnectedComponent_GetCentroid, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.ConnectedComponent+NativeMethods+X64", "ConnectedComponent_GetCentroid")]
		public static global::System.IntPtr ConnectedComponent_GetCentroid(global::System.IntPtr instance)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.ConnectedComponent_GetCentroid(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, ConnectedComponent_GetColor, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.ConnectedComponent+NativeMethods+X64", "ConnectedComponent_GetColor")]
		public static global::System.IntPtr ConnectedComponent_GetColor(global::System.IntPtr instance)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.ConnectedComponent_GetColor(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, ConnectedComponent_GetHeight, [fwd] [return] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.ConnectedComponent+NativeMethods+X64", "ConnectedComponent_GetHeight")]
		public static global::System.UIntPtr ConnectedComponent_GetHeight(global::System.IntPtr instance)
		{
			// Setup
			global::System.UIntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.ConnectedComponent_GetHeight(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, ConnectedComponent_GetId, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.ConnectedComponent+NativeMethods+X64", "ConnectedComponent_GetId")]
		public static global::System.IntPtr ConnectedComponent_GetId(global::System.IntPtr instance)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.ConnectedComponent_GetId(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, ConnectedComponent_GetInstance, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.ConnectedComponent+NativeMethods+X64", "ConnectedComponent_GetInstance")]
		public static global::System.IntPtr ConnectedComponent_GetInstance(
					global::System.IntPtr list, 
					global::System.UIntPtr index)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.ConnectedComponent_GetInstance(
								list, 
								index
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, ConnectedComponent_GetWidth, [fwd] [return] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.ConnectedComponent+NativeMethods+X64", "ConnectedComponent_GetWidth")]
		public static global::System.UIntPtr ConnectedComponent_GetWidth(global::System.IntPtr instance)
		{
			// Setup
			global::System.UIntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.ConnectedComponent_GetWidth(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, ConnectedComponent_GetX, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.ConnectedComponent+NativeMethods+X64", "ConnectedComponent_GetX")]
		public static global::System.IntPtr ConnectedComponent_GetX(global::System.IntPtr instance)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.ConnectedComponent_GetX(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, ConnectedComponent_GetY, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.ConnectedComponent+NativeMethods+X64", "ConnectedComponent_GetY")]
		public static global::System.IntPtr ConnectedComponent_GetY(global::System.IntPtr instance)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.ConnectedComponent_GetY(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, MagickGeometry_Create, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickGeometry+NativeMethods+X64", "MagickGeometry_Create")]
		public static global::System.IntPtr MagickGeometry_Create()
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickGeometry_Create();
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, MagickGeometry_Dispose, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickGeometry+NativeMethods+X64", "MagickGeometry_Dispose")]
		public static void MagickGeometry_Dispose(global::System.IntPtr instance)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickGeometry_Dispose(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, MagickGeometry_X_Get, [fwd] [return] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickGeometry+NativeMethods+X64", "MagickGeometry_X_Get")]
		public static double MagickGeometry_X_Get(global::System.IntPtr instance)
		{
			// Setup
			double unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickGeometry_X_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, MagickGeometry_Y_Get, [fwd] [return] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickGeometry+NativeMethods+X64", "MagickGeometry_Y_Get")]
		public static double MagickGeometry_Y_Get(global::System.IntPtr instance)
		{
			// Setup
			double unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickGeometry_Y_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, MagickGeometry_Width_Get, [fwd] [return] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickGeometry+NativeMethods+X64", "MagickGeometry_Width_Get")]
		public static double MagickGeometry_Width_Get(global::System.IntPtr instance)
		{
			// Setup
			double unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickGeometry_Width_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, MagickGeometry_Height_Get, [fwd] [return] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickGeometry+NativeMethods+X64", "MagickGeometry_Height_Get")]
		public static double MagickGeometry_Height_Get(global::System.IntPtr instance)
		{
			// Setup
			double unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickGeometry_Height_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, MagickGeometry_Initialize, [fwd] [return] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickGeometry+NativeMethods+X64", "MagickGeometry_Initialize")]
		public static global::System.UIntPtr MagickGeometry_Initialize(
					global::System.IntPtr Instance, 
					global::System.IntPtr value)
		{
			// Setup
			global::System.UIntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickGeometry_Initialize(
								Instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, MagickRectangle_Create, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickRectangle+NativeMethods+X64", "MagickRectangle_Create")]
		public static global::System.IntPtr MagickRectangle_Create()
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickRectangle_Create();
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, MagickRectangle_Dispose, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickRectangle+NativeMethods+X64", "MagickRectangle_Dispose")]
		public static void MagickRectangle_Dispose(global::System.IntPtr instance)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickRectangle_Dispose(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, MagickRectangle_X_Get, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickRectangle+NativeMethods+X64", "MagickRectangle_X_Get")]
		public static global::System.IntPtr MagickRectangle_X_Get(global::System.IntPtr instance)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickRectangle_X_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, MagickRectangle_X_Set, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickRectangle+NativeMethods+X64", "MagickRectangle_X_Set")]
		public static void MagickRectangle_X_Set(
					global::System.IntPtr instance, 
					global::System.IntPtr value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickRectangle_X_Set(
								instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, MagickRectangle_Y_Get, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickRectangle+NativeMethods+X64", "MagickRectangle_Y_Get")]
		public static global::System.IntPtr MagickRectangle_Y_Get(global::System.IntPtr instance)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickRectangle_Y_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, MagickRectangle_Y_Set, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickRectangle+NativeMethods+X64", "MagickRectangle_Y_Set")]
		public static void MagickRectangle_Y_Set(
					global::System.IntPtr instance, 
					global::System.IntPtr value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickRectangle_Y_Set(
								instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, MagickRectangle_Width_Get, [fwd] [return] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickRectangle+NativeMethods+X64", "MagickRectangle_Width_Get")]
		public static global::System.UIntPtr MagickRectangle_Width_Get(global::System.IntPtr instance)
		{
			// Setup
			global::System.UIntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickRectangle_Width_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, MagickRectangle_Width_Set, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickRectangle+NativeMethods+X64", "MagickRectangle_Width_Set")]
		public static void MagickRectangle_Width_Set(
					global::System.IntPtr instance, 
					global::System.UIntPtr value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickRectangle_Width_Set(
								instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, MagickRectangle_Height_Get, [fwd] [return] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickRectangle+NativeMethods+X64", "MagickRectangle_Height_Get")]
		public static global::System.UIntPtr MagickRectangle_Height_Get(global::System.IntPtr instance)
		{
			// Setup
			global::System.UIntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickRectangle_Height_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, MagickRectangle_Height_Set, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickRectangle+NativeMethods+X64", "MagickRectangle_Height_Set")]
		public static void MagickRectangle_Height_Set(
					global::System.IntPtr instance, 
					global::System.UIntPtr value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.MagickRectangle_Height_Set(
								instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, OffsetInfo_Create, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.OffsetInfo+NativeMethods+X64", "OffsetInfo_Create")]
		public static global::System.IntPtr OffsetInfo_Create()
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.OffsetInfo_Create();
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, OffsetInfo_Dispose, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.OffsetInfo+NativeMethods+X64", "OffsetInfo_Dispose")]
		public static void OffsetInfo_Dispose(global::System.IntPtr instance)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.OffsetInfo_Dispose(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, OffsetInfo_SetX, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.OffsetInfo+NativeMethods+X64", "OffsetInfo_SetX")]
		public static void OffsetInfo_SetX(
					global::System.IntPtr Instance, 
					global::System.UIntPtr value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.OffsetInfo_SetX(
								Instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, OffsetInfo_SetY, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.OffsetInfo+NativeMethods+X64", "OffsetInfo_SetY")]
		public static void OffsetInfo_SetY(
					global::System.IntPtr Instance, 
					global::System.UIntPtr value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.OffsetInfo_SetY(
								Instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, PointInfo_X_Get, [fwd] [return] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.PointInfo+NativeMethods+X64", "PointInfo_X_Get")]
		public static double PointInfo_X_Get(global::System.IntPtr instance)
		{
			// Setup
			double unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.PointInfo_X_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, PointInfo_Y_Get, [fwd] [return] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.PointInfo+NativeMethods+X64", "PointInfo_Y_Get")]
		public static double PointInfo_Y_Get(global::System.IntPtr instance)
		{
			// Setup
			double unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.PointInfo_Y_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, PointInfoCollection_Create, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.PointInfoCollection+NativeMethods+X64", "PointInfoCollection_Create")]
		public static global::System.IntPtr PointInfoCollection_Create(global::System.UIntPtr length)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.PointInfoCollection_Create(length);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, PointInfoCollection_Dispose, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.PointInfoCollection+NativeMethods+X64", "PointInfoCollection_Dispose")]
		public static void PointInfoCollection_Dispose(global::System.IntPtr instance)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.PointInfoCollection_Dispose(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, PointInfoCollection_GetX, [fwd] [return] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.PointInfoCollection+NativeMethods+X64", "PointInfoCollection_GetX")]
		public static double PointInfoCollection_GetX(
					global::System.IntPtr Instance, 
					global::System.UIntPtr index)
		{
			// Setup
			double unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.PointInfoCollection_GetX(
								Instance, 
								index
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, PointInfoCollection_GetY, [fwd] [return] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.PointInfoCollection+NativeMethods+X64", "PointInfoCollection_GetY")]
		public static double PointInfoCollection_GetY(
					global::System.IntPtr Instance, 
					global::System.UIntPtr index)
		{
			// Setup
			double unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.PointInfoCollection_GetY(
								Instance, 
								index
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, PointInfoCollection_Set, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.PointInfoCollection+NativeMethods+X64", "PointInfoCollection_Set")]
		public static void PointInfoCollection_Set(
					global::System.IntPtr Instance, 
					global::System.UIntPtr index, 
					double x, 
					double y)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.PointInfoCollection_Set(
								Instance, 
								index, 
								x, 
								y
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, PrimaryInfo_Create, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.PrimaryInfo+NativeMethods+X64", "PrimaryInfo_Create")]
		public static global::System.IntPtr PrimaryInfo_Create()
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.PrimaryInfo_Create();
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, PrimaryInfo_Dispose, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.PrimaryInfo+NativeMethods+X64", "PrimaryInfo_Dispose")]
		public static void PrimaryInfo_Dispose(global::System.IntPtr instance)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.PrimaryInfo_Dispose(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, PrimaryInfo_X_Get, [fwd] [return] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.PrimaryInfo+NativeMethods+X64", "PrimaryInfo_X_Get")]
		public static double PrimaryInfo_X_Get(global::System.IntPtr instance)
		{
			// Setup
			double unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.PrimaryInfo_X_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, PrimaryInfo_X_Set, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.PrimaryInfo+NativeMethods+X64", "PrimaryInfo_X_Set")]
		public static void PrimaryInfo_X_Set(
					global::System.IntPtr instance, 
					double value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.PrimaryInfo_X_Set(
								instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, PrimaryInfo_Y_Get, [fwd] [return] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.PrimaryInfo+NativeMethods+X64", "PrimaryInfo_Y_Get")]
		public static double PrimaryInfo_Y_Get(global::System.IntPtr instance)
		{
			// Setup
			double unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.PrimaryInfo_Y_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, PrimaryInfo_Y_Set, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.PrimaryInfo+NativeMethods+X64", "PrimaryInfo_Y_Set")]
		public static void PrimaryInfo_Y_Set(
					global::System.IntPtr instance, 
					double value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.PrimaryInfo_Y_Set(
								instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, PrimaryInfo_Z_Get, [fwd] [return] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.PrimaryInfo+NativeMethods+X64", "PrimaryInfo_Z_Get")]
		public static double PrimaryInfo_Z_Get(global::System.IntPtr instance)
		{
			// Setup
			double unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.PrimaryInfo_Z_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, PrimaryInfo_Z_Set, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.PrimaryInfo+NativeMethods+X64", "PrimaryInfo_Z_Set")]
		public static void PrimaryInfo_Z_Set(
					global::System.IntPtr instance, 
					double value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.PrimaryInfo_Z_Set(
								instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, StringInfo_Datum_Get, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.StringInfo+NativeMethods+X64", "StringInfo_Datum_Get")]
		public static global::System.IntPtr StringInfo_Datum_Get(global::System.IntPtr instance)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.StringInfo_Datum_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, StringInfo_Length_Get, [fwd] [return] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.StringInfo+NativeMethods+X64", "StringInfo_Length_Get")]
		public static global::System.UIntPtr StringInfo_Length_Get(global::System.IntPtr instance)
		{
			// Setup
			global::System.UIntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.StringInfo_Length_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, TypeMetric_Dispose, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.TypeMetric+NativeMethods+X64", "TypeMetric_Dispose")]
		public static void TypeMetric_Dispose(global::System.IntPtr instance)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.TypeMetric_Dispose(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, TypeMetric_Ascent_Get, [fwd] [return] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.TypeMetric+NativeMethods+X64", "TypeMetric_Ascent_Get")]
		public static double TypeMetric_Ascent_Get(global::System.IntPtr instance)
		{
			// Setup
			double unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.TypeMetric_Ascent_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, TypeMetric_Descent_Get, [fwd] [return] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.TypeMetric+NativeMethods+X64", "TypeMetric_Descent_Get")]
		public static double TypeMetric_Descent_Get(global::System.IntPtr instance)
		{
			// Setup
			double unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.TypeMetric_Descent_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, TypeMetric_MaxHorizontalAdvance_Get, [fwd] [return] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.TypeMetric+NativeMethods+X64", "TypeMetric_MaxHorizontalAdvance_Get")]
		public static double TypeMetric_MaxHorizontalAdvance_Get(global::System.IntPtr instance)
		{
			// Setup
			double unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.TypeMetric_MaxHorizontalAdvance_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, TypeMetric_TextHeight_Get, [fwd] [return] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.TypeMetric+NativeMethods+X64", "TypeMetric_TextHeight_Get")]
		public static double TypeMetric_TextHeight_Get(global::System.IntPtr instance)
		{
			// Setup
			double unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.TypeMetric_TextHeight_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, TypeMetric_TextWidth_Get, [fwd] [return] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.TypeMetric+NativeMethods+X64", "TypeMetric_TextWidth_Get")]
		public static double TypeMetric_TextWidth_Get(global::System.IntPtr instance)
		{
			// Setup
			double unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.TypeMetric_TextWidth_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, TypeMetric_UnderlinePosition_Get, [fwd] [return] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.TypeMetric+NativeMethods+X64", "TypeMetric_UnderlinePosition_Get")]
		public static double TypeMetric_UnderlinePosition_Get(global::System.IntPtr instance)
		{
			// Setup
			double unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.TypeMetric_UnderlinePosition_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, TypeMetric_UnderlineThickness_Get, [fwd] [return] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.TypeMetric+NativeMethods+X64", "TypeMetric_UnderlineThickness_Get")]
		public static double TypeMetric_UnderlineThickness_Get(global::System.IntPtr instance)
		{
			// Setup
			double unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.TypeMetric_UnderlineThickness_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, JpegOptimizer_CompressFile, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.ImageOptimizers.JpegOptimizer+NativeMethods+X64", "JpegOptimizer_CompressFile")]
		public static void JpegOptimizer_CompressFile(
					global::System.IntPtr input, 
					global::System.IntPtr output, 
					bool progressive, 
					bool lossless, 
					global::System.UIntPtr quality, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.JpegOptimizer_CompressFile(
									input, 
									output, 
									(progressive ? 1 : 0), 
									(lossless ? 1 : 0), 
									quality, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, JpegOptimizer_CompressStream, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x00041EA8] ImageMagick_ImageOptimizers_JpegOptimizer_ReadWriteStreamDelegate__Magick_NET_Q16_AnyCPU__ImageMagick_ImageOptimizers__JpegOptimizer_ReadWriteStreamDelegate__Magick_NET_Q16_AnyCPU, [fwd] [in] [EETypeRva:0x00041EA8] ImageMagick_ImageOptimizers_JpegOptimizer_ReadWriteStreamDelegate__Magick_NET_Q16_AnyCPU__ImageMagick_ImageOptimizers__JpegOptimizer_ReadWriteStreamDelegate__Magick_NET_Q16_AnyCPU, [fwd] [in] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.ImageOptimizers.JpegOptimizer+NativeMethods+X64", "JpegOptimizer_CompressStream")]
		public static void JpegOptimizer_CompressStream(
					global::ImageMagick.ImageOptimizers.JpegOptimizer_ReadWriteStreamDelegate__Magick_NET_Q16_AnyCPU reader, 
					global::ImageMagick.ImageOptimizers.JpegOptimizer_ReadWriteStreamDelegate__Magick_NET_Q16_AnyCPU writer, 
					bool progressive, 
					bool lossless, 
					global::System.UIntPtr quality, 
					out global::System.IntPtr exception)
		{
			// Setup
			void* unsafe_reader = default(void*);
			void* unsafe_writer = default(void*);
			try
			{
				// Marshalling
				unsafe_reader = (void*)global::System.Runtime.InteropServices.McgMarshal.GetStubForPInvokeDelegate(
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("ImageMagick.ImageOptimizers.JpegOptimizer+ReadWriteStreamDelegate,Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Cultu" +
											"re=neutral, PublicKeyToken=2004825badfa91ec"), 
									reader
								);
				unsafe_writer = (void*)global::System.Runtime.InteropServices.McgMarshal.GetStubForPInvokeDelegate(
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("ImageMagick.ImageOptimizers.JpegOptimizer+ReadWriteStreamDelegate,Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Cultu" +
											"re=neutral, PublicKeyToken=2004825badfa91ec"), 
									writer
								);
				fixed (global::System.IntPtr* pinned_exception = &(exception))
				{
					// Call to native method
					global::__Interop.Magick_Native_Q16_x64_dll_PInvokes.JpegOptimizer_CompressStream(
										unsafe_reader, 
										unsafe_writer, 
										(progressive ? 1 : 0), 
										(lossless ? 1 : 0), 
										quality, 
										pinned_exception
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				}
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(reader);
				global::System.GC.KeepAlive(writer);
			}
		}
	}

	/// <summary>
	/// P/Invoke class for module 'Magick.Native-Q16-x86.dll'
	/// </summary>
	public unsafe static partial class Magick_Native_Q16_x86_dll
	{
		// Signature, MagickColor_Create, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickColor+NativeMethods+X86", "MagickColor_Create")]
		public static global::System.IntPtr MagickColor_Create()
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickColor_Create();
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, MagickColor_Dispose, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickColor+NativeMethods+X86", "MagickColor_Dispose")]
		public static void MagickColor_Dispose(global::System.IntPtr instance)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickColor_Dispose(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, MagickColor_Count_Get, [fwd] [return] [EETypeRva:0x000419B0] ulong__unsigned __int64, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickColor+NativeMethods+X86", "MagickColor_Count_Get")]
		public static ulong MagickColor_Count_Get(global::System.IntPtr instance)
		{
			// Setup
			ulong unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickColor_Count_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, MagickColor_Red_Get, [fwd] [return] [EETypeRva:0x000419B0] ushort__unsigned short, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickColor+NativeMethods+X86", "MagickColor_Red_Get")]
		public static ushort MagickColor_Red_Get(global::System.IntPtr instance)
		{
			// Setup
			ushort unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickColor_Red_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, MagickColor_Red_Set, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] ushort__unsigned short, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickColor+NativeMethods+X86", "MagickColor_Red_Set")]
		public static void MagickColor_Red_Set(
					global::System.IntPtr instance, 
					ushort value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickColor_Red_Set(
								instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, MagickColor_Green_Get, [fwd] [return] [EETypeRva:0x000419B0] ushort__unsigned short, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickColor+NativeMethods+X86", "MagickColor_Green_Get")]
		public static ushort MagickColor_Green_Get(global::System.IntPtr instance)
		{
			// Setup
			ushort unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickColor_Green_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, MagickColor_Green_Set, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] ushort__unsigned short, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickColor+NativeMethods+X86", "MagickColor_Green_Set")]
		public static void MagickColor_Green_Set(
					global::System.IntPtr instance, 
					ushort value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickColor_Green_Set(
								instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, MagickColor_Blue_Get, [fwd] [return] [EETypeRva:0x000419B0] ushort__unsigned short, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickColor+NativeMethods+X86", "MagickColor_Blue_Get")]
		public static ushort MagickColor_Blue_Get(global::System.IntPtr instance)
		{
			// Setup
			ushort unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickColor_Blue_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, MagickColor_Blue_Set, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] ushort__unsigned short, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickColor+NativeMethods+X86", "MagickColor_Blue_Set")]
		public static void MagickColor_Blue_Set(
					global::System.IntPtr instance, 
					ushort value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickColor_Blue_Set(
								instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, MagickColor_Alpha_Get, [fwd] [return] [EETypeRva:0x000419B0] ushort__unsigned short, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickColor+NativeMethods+X86", "MagickColor_Alpha_Get")]
		public static ushort MagickColor_Alpha_Get(global::System.IntPtr instance)
		{
			// Setup
			ushort unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickColor_Alpha_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, MagickColor_Alpha_Set, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] ushort__unsigned short, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickColor+NativeMethods+X86", "MagickColor_Alpha_Set")]
		public static void MagickColor_Alpha_Set(
					global::System.IntPtr instance, 
					ushort value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickColor_Alpha_Set(
								instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, MagickColor_Black_Get, [fwd] [return] [EETypeRva:0x000419B0] ushort__unsigned short, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickColor+NativeMethods+X86", "MagickColor_Black_Get")]
		public static ushort MagickColor_Black_Get(global::System.IntPtr instance)
		{
			// Setup
			ushort unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickColor_Black_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, MagickColor_Black_Set, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] ushort__unsigned short, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickColor+NativeMethods+X86", "MagickColor_Black_Set")]
		public static void MagickColor_Black_Set(
					global::System.IntPtr instance, 
					ushort value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickColor_Black_Set(
								instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, MagickColor_IsCMYK_Get, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickColor+NativeMethods+X86", "MagickColor_IsCMYK_Get")]
		public static bool MagickColor_IsCMYK_Get(global::System.IntPtr instance)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickColor_IsCMYK_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value != 0;
		}

		// Signature, MagickColor_IsCMYK_Set, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00040848] bool__System.Boolean, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickColor+NativeMethods+X86", "MagickColor_IsCMYK_Set")]
		public static void MagickColor_IsCMYK_Set(
					global::System.IntPtr instance, 
					bool value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickColor_IsCMYK_Set(
								instance, 
								(value ? 1 : 0)
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, MagickColor_FuzzyEquals, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] ushort__unsigned short, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickColor+NativeMethods+X86", "MagickColor_FuzzyEquals")]
		public static bool MagickColor_FuzzyEquals(
					global::System.IntPtr Instance, 
					global::System.IntPtr other, 
					ushort fuzz)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickColor_FuzzyEquals(
								Instance, 
								other, 
								fuzz
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value != 0;
		}

		// Signature, MagickColor_Initialize, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickColor+NativeMethods+X86", "MagickColor_Initialize")]
		public static bool MagickColor_Initialize(
					global::System.IntPtr Instance, 
					global::System.IntPtr value)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickColor_Initialize(
								Instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value != 0;
		}

		// Signature, MagickColorCollection_DisposeList, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickColorCollection+NativeMethods+X86", "MagickColorCollection_DisposeList")]
		public static void MagickColorCollection_DisposeList(global::System.IntPtr list)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickColorCollection_DisposeList(list);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, MagickColorCollection_GetInstance, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickColorCollection+NativeMethods+X86", "MagickColorCollection_GetInstance")]
		public static global::System.IntPtr MagickColorCollection_GetInstance(
					global::System.IntPtr list, 
					global::System.UIntPtr index)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickColorCollection_GetInstance(
								list, 
								index
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, DrawingWand_Create, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingWand+NativeMethods+X86", "DrawingWand_Create")]
		public static global::System.IntPtr DrawingWand_Create(
					global::System.IntPtr image, 
					global::System.IntPtr settings)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.DrawingWand_Create(
								image, 
								settings
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, DrawingWand_Dispose, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingWand+NativeMethods+X86", "DrawingWand_Dispose")]
		public static void DrawingWand_Dispose(global::System.IntPtr instance)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.DrawingWand_Dispose(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, DrawingWand_Affine, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingWand+NativeMethods+X86", "DrawingWand_Affine")]
		public static void DrawingWand_Affine(
					global::System.IntPtr Instance, 
					double scaleX, 
					double scaleY, 
					double shearX, 
					double shearY, 
					double translateX, 
					double translateY, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.DrawingWand_Affine(
									Instance, 
									scaleX, 
									scaleY, 
									shearX, 
									shearY, 
									translateX, 
									translateY, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, DrawingWand_Alpha, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingWand+NativeMethods+X86", "DrawingWand_Alpha")]
		public static void DrawingWand_Alpha(
					global::System.IntPtr Instance, 
					double x, 
					double y, 
					global::System.UIntPtr paintMethod, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.DrawingWand_Alpha(
									Instance, 
									x, 
									y, 
									paintMethod, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, DrawingWand_Arc, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingWand+NativeMethods+X86", "DrawingWand_Arc")]
		public static void DrawingWand_Arc(
					global::System.IntPtr Instance, 
					double startX, 
					double startY, 
					double endX, 
					double endY, 
					double startDegrees, 
					double endDegrees, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.DrawingWand_Arc(
									Instance, 
									startX, 
									startY, 
									endX, 
									endY, 
									startDegrees, 
									endDegrees, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, DrawingWand_Bezier, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingWand+NativeMethods+X86", "DrawingWand_Bezier")]
		public static void DrawingWand_Bezier(
					global::System.IntPtr Instance, 
					global::System.IntPtr coordinates, 
					global::System.UIntPtr length, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.DrawingWand_Bezier(
									Instance, 
									coordinates, 
									length, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, DrawingWand_BorderColor, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingWand+NativeMethods+X86", "DrawingWand_BorderColor")]
		public static void DrawingWand_BorderColor(
					global::System.IntPtr Instance, 
					global::System.IntPtr value, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.DrawingWand_BorderColor(
									Instance, 
									value, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, DrawingWand_Circle, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingWand+NativeMethods+X86", "DrawingWand_Circle")]
		public static void DrawingWand_Circle(
					global::System.IntPtr Instance, 
					double originX, 
					double originY, 
					double perimeterX, 
					double perimeterY, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.DrawingWand_Circle(
									Instance, 
									originX, 
									originY, 
									perimeterX, 
									perimeterY, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, DrawingWand_ClipPath, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingWand+NativeMethods+X86", "DrawingWand_ClipPath")]
		public static void DrawingWand_ClipPath(
					global::System.IntPtr Instance, 
					global::System.IntPtr value, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.DrawingWand_ClipPath(
									Instance, 
									value, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, DrawingWand_ClipRule, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingWand+NativeMethods+X86", "DrawingWand_ClipRule")]
		public static void DrawingWand_ClipRule(
					global::System.IntPtr Instance, 
					global::System.UIntPtr value, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.DrawingWand_ClipRule(
									Instance, 
									value, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, DrawingWand_ClipUnits, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingWand+NativeMethods+X86", "DrawingWand_ClipUnits")]
		public static void DrawingWand_ClipUnits(
					global::System.IntPtr Instance, 
					global::System.UIntPtr value, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.DrawingWand_ClipUnits(
									Instance, 
									value, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, DrawingWand_Color, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingWand+NativeMethods+X86", "DrawingWand_Color")]
		public static void DrawingWand_Color(
					global::System.IntPtr Instance, 
					double x, 
					double y, 
					global::System.UIntPtr paintMethod, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.DrawingWand_Color(
									Instance, 
									x, 
									y, 
									paintMethod, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, DrawingWand_Composite, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingWand+NativeMethods+X86", "DrawingWand_Composite")]
		public static void DrawingWand_Composite(
					global::System.IntPtr Instance, 
					double x, 
					double y, 
					double width, 
					double height, 
					global::System.UIntPtr compositeOperator, 
					global::System.IntPtr image, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.DrawingWand_Composite(
									Instance, 
									x, 
									y, 
									width, 
									height, 
									compositeOperator, 
									image, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, DrawingWand_Density, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingWand+NativeMethods+X86", "DrawingWand_Density")]
		public static void DrawingWand_Density(
					global::System.IntPtr Instance, 
					global::System.IntPtr value, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.DrawingWand_Density(
									Instance, 
									value, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, DrawingWand_Ellipse, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingWand+NativeMethods+X86", "DrawingWand_Ellipse")]
		public static void DrawingWand_Ellipse(
					global::System.IntPtr Instance, 
					double originX, 
					double originY, 
					double radiusX, 
					double radiusY, 
					double startDegrees, 
					double endDegrees, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.DrawingWand_Ellipse(
									Instance, 
									originX, 
									originY, 
									radiusX, 
									radiusY, 
									startDegrees, 
									endDegrees, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, DrawingWand_FillColor, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingWand+NativeMethods+X86", "DrawingWand_FillColor")]
		public static void DrawingWand_FillColor(
					global::System.IntPtr Instance, 
					global::System.IntPtr value, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.DrawingWand_FillColor(
									Instance, 
									value, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, DrawingWand_FillOpacity, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingWand+NativeMethods+X86", "DrawingWand_FillOpacity")]
		public static void DrawingWand_FillOpacity(
					global::System.IntPtr Instance, 
					double value, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.DrawingWand_FillOpacity(
									Instance, 
									value, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, DrawingWand_FillPatternUrl, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingWand+NativeMethods+X86", "DrawingWand_FillPatternUrl")]
		public static void DrawingWand_FillPatternUrl(
					global::System.IntPtr Instance, 
					global::System.IntPtr url, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.DrawingWand_FillPatternUrl(
									Instance, 
									url, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, DrawingWand_FillRule, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingWand+NativeMethods+X86", "DrawingWand_FillRule")]
		public static void DrawingWand_FillRule(
					global::System.IntPtr Instance, 
					global::System.UIntPtr value, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.DrawingWand_FillRule(
									Instance, 
									value, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, DrawingWand_Font, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingWand+NativeMethods+X86", "DrawingWand_Font")]
		public static void DrawingWand_Font(
					global::System.IntPtr Instance, 
					global::System.IntPtr fontName, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.DrawingWand_Font(
									Instance, 
									fontName, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, DrawingWand_FontFamily, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingWand+NativeMethods+X86", "DrawingWand_FontFamily")]
		public static void DrawingWand_FontFamily(
					global::System.IntPtr Instance, 
					global::System.IntPtr family, 
					global::System.UIntPtr style, 
					global::System.UIntPtr weight, 
					global::System.UIntPtr stretch, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.DrawingWand_FontFamily(
									Instance, 
									family, 
									style, 
									weight, 
									stretch, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, DrawingWand_FontPointSize, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingWand+NativeMethods+X86", "DrawingWand_FontPointSize")]
		public static void DrawingWand_FontPointSize(
					global::System.IntPtr Instance, 
					double value, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.DrawingWand_FontPointSize(
									Instance, 
									value, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, DrawingWand_FontTypeMetrics, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingWand+NativeMethods+X86", "DrawingWand_FontTypeMetrics")]
		public static global::System.IntPtr DrawingWand_FontTypeMetrics(
					global::System.IntPtr Instance, 
					global::System.IntPtr text, 
					bool ignoreNewLines, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.DrawingWand_FontTypeMetrics(
									Instance, 
									text, 
									(ignoreNewLines ? 1 : 0), 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, DrawingWand_Gravity, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingWand+NativeMethods+X86", "DrawingWand_Gravity")]
		public static void DrawingWand_Gravity(
					global::System.IntPtr Instance, 
					global::System.UIntPtr value, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.DrawingWand_Gravity(
									Instance, 
									value, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, DrawingWand_Line, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingWand+NativeMethods+X86", "DrawingWand_Line")]
		public static void DrawingWand_Line(
					global::System.IntPtr Instance, 
					double startX, 
					double startY, 
					double endX, 
					double endY, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.DrawingWand_Line(
									Instance, 
									startX, 
									startY, 
									endX, 
									endY, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, DrawingWand_PathArcAbs, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingWand+NativeMethods+X86", "DrawingWand_PathArcAbs")]
		public static void DrawingWand_PathArcAbs(
					global::System.IntPtr Instance, 
					double x, 
					double y, 
					double radiusX, 
					double radiusY, 
					double rotationX, 
					bool useLargeArc, 
					bool useSweep, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.DrawingWand_PathArcAbs(
									Instance, 
									x, 
									y, 
									radiusX, 
									radiusY, 
									rotationX, 
									(useLargeArc ? 1 : 0), 
									(useSweep ? 1 : 0), 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, DrawingWand_PathArcRel, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingWand+NativeMethods+X86", "DrawingWand_PathArcRel")]
		public static void DrawingWand_PathArcRel(
					global::System.IntPtr Instance, 
					double x, 
					double y, 
					double radiusX, 
					double radiusY, 
					double rotationX, 
					bool useLargeArc, 
					bool useSweep, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.DrawingWand_PathArcRel(
									Instance, 
									x, 
									y, 
									radiusX, 
									radiusY, 
									rotationX, 
									(useLargeArc ? 1 : 0), 
									(useSweep ? 1 : 0), 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, DrawingWand_Render, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingWand+NativeMethods+X86", "DrawingWand_Render")]
		public static void DrawingWand_Render(
					global::System.IntPtr Instance, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.DrawingWand_Render(
									Instance, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, DrawingWand_Text, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingWand+NativeMethods+X86", "DrawingWand_Text")]
		public static void DrawingWand_Text(
					global::System.IntPtr Instance, 
					double x, 
					double y, 
					global::System.IntPtr text, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.DrawingWand_Text(
									Instance, 
									x, 
									y, 
									text, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, DrawingWand_PathClose, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingWand+NativeMethods+X86", "DrawingWand_PathClose")]
		public static void DrawingWand_PathClose(
					global::System.IntPtr Instance, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.DrawingWand_PathClose(
									Instance, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, DrawingWand_PathCurveToAbs, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingWand+NativeMethods+X86", "DrawingWand_PathCurveToAbs")]
		public static void DrawingWand_PathCurveToAbs(
					global::System.IntPtr Instance, 
					double x1, 
					double y1, 
					double x2, 
					double y2, 
					double x, 
					double y, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.DrawingWand_PathCurveToAbs(
									Instance, 
									x1, 
									y1, 
									x2, 
									y2, 
									x, 
									y, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, DrawingWand_PathCurveToRel, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingWand+NativeMethods+X86", "DrawingWand_PathCurveToRel")]
		public static void DrawingWand_PathCurveToRel(
					global::System.IntPtr Instance, 
					double x1, 
					double y1, 
					double x2, 
					double y2, 
					double x, 
					double y, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.DrawingWand_PathCurveToRel(
									Instance, 
									x1, 
									y1, 
									x2, 
									y2, 
									x, 
									y, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, DrawingWand_PathFinish, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingWand+NativeMethods+X86", "DrawingWand_PathFinish")]
		public static void DrawingWand_PathFinish(
					global::System.IntPtr Instance, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.DrawingWand_PathFinish(
									Instance, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, DrawingWand_PathLineToAbs, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingWand+NativeMethods+X86", "DrawingWand_PathLineToAbs")]
		public static void DrawingWand_PathLineToAbs(
					global::System.IntPtr Instance, 
					double x, 
					double y, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.DrawingWand_PathLineToAbs(
									Instance, 
									x, 
									y, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, DrawingWand_PathLineToRel, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingWand+NativeMethods+X86", "DrawingWand_PathLineToRel")]
		public static void DrawingWand_PathLineToRel(
					global::System.IntPtr Instance, 
					double x, 
					double y, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.DrawingWand_PathLineToRel(
									Instance, 
									x, 
									y, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, DrawingWand_PathLineToHorizontalAbs, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingWand+NativeMethods+X86", "DrawingWand_PathLineToHorizontalAbs")]
		public static void DrawingWand_PathLineToHorizontalAbs(
					global::System.IntPtr Instance, 
					double x, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.DrawingWand_PathLineToHorizontalAbs(
									Instance, 
									x, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, DrawingWand_PathLineToHorizontalRel, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingWand+NativeMethods+X86", "DrawingWand_PathLineToHorizontalRel")]
		public static void DrawingWand_PathLineToHorizontalRel(
					global::System.IntPtr Instance, 
					double x, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.DrawingWand_PathLineToHorizontalRel(
									Instance, 
									x, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, DrawingWand_PathLineToVerticalAbs, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingWand+NativeMethods+X86", "DrawingWand_PathLineToVerticalAbs")]
		public static void DrawingWand_PathLineToVerticalAbs(
					global::System.IntPtr Instance, 
					double y, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.DrawingWand_PathLineToVerticalAbs(
									Instance, 
									y, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, DrawingWand_PathLineToVerticalRel, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingWand+NativeMethods+X86", "DrawingWand_PathLineToVerticalRel")]
		public static void DrawingWand_PathLineToVerticalRel(
					global::System.IntPtr Instance, 
					double y, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.DrawingWand_PathLineToVerticalRel(
									Instance, 
									y, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, DrawingWand_PathMoveToAbs, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingWand+NativeMethods+X86", "DrawingWand_PathMoveToAbs")]
		public static void DrawingWand_PathMoveToAbs(
					global::System.IntPtr Instance, 
					double x, 
					double y, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.DrawingWand_PathMoveToAbs(
									Instance, 
									x, 
									y, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, DrawingWand_PathMoveToRel, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingWand+NativeMethods+X86", "DrawingWand_PathMoveToRel")]
		public static void DrawingWand_PathMoveToRel(
					global::System.IntPtr Instance, 
					double x, 
					double y, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.DrawingWand_PathMoveToRel(
									Instance, 
									x, 
									y, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, DrawingWand_PathQuadraticCurveToAbs, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingWand+NativeMethods+X86", "DrawingWand_PathQuadraticCurveToAbs")]
		public static void DrawingWand_PathQuadraticCurveToAbs(
					global::System.IntPtr Instance, 
					double x1, 
					double y1, 
					double x, 
					double y, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.DrawingWand_PathQuadraticCurveToAbs(
									Instance, 
									x1, 
									y1, 
									x, 
									y, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, DrawingWand_PathQuadraticCurveToRel, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingWand+NativeMethods+X86", "DrawingWand_PathQuadraticCurveToRel")]
		public static void DrawingWand_PathQuadraticCurveToRel(
					global::System.IntPtr Instance, 
					double x1, 
					double y1, 
					double x, 
					double y, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.DrawingWand_PathQuadraticCurveToRel(
									Instance, 
									x1, 
									y1, 
									x, 
									y, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, DrawingWand_PathSmoothCurveToAbs, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingWand+NativeMethods+X86", "DrawingWand_PathSmoothCurveToAbs")]
		public static void DrawingWand_PathSmoothCurveToAbs(
					global::System.IntPtr Instance, 
					double x2, 
					double y2, 
					double x, 
					double y, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.DrawingWand_PathSmoothCurveToAbs(
									Instance, 
									x2, 
									y2, 
									x, 
									y, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, DrawingWand_PathSmoothCurveToRel, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingWand+NativeMethods+X86", "DrawingWand_PathSmoothCurveToRel")]
		public static void DrawingWand_PathSmoothCurveToRel(
					global::System.IntPtr Instance, 
					double x2, 
					double y2, 
					double x, 
					double y, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.DrawingWand_PathSmoothCurveToRel(
									Instance, 
									x2, 
									y2, 
									x, 
									y, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, DrawingWand_PathSmoothQuadraticCurveToAbs, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingWand+NativeMethods+X86", "DrawingWand_PathSmoothQuadraticCurveToAbs")]
		public static void DrawingWand_PathSmoothQuadraticCurveToAbs(
					global::System.IntPtr Instance, 
					double x, 
					double y, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.DrawingWand_PathSmoothQuadraticCurveToAbs(
									Instance, 
									x, 
									y, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, DrawingWand_PathSmoothQuadraticCurveToRel, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingWand+NativeMethods+X86", "DrawingWand_PathSmoothQuadraticCurveToRel")]
		public static void DrawingWand_PathSmoothQuadraticCurveToRel(
					global::System.IntPtr Instance, 
					double x, 
					double y, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.DrawingWand_PathSmoothQuadraticCurveToRel(
									Instance, 
									x, 
									y, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, DrawingWand_PathStart, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingWand+NativeMethods+X86", "DrawingWand_PathStart")]
		public static void DrawingWand_PathStart(
					global::System.IntPtr Instance, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.DrawingWand_PathStart(
									Instance, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, DrawingWand_Point, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingWand+NativeMethods+X86", "DrawingWand_Point")]
		public static void DrawingWand_Point(
					global::System.IntPtr Instance, 
					double x, 
					double y, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.DrawingWand_Point(
									Instance, 
									x, 
									y, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, DrawingWand_Polygon, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingWand+NativeMethods+X86", "DrawingWand_Polygon")]
		public static void DrawingWand_Polygon(
					global::System.IntPtr Instance, 
					global::System.IntPtr coordinates, 
					global::System.UIntPtr length, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.DrawingWand_Polygon(
									Instance, 
									coordinates, 
									length, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, DrawingWand_Polyline, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingWand+NativeMethods+X86", "DrawingWand_Polyline")]
		public static void DrawingWand_Polyline(
					global::System.IntPtr Instance, 
					global::System.IntPtr coordinates, 
					global::System.UIntPtr length, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.DrawingWand_Polyline(
									Instance, 
									coordinates, 
									length, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, DrawingWand_PopClipPath, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingWand+NativeMethods+X86", "DrawingWand_PopClipPath")]
		public static void DrawingWand_PopClipPath(
					global::System.IntPtr Instance, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.DrawingWand_PopClipPath(
									Instance, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, DrawingWand_PopGraphicContext, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingWand+NativeMethods+X86", "DrawingWand_PopGraphicContext")]
		public static void DrawingWand_PopGraphicContext(
					global::System.IntPtr Instance, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.DrawingWand_PopGraphicContext(
									Instance, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, DrawingWand_PopPattern, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingWand+NativeMethods+X86", "DrawingWand_PopPattern")]
		public static void DrawingWand_PopPattern(
					global::System.IntPtr Instance, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.DrawingWand_PopPattern(
									Instance, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, DrawingWand_PushClipPath, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingWand+NativeMethods+X86", "DrawingWand_PushClipPath")]
		public static void DrawingWand_PushClipPath(
					global::System.IntPtr Instance, 
					global::System.IntPtr clipPath, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.DrawingWand_PushClipPath(
									Instance, 
									clipPath, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, DrawingWand_PushGraphicContext, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingWand+NativeMethods+X86", "DrawingWand_PushGraphicContext")]
		public static void DrawingWand_PushGraphicContext(
					global::System.IntPtr Instance, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.DrawingWand_PushGraphicContext(
									Instance, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, DrawingWand_PushPattern, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingWand+NativeMethods+X86", "DrawingWand_PushPattern")]
		public static void DrawingWand_PushPattern(
					global::System.IntPtr Instance, 
					global::System.IntPtr id, 
					double x, 
					double y, 
					double width, 
					double height, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.DrawingWand_PushPattern(
									Instance, 
									id, 
									x, 
									y, 
									width, 
									height, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, DrawingWand_Rectangle, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingWand+NativeMethods+X86", "DrawingWand_Rectangle")]
		public static void DrawingWand_Rectangle(
					global::System.IntPtr Instance, 
					double upperLeftX, 
					double upperLeftY, 
					double lowerRightX, 
					double lowerRightY, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.DrawingWand_Rectangle(
									Instance, 
									upperLeftX, 
									upperLeftY, 
									lowerRightX, 
									lowerRightY, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, DrawingWand_Rotation, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingWand+NativeMethods+X86", "DrawingWand_Rotation")]
		public static void DrawingWand_Rotation(
					global::System.IntPtr Instance, 
					double angle, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.DrawingWand_Rotation(
									Instance, 
									angle, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, DrawingWand_RoundRectangle, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingWand+NativeMethods+X86", "DrawingWand_RoundRectangle")]
		public static void DrawingWand_RoundRectangle(
					global::System.IntPtr Instance, 
					double upperLeftX, 
					double upperLeftY, 
					double lowerRightX, 
					double lowerRightY, 
					double cornerWidth, 
					double cornerHeight, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.DrawingWand_RoundRectangle(
									Instance, 
									upperLeftX, 
									upperLeftY, 
									lowerRightX, 
									lowerRightY, 
									cornerWidth, 
									cornerHeight, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, DrawingWand_Scaling, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingWand+NativeMethods+X86", "DrawingWand_Scaling")]
		public static void DrawingWand_Scaling(
					global::System.IntPtr Instance, 
					double x, 
					double y, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.DrawingWand_Scaling(
									Instance, 
									x, 
									y, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, DrawingWand_SkewX, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingWand+NativeMethods+X86", "DrawingWand_SkewX")]
		public static void DrawingWand_SkewX(
					global::System.IntPtr Instance, 
					double angle, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.DrawingWand_SkewX(
									Instance, 
									angle, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, DrawingWand_SkewY, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingWand+NativeMethods+X86", "DrawingWand_SkewY")]
		public static void DrawingWand_SkewY(
					global::System.IntPtr Instance, 
					double angle, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.DrawingWand_SkewY(
									Instance, 
									angle, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, DrawingWand_StrokeAntialias, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingWand+NativeMethods+X86", "DrawingWand_StrokeAntialias")]
		public static void DrawingWand_StrokeAntialias(
					global::System.IntPtr Instance, 
					bool isEnabled, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.DrawingWand_StrokeAntialias(
									Instance, 
									(isEnabled ? 1 : 0), 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, DrawingWand_StrokeColor, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingWand+NativeMethods+X86", "DrawingWand_StrokeColor")]
		public static void DrawingWand_StrokeColor(
					global::System.IntPtr Instance, 
					global::System.IntPtr value, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.DrawingWand_StrokeColor(
									Instance, 
									value, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, DrawingWand_StrokeDashArray, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00042A40] rg_double__double *, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingWand+NativeMethods+X86", "DrawingWand_StrokeDashArray")]
		public static void DrawingWand_StrokeDashArray(
					global::System.IntPtr Instance, 
					double[] dash, 
					global::System.UIntPtr length, 
					out global::System.IntPtr exception)
		{
			// Setup
			double* unsafe_dash;
			// Marshalling
			fixed (double* pinned_dash = ((dash != null 
						&& dash.Length == 0) ? new double[1] : dash))
			{
				unsafe_dash = (double*)pinned_dash;
				fixed (global::System.IntPtr* pinned_exception = &(exception))
				{
					// Call to native method
					global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.DrawingWand_StrokeDashArray(
										Instance, 
										unsafe_dash, 
										length, 
										pinned_exception
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				}
			}
			// Return
		}

		// Signature, DrawingWand_StrokeDashOffset, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingWand+NativeMethods+X86", "DrawingWand_StrokeDashOffset")]
		public static void DrawingWand_StrokeDashOffset(
					global::System.IntPtr Instance, 
					double value, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.DrawingWand_StrokeDashOffset(
									Instance, 
									value, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, DrawingWand_StrokeLineCap, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingWand+NativeMethods+X86", "DrawingWand_StrokeLineCap")]
		public static void DrawingWand_StrokeLineCap(
					global::System.IntPtr Instance, 
					global::System.UIntPtr value, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.DrawingWand_StrokeLineCap(
									Instance, 
									value, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, DrawingWand_StrokeLineJoin, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingWand+NativeMethods+X86", "DrawingWand_StrokeLineJoin")]
		public static void DrawingWand_StrokeLineJoin(
					global::System.IntPtr Instance, 
					global::System.UIntPtr value, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.DrawingWand_StrokeLineJoin(
									Instance, 
									value, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, DrawingWand_StrokeMiterLimit, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingWand+NativeMethods+X86", "DrawingWand_StrokeMiterLimit")]
		public static void DrawingWand_StrokeMiterLimit(
					global::System.IntPtr Instance, 
					global::System.UIntPtr value, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.DrawingWand_StrokeMiterLimit(
									Instance, 
									value, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, DrawingWand_StrokeOpacity, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingWand+NativeMethods+X86", "DrawingWand_StrokeOpacity")]
		public static void DrawingWand_StrokeOpacity(
					global::System.IntPtr Instance, 
					double value, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.DrawingWand_StrokeOpacity(
									Instance, 
									value, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, DrawingWand_StrokePatternUrl, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingWand+NativeMethods+X86", "DrawingWand_StrokePatternUrl")]
		public static void DrawingWand_StrokePatternUrl(
					global::System.IntPtr Instance, 
					global::System.IntPtr value, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.DrawingWand_StrokePatternUrl(
									Instance, 
									value, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, DrawingWand_StrokeWidth, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingWand+NativeMethods+X86", "DrawingWand_StrokeWidth")]
		public static void DrawingWand_StrokeWidth(
					global::System.IntPtr Instance, 
					double value, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.DrawingWand_StrokeWidth(
									Instance, 
									value, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, DrawingWand_TextAlignment, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingWand+NativeMethods+X86", "DrawingWand_TextAlignment")]
		public static void DrawingWand_TextAlignment(
					global::System.IntPtr Instance, 
					global::System.UIntPtr value, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.DrawingWand_TextAlignment(
									Instance, 
									value, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, DrawingWand_TextAntialias, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingWand+NativeMethods+X86", "DrawingWand_TextAntialias")]
		public static void DrawingWand_TextAntialias(
					global::System.IntPtr Instance, 
					bool isEnabled, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.DrawingWand_TextAntialias(
									Instance, 
									(isEnabled ? 1 : 0), 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, DrawingWand_TextDecoration, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingWand+NativeMethods+X86", "DrawingWand_TextDecoration")]
		public static void DrawingWand_TextDecoration(
					global::System.IntPtr Instance, 
					global::System.UIntPtr value, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.DrawingWand_TextDecoration(
									Instance, 
									value, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, DrawingWand_TextDirection, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingWand+NativeMethods+X86", "DrawingWand_TextDirection")]
		public static void DrawingWand_TextDirection(
					global::System.IntPtr Instance, 
					global::System.UIntPtr value, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.DrawingWand_TextDirection(
									Instance, 
									value, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, DrawingWand_TextEncoding, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingWand+NativeMethods+X86", "DrawingWand_TextEncoding")]
		public static void DrawingWand_TextEncoding(
					global::System.IntPtr Instance, 
					global::System.IntPtr encoding, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.DrawingWand_TextEncoding(
									Instance, 
									encoding, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, DrawingWand_TextInterlineSpacing, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingWand+NativeMethods+X86", "DrawingWand_TextInterlineSpacing")]
		public static void DrawingWand_TextInterlineSpacing(
					global::System.IntPtr Instance, 
					double value, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.DrawingWand_TextInterlineSpacing(
									Instance, 
									value, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, DrawingWand_TextInterwordSpacing, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingWand+NativeMethods+X86", "DrawingWand_TextInterwordSpacing")]
		public static void DrawingWand_TextInterwordSpacing(
					global::System.IntPtr Instance, 
					double value, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.DrawingWand_TextInterwordSpacing(
									Instance, 
									value, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, DrawingWand_TextKerning, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingWand+NativeMethods+X86", "DrawingWand_TextKerning")]
		public static void DrawingWand_TextKerning(
					global::System.IntPtr Instance, 
					double value, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.DrawingWand_TextKerning(
									Instance, 
									value, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, DrawingWand_TextUnderColor, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingWand+NativeMethods+X86", "DrawingWand_TextUnderColor")]
		public static void DrawingWand_TextUnderColor(
					global::System.IntPtr Instance, 
					global::System.IntPtr color, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.DrawingWand_TextUnderColor(
									Instance, 
									color, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, DrawingWand_Translation, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingWand+NativeMethods+X86", "DrawingWand_Translation")]
		public static void DrawingWand_Translation(
					global::System.IntPtr Instance, 
					double x, 
					double y, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.DrawingWand_Translation(
									Instance, 
									x, 
									y, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, DrawingWand_Viewbox, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingWand+NativeMethods+X86", "DrawingWand_Viewbox")]
		public static void DrawingWand_Viewbox(
					global::System.IntPtr Instance, 
					double upperLeftX, 
					double upperLeftY, 
					double lowerRightX, 
					double lowerRightY, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.DrawingWand_Viewbox(
									Instance, 
									upperLeftX, 
									upperLeftY, 
									lowerRightX, 
									lowerRightY, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, MagickExceptionHelper_Description, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickExceptionHelper+NativeMethods+X86", "MagickExceptionHelper_Description")]
		public static global::System.IntPtr MagickExceptionHelper_Description(global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickExceptionHelper_Description(exception);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, MagickExceptionHelper_Dispose, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickExceptionHelper+NativeMethods+X86", "MagickExceptionHelper_Dispose")]
		public static void MagickExceptionHelper_Dispose(global::System.IntPtr exception)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickExceptionHelper_Dispose(exception);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, MagickExceptionHelper_Message, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickExceptionHelper+NativeMethods+X86", "MagickExceptionHelper_Message")]
		public static global::System.IntPtr MagickExceptionHelper_Message(global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickExceptionHelper_Message(exception);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, MagickExceptionHelper_Related, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickExceptionHelper+NativeMethods+X86", "MagickExceptionHelper_Related")]
		public static global::System.IntPtr MagickExceptionHelper_Related(
					global::System.IntPtr exception, 
					global::System.UIntPtr index)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickExceptionHelper_Related(
								exception, 
								index
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, MagickExceptionHelper_RelatedCount, [fwd] [return] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickExceptionHelper+NativeMethods+X86", "MagickExceptionHelper_RelatedCount")]
		public static global::System.UIntPtr MagickExceptionHelper_RelatedCount(global::System.IntPtr exception)
		{
			// Setup
			global::System.UIntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickExceptionHelper_RelatedCount(exception);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, MagickExceptionHelper_Severity, [fwd] [return] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickExceptionHelper+NativeMethods+X86", "MagickExceptionHelper_Severity")]
		public static global::System.UIntPtr MagickExceptionHelper_Severity(global::System.IntPtr exception)
		{
			// Setup
			global::System.UIntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickExceptionHelper_Severity(exception);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, Environment_Initialize, [fwd] [return] [EETypeRva:0x00041F6C] void__void, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.Environment+NativeMethods+X86", "Environment_Initialize")]
		public static void Environment_Initialize()
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.Environment_Initialize();
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, Environment_SetEnv, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.Environment+NativeMethods+X86", "Environment_SetEnv")]
		public static void Environment_SetEnv(
					global::System.IntPtr name, 
					global::System.IntPtr value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.Environment_SetEnv(
								name, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, MagickMemory_Relinquish, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickMemory+NativeMethods+X86", "MagickMemory_Relinquish")]
		public static void MagickMemory_Relinquish(global::System.IntPtr value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickMemory_Relinquish(value);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, Magick_Delegates_Get, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickNET+NativeMethods+X86", "Magick_Delegates_Get")]
		public static global::System.IntPtr Magick_Delegates_Get()
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.Magick_Delegates_Get();
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, Magick_Features_Get, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickNET+NativeMethods+X86", "Magick_Features_Get")]
		public static global::System.IntPtr Magick_Features_Get()
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.Magick_Features_Get();
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, Magick_GetFonts, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickNET+NativeMethods+X86", "Magick_GetFonts")]
		public static global::System.IntPtr Magick_GetFonts(
					out global::System.UIntPtr length, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.UIntPtr* pinned_length = &(length))
				fixed (global::System.IntPtr* pinned_exception = &(exception))
				{
					// Call to native method
					unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.Magick_GetFonts(
										pinned_length, 
										pinned_exception
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				}
			// Return
			return unsafe___value;
		}

		// Signature, Magick_GetFontName, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickNET+NativeMethods+X86", "Magick_GetFontName")]
		public static global::System.IntPtr Magick_GetFontName(
					global::System.IntPtr instance, 
					global::System.UIntPtr index)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.Magick_GetFontName(
								instance, 
								index
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, Magick_GetFontFamily, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickNET+NativeMethods+X86", "Magick_GetFontFamily")]
		public static global::System.IntPtr Magick_GetFontFamily(
					global::System.IntPtr instance, 
					global::System.UIntPtr index)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.Magick_GetFontFamily(
								instance, 
								index
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, Magick_DisposeFonts, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickNET+NativeMethods+X86", "Magick_DisposeFonts")]
		public static void Magick_DisposeFonts(global::System.IntPtr instance)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.Magick_DisposeFonts(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, Magick_SetLogDelegate, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x00041EA8] ImageMagick_MagickNET_LogDelegate__Magick_NET_Q16_AnyCPU__ImageMagick__MagickNET_LogDelegate__Magick_NET_Q16_AnyCPU, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickNET+NativeMethods+X86", "Magick_SetLogDelegate")]
		public static void Magick_SetLogDelegate(global::ImageMagick.MagickNET_LogDelegate__Magick_NET_Q16_AnyCPU method)
		{
			// Setup
			void* unsafe_method = default(void*);
			try
			{
				// Marshalling
				unsafe_method = (void*)global::System.Runtime.InteropServices.McgMarshal.GetStubForPInvokeDelegate(
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("ImageMagick.MagickNET+LogDelegate,Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=20048" +
											"25badfa91ec"), 
									method
								);
				// Call to native method
				global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.Magick_SetLogDelegate(unsafe_method);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(method);
			}
		}

		// Signature, Magick_SetLogEvents, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickNET+NativeMethods+X86", "Magick_SetLogEvents")]
		public static void Magick_SetLogEvents(global::System.IntPtr events)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.Magick_SetLogEvents(events);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, Magick_SetRandomSeed, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] long____int64, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickNET+NativeMethods+X86", "Magick_SetRandomSeed")]
		public static void Magick_SetRandomSeed(long value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.Magick_SetRandomSeed(value);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, MagickFormatInfo_Description_Get, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickFormatInfo+NativeMethods+X86", "MagickFormatInfo_Description_Get")]
		public static global::System.IntPtr MagickFormatInfo_Description_Get(global::System.IntPtr instance)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickFormatInfo_Description_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, MagickFormatInfo_CanReadMultithreaded_Get, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickFormatInfo+NativeMethods+X86", "MagickFormatInfo_CanReadMultithreaded_Get")]
		public static bool MagickFormatInfo_CanReadMultithreaded_Get(global::System.IntPtr instance)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickFormatInfo_CanReadMultithreaded_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value != 0;
		}

		// Signature, MagickFormatInfo_CanWriteMultithreaded_Get, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickFormatInfo+NativeMethods+X86", "MagickFormatInfo_CanWriteMultithreaded_Get")]
		public static bool MagickFormatInfo_CanWriteMultithreaded_Get(global::System.IntPtr instance)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickFormatInfo_CanWriteMultithreaded_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value != 0;
		}

		// Signature, MagickFormatInfo_Format_Get, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickFormatInfo+NativeMethods+X86", "MagickFormatInfo_Format_Get")]
		public static global::System.IntPtr MagickFormatInfo_Format_Get(global::System.IntPtr instance)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickFormatInfo_Format_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, MagickFormatInfo_IsMultiFrame_Get, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickFormatInfo+NativeMethods+X86", "MagickFormatInfo_IsMultiFrame_Get")]
		public static bool MagickFormatInfo_IsMultiFrame_Get(global::System.IntPtr instance)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickFormatInfo_IsMultiFrame_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value != 0;
		}

		// Signature, MagickFormatInfo_IsReadable_Get, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickFormatInfo+NativeMethods+X86", "MagickFormatInfo_IsReadable_Get")]
		public static bool MagickFormatInfo_IsReadable_Get(global::System.IntPtr instance)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickFormatInfo_IsReadable_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value != 0;
		}

		// Signature, MagickFormatInfo_IsWritable_Get, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickFormatInfo+NativeMethods+X86", "MagickFormatInfo_IsWritable_Get")]
		public static bool MagickFormatInfo_IsWritable_Get(global::System.IntPtr instance)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickFormatInfo_IsWritable_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value != 0;
		}

		// Signature, MagickFormatInfo_MimeType_Get, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickFormatInfo+NativeMethods+X86", "MagickFormatInfo_MimeType_Get")]
		public static global::System.IntPtr MagickFormatInfo_MimeType_Get(global::System.IntPtr instance)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickFormatInfo_MimeType_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, MagickFormatInfo_Module_Get, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickFormatInfo+NativeMethods+X86", "MagickFormatInfo_Module_Get")]
		public static global::System.IntPtr MagickFormatInfo_Module_Get(global::System.IntPtr instance)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickFormatInfo_Module_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, MagickFormatInfo_CreateList, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickFormatInfo+NativeMethods+X86", "MagickFormatInfo_CreateList")]
		public static global::System.IntPtr MagickFormatInfo_CreateList(
					out global::System.UIntPtr length, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.UIntPtr* pinned_length = &(length))
				fixed (global::System.IntPtr* pinned_exception = &(exception))
				{
					// Call to native method
					unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickFormatInfo_CreateList(
										pinned_length, 
										pinned_exception
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				}
			// Return
			return unsafe___value;
		}

		// Signature, MagickFormatInfo_DisposeList, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickFormatInfo+NativeMethods+X86", "MagickFormatInfo_DisposeList")]
		public static void MagickFormatInfo_DisposeList(
					global::System.IntPtr instance, 
					global::System.UIntPtr length)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickFormatInfo_DisposeList(
								instance, 
								length
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, MagickFormatInfo_GetInfo, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickFormatInfo+NativeMethods+X86", "MagickFormatInfo_GetInfo")]
		public static global::System.IntPtr MagickFormatInfo_GetInfo(
					global::System.IntPtr list, 
					global::System.UIntPtr index, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickFormatInfo_GetInfo(
									list, 
									index, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickFormatInfo_GetInfoByName, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickFormatInfo+NativeMethods+X86", "MagickFormatInfo_GetInfoByName")]
		public static global::System.IntPtr MagickFormatInfo_GetInfoByName(
					global::System.IntPtr name, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickFormatInfo_GetInfoByName(
									name, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickFormatInfo_Unregister, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickFormatInfo+NativeMethods+X86", "MagickFormatInfo_Unregister")]
		public static bool MagickFormatInfo_Unregister(global::System.IntPtr name)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickFormatInfo_Unregister(name);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value != 0;
		}

		// Signature, MagickImage_Create, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_Create")]
		public static global::System.IntPtr MagickImage_Create(
					global::System.IntPtr settings, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_Create(
									settings, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_Dispose, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_Dispose")]
		public static void MagickImage_Dispose(global::System.IntPtr instance)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_Dispose(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, MagickImage_AnimationDelay_Get, [fwd] [return] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_AnimationDelay_Get")]
		public static global::System.UIntPtr MagickImage_AnimationDelay_Get(global::System.IntPtr instance)
		{
			// Setup
			global::System.UIntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_AnimationDelay_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_AnimationDelay_Set, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_AnimationDelay_Set")]
		public static void MagickImage_AnimationDelay_Set(
					global::System.IntPtr instance, 
					global::System.UIntPtr value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_AnimationDelay_Set(
								instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, MagickImage_AnimationIterations_Get, [fwd] [return] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_AnimationIterations_Get")]
		public static global::System.UIntPtr MagickImage_AnimationIterations_Get(global::System.IntPtr instance)
		{
			// Setup
			global::System.UIntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_AnimationIterations_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_AnimationIterations_Set, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_AnimationIterations_Set")]
		public static void MagickImage_AnimationIterations_Set(
					global::System.IntPtr instance, 
					global::System.UIntPtr value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_AnimationIterations_Set(
								instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, MagickImage_AnimationTicksPerSecond_Get, [fwd] [return] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_AnimationTicksPerSecond_Get")]
		public static global::System.UIntPtr MagickImage_AnimationTicksPerSecond_Get(global::System.IntPtr instance)
		{
			// Setup
			global::System.UIntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_AnimationTicksPerSecond_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_AnimationTicksPerSecond_Set, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_AnimationTicksPerSecond_Set")]
		public static void MagickImage_AnimationTicksPerSecond_Set(
					global::System.IntPtr instance, 
					global::System.UIntPtr value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_AnimationTicksPerSecond_Set(
								instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, MagickImage_BackgroundColor_Get, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_BackgroundColor_Get")]
		public static global::System.IntPtr MagickImage_BackgroundColor_Get(global::System.IntPtr instance)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_BackgroundColor_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_BackgroundColor_Set, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_BackgroundColor_Set")]
		public static void MagickImage_BackgroundColor_Set(
					global::System.IntPtr instance, 
					global::System.IntPtr value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_BackgroundColor_Set(
								instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, MagickImage_BaseHeight_Get, [fwd] [return] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_BaseHeight_Get")]
		public static global::System.UIntPtr MagickImage_BaseHeight_Get(global::System.IntPtr instance)
		{
			// Setup
			global::System.UIntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_BaseHeight_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_BaseWidth_Get, [fwd] [return] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_BaseWidth_Get")]
		public static global::System.UIntPtr MagickImage_BaseWidth_Get(global::System.IntPtr instance)
		{
			// Setup
			global::System.UIntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_BaseWidth_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_BlackPointCompensation_Get, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_BlackPointCompensation_Get")]
		public static bool MagickImage_BlackPointCompensation_Get(global::System.IntPtr instance)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_BlackPointCompensation_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value != 0;
		}

		// Signature, MagickImage_BlackPointCompensation_Set, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00040848] bool__System.Boolean, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_BlackPointCompensation_Set")]
		public static void MagickImage_BlackPointCompensation_Set(
					global::System.IntPtr instance, 
					bool value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_BlackPointCompensation_Set(
								instance, 
								(value ? 1 : 0)
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, MagickImage_BorderColor_Get, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_BorderColor_Get")]
		public static global::System.IntPtr MagickImage_BorderColor_Get(global::System.IntPtr instance)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_BorderColor_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_BorderColor_Set, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_BorderColor_Set")]
		public static void MagickImage_BorderColor_Set(
					global::System.IntPtr instance, 
					global::System.IntPtr value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_BorderColor_Set(
								instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, MagickImage_BoundingBox_Get, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_BoundingBox_Get")]
		public static global::System.IntPtr MagickImage_BoundingBox_Get(global::System.IntPtr instance)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_BoundingBox_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_ChannelCount_Get, [fwd] [return] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_ChannelCount_Get")]
		public static global::System.UIntPtr MagickImage_ChannelCount_Get(global::System.IntPtr instance)
		{
			// Setup
			global::System.UIntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_ChannelCount_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_ChromaBluePrimary_Get, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_ChromaBluePrimary_Get")]
		public static global::System.IntPtr MagickImage_ChromaBluePrimary_Get(global::System.IntPtr instance)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_ChromaBluePrimary_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_ChromaBluePrimary_Set, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_ChromaBluePrimary_Set")]
		public static void MagickImage_ChromaBluePrimary_Set(
					global::System.IntPtr instance, 
					global::System.IntPtr value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_ChromaBluePrimary_Set(
								instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, MagickImage_ChromaGreenPrimary_Get, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_ChromaGreenPrimary_Get")]
		public static global::System.IntPtr MagickImage_ChromaGreenPrimary_Get(global::System.IntPtr instance)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_ChromaGreenPrimary_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_ChromaGreenPrimary_Set, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_ChromaGreenPrimary_Set")]
		public static void MagickImage_ChromaGreenPrimary_Set(
					global::System.IntPtr instance, 
					global::System.IntPtr value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_ChromaGreenPrimary_Set(
								instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, MagickImage_ChromaRedPrimary_Get, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_ChromaRedPrimary_Get")]
		public static global::System.IntPtr MagickImage_ChromaRedPrimary_Get(global::System.IntPtr instance)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_ChromaRedPrimary_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_ChromaRedPrimary_Set, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_ChromaRedPrimary_Set")]
		public static void MagickImage_ChromaRedPrimary_Set(
					global::System.IntPtr instance, 
					global::System.IntPtr value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_ChromaRedPrimary_Set(
								instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, MagickImage_ChromaWhitePoint_Get, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_ChromaWhitePoint_Get")]
		public static global::System.IntPtr MagickImage_ChromaWhitePoint_Get(global::System.IntPtr instance)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_ChromaWhitePoint_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_ChromaWhitePoint_Set, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_ChromaWhitePoint_Set")]
		public static void MagickImage_ChromaWhitePoint_Set(
					global::System.IntPtr instance, 
					global::System.IntPtr value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_ChromaWhitePoint_Set(
								instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, MagickImage_ClassType_Get, [fwd] [return] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_ClassType_Get")]
		public static global::System.UIntPtr MagickImage_ClassType_Get(
					global::System.IntPtr instance, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.UIntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_ClassType_Get(
									instance, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_ClassType_Set, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_ClassType_Set")]
		public static void MagickImage_ClassType_Set(
					global::System.IntPtr instance, 
					global::System.UIntPtr value, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_ClassType_Set(
									instance, 
									value, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, MagickImage_ColorFuzz_Get, [fwd] [return] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_ColorFuzz_Get")]
		public static double MagickImage_ColorFuzz_Get(
					global::System.IntPtr instance, 
					out global::System.IntPtr exception)
		{
			// Setup
			double unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_ColorFuzz_Get(
									instance, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_ColorFuzz_Set, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_ColorFuzz_Set")]
		public static void MagickImage_ColorFuzz_Set(
					global::System.IntPtr instance, 
					double value, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_ColorFuzz_Set(
									instance, 
									value, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, MagickImage_ColormapSize_Get, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_ColormapSize_Get")]
		public static global::System.IntPtr MagickImage_ColormapSize_Get(
					global::System.IntPtr instance, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_ColormapSize_Get(
									instance, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_ColormapSize_Set, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_ColormapSize_Set")]
		public static void MagickImage_ColormapSize_Set(
					global::System.IntPtr instance, 
					global::System.IntPtr value, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_ColormapSize_Set(
									instance, 
									value, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, MagickImage_ColorSpace_Get, [fwd] [return] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_ColorSpace_Get")]
		public static global::System.UIntPtr MagickImage_ColorSpace_Get(
					global::System.IntPtr instance, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.UIntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_ColorSpace_Get(
									instance, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_ColorSpace_Set, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_ColorSpace_Set")]
		public static void MagickImage_ColorSpace_Set(
					global::System.IntPtr instance, 
					global::System.UIntPtr value, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_ColorSpace_Set(
									instance, 
									value, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, MagickImage_ColorType_Get, [fwd] [return] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_ColorType_Get")]
		public static global::System.UIntPtr MagickImage_ColorType_Get(
					global::System.IntPtr instance, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.UIntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_ColorType_Get(
									instance, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_ColorType_Set, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_ColorType_Set")]
		public static void MagickImage_ColorType_Set(
					global::System.IntPtr instance, 
					global::System.UIntPtr value, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_ColorType_Set(
									instance, 
									value, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, MagickImage_Compose_Get, [fwd] [return] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_Compose_Get")]
		public static global::System.UIntPtr MagickImage_Compose_Get(global::System.IntPtr instance)
		{
			// Setup
			global::System.UIntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_Compose_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_Compose_Set, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_Compose_Set")]
		public static void MagickImage_Compose_Set(
					global::System.IntPtr instance, 
					global::System.UIntPtr value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_Compose_Set(
								instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, MagickImage_Compression_Get, [fwd] [return] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_Compression_Get")]
		public static global::System.UIntPtr MagickImage_Compression_Get(global::System.IntPtr instance)
		{
			// Setup
			global::System.UIntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_Compression_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_Depth_Get, [fwd] [return] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_Depth_Get")]
		public static global::System.UIntPtr MagickImage_Depth_Get(global::System.IntPtr instance)
		{
			// Setup
			global::System.UIntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_Depth_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_Depth_Set, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_Depth_Set")]
		public static void MagickImage_Depth_Set(
					global::System.IntPtr instance, 
					global::System.UIntPtr value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_Depth_Set(
								instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, MagickImage_Endian_Get, [fwd] [return] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_Endian_Get")]
		public static global::System.UIntPtr MagickImage_Endian_Get(global::System.IntPtr instance)
		{
			// Setup
			global::System.UIntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_Endian_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_Endian_Set, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_Endian_Set")]
		public static void MagickImage_Endian_Set(
					global::System.IntPtr instance, 
					global::System.UIntPtr value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_Endian_Set(
								instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, MagickImage_EncodingGeometry_Get, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_EncodingGeometry_Get")]
		public static global::System.IntPtr MagickImage_EncodingGeometry_Get(global::System.IntPtr instance)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_EncodingGeometry_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_FileName_Get, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_FileName_Get")]
		public static global::System.IntPtr MagickImage_FileName_Get(global::System.IntPtr instance)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_FileName_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_FileName_Set, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_FileName_Set")]
		public static void MagickImage_FileName_Set(
					global::System.IntPtr instance, 
					global::System.IntPtr value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_FileName_Set(
								instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, MagickImage_FilterType_Get, [fwd] [return] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_FilterType_Get")]
		public static global::System.UIntPtr MagickImage_FilterType_Get(global::System.IntPtr instance)
		{
			// Setup
			global::System.UIntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_FilterType_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_FilterType_Set, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_FilterType_Set")]
		public static void MagickImage_FilterType_Set(
					global::System.IntPtr instance, 
					global::System.UIntPtr value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_FilterType_Set(
								instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, MagickImage_Format_Get, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_Format_Get")]
		public static global::System.IntPtr MagickImage_Format_Get(global::System.IntPtr instance)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_Format_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_Format_Set, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_Format_Set")]
		public static void MagickImage_Format_Set(
					global::System.IntPtr instance, 
					global::System.IntPtr value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_Format_Set(
								instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, MagickImage_Gamma_Get, [fwd] [return] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_Gamma_Get")]
		public static double MagickImage_Gamma_Get(global::System.IntPtr instance)
		{
			// Setup
			double unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_Gamma_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_GifDisposeMethod_Get, [fwd] [return] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_GifDisposeMethod_Get")]
		public static global::System.UIntPtr MagickImage_GifDisposeMethod_Get(global::System.IntPtr instance)
		{
			// Setup
			global::System.UIntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_GifDisposeMethod_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_GifDisposeMethod_Set, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_GifDisposeMethod_Set")]
		public static void MagickImage_GifDisposeMethod_Set(
					global::System.IntPtr instance, 
					global::System.UIntPtr value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_GifDisposeMethod_Set(
								instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, MagickImage_Height_Get, [fwd] [return] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_Height_Get")]
		public static global::System.UIntPtr MagickImage_Height_Get(global::System.IntPtr instance)
		{
			// Setup
			global::System.UIntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_Height_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_HasAlpha_Get, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_HasAlpha_Get")]
		public static bool MagickImage_HasAlpha_Get(
					global::System.IntPtr instance, 
					out global::System.IntPtr exception)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_HasAlpha_Get(
									instance, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value != 0;
		}

		// Signature, MagickImage_HasAlpha_Set, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_HasAlpha_Set")]
		public static void MagickImage_HasAlpha_Set(
					global::System.IntPtr instance, 
					bool value, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_HasAlpha_Set(
									instance, 
									(value ? 1 : 0), 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, MagickImage_Interlace_Get, [fwd] [return] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_Interlace_Get")]
		public static global::System.UIntPtr MagickImage_Interlace_Get(global::System.IntPtr instance)
		{
			// Setup
			global::System.UIntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_Interlace_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_Interlace_Set, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_Interlace_Set")]
		public static void MagickImage_Interlace_Set(
					global::System.IntPtr instance, 
					global::System.UIntPtr value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_Interlace_Set(
								instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, MagickImage_Interpolate_Get, [fwd] [return] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_Interpolate_Get")]
		public static global::System.UIntPtr MagickImage_Interpolate_Get(global::System.IntPtr instance)
		{
			// Setup
			global::System.UIntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_Interpolate_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_Interpolate_Set, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_Interpolate_Set")]
		public static void MagickImage_Interpolate_Set(
					global::System.IntPtr instance, 
					global::System.UIntPtr value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_Interpolate_Set(
								instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, MagickImage_IsOpaque_Get, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_IsOpaque_Get")]
		public static bool MagickImage_IsOpaque_Get(
					global::System.IntPtr instance, 
					out global::System.IntPtr exception)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_IsOpaque_Get(
									instance, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value != 0;
		}

		// Signature, MagickImage_MatteColor_Get, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_MatteColor_Get")]
		public static global::System.IntPtr MagickImage_MatteColor_Get(global::System.IntPtr instance)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_MatteColor_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_MatteColor_Set, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_MatteColor_Set")]
		public static void MagickImage_MatteColor_Set(
					global::System.IntPtr instance, 
					global::System.IntPtr value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_MatteColor_Set(
								instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, MagickImage_MeanErrorPerPixel_Get, [fwd] [return] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_MeanErrorPerPixel_Get")]
		public static double MagickImage_MeanErrorPerPixel_Get(global::System.IntPtr instance)
		{
			// Setup
			double unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_MeanErrorPerPixel_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_NormalizedMaximumError_Get, [fwd] [return] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_NormalizedMaximumError_Get")]
		public static double MagickImage_NormalizedMaximumError_Get(global::System.IntPtr instance)
		{
			// Setup
			double unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_NormalizedMaximumError_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_NormalizedMeanError_Get, [fwd] [return] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_NormalizedMeanError_Get")]
		public static double MagickImage_NormalizedMeanError_Get(global::System.IntPtr instance)
		{
			// Setup
			double unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_NormalizedMeanError_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_Orientation_Get, [fwd] [return] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_Orientation_Get")]
		public static global::System.UIntPtr MagickImage_Orientation_Get(global::System.IntPtr instance)
		{
			// Setup
			global::System.UIntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_Orientation_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_Orientation_Set, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_Orientation_Set")]
		public static void MagickImage_Orientation_Set(
					global::System.IntPtr instance, 
					global::System.UIntPtr value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_Orientation_Set(
								instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, MagickImage_Page_Get, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_Page_Get")]
		public static global::System.IntPtr MagickImage_Page_Get(global::System.IntPtr instance)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_Page_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_Page_Set, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_Page_Set")]
		public static void MagickImage_Page_Set(
					global::System.IntPtr instance, 
					global::System.IntPtr value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_Page_Set(
								instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, MagickImage_Quality_Get, [fwd] [return] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_Quality_Get")]
		public static global::System.UIntPtr MagickImage_Quality_Get(global::System.IntPtr instance)
		{
			// Setup
			global::System.UIntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_Quality_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_Quality_Set, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_Quality_Set")]
		public static void MagickImage_Quality_Set(
					global::System.IntPtr instance, 
					global::System.UIntPtr value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_Quality_Set(
								instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, MagickImage_RenderingIntent_Get, [fwd] [return] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_RenderingIntent_Get")]
		public static global::System.UIntPtr MagickImage_RenderingIntent_Get(global::System.IntPtr instance)
		{
			// Setup
			global::System.UIntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_RenderingIntent_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_RenderingIntent_Set, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_RenderingIntent_Set")]
		public static void MagickImage_RenderingIntent_Set(
					global::System.IntPtr instance, 
					global::System.UIntPtr value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_RenderingIntent_Set(
								instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, MagickImage_ResolutionUnits_Get, [fwd] [return] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_ResolutionUnits_Get")]
		public static global::System.UIntPtr MagickImage_ResolutionUnits_Get(global::System.IntPtr instance)
		{
			// Setup
			global::System.UIntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_ResolutionUnits_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_ResolutionUnits_Set, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_ResolutionUnits_Set")]
		public static void MagickImage_ResolutionUnits_Set(
					global::System.IntPtr instance, 
					global::System.UIntPtr value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_ResolutionUnits_Set(
								instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, MagickImage_ResolutionX_Get, [fwd] [return] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_ResolutionX_Get")]
		public static double MagickImage_ResolutionX_Get(global::System.IntPtr instance)
		{
			// Setup
			double unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_ResolutionX_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_ResolutionX_Set, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_ResolutionX_Set")]
		public static void MagickImage_ResolutionX_Set(
					global::System.IntPtr instance, 
					double value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_ResolutionX_Set(
								instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, MagickImage_ResolutionY_Get, [fwd] [return] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_ResolutionY_Get")]
		public static double MagickImage_ResolutionY_Get(global::System.IntPtr instance)
		{
			// Setup
			double unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_ResolutionY_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_ResolutionY_Set, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_ResolutionY_Set")]
		public static void MagickImage_ResolutionY_Set(
					global::System.IntPtr instance, 
					double value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_ResolutionY_Set(
								instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, MagickImage_Signature_Get, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_Signature_Get")]
		public static global::System.IntPtr MagickImage_Signature_Get(
					global::System.IntPtr instance, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_Signature_Get(
									instance, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_TotalColors_Get, [fwd] [return] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_TotalColors_Get")]
		public static global::System.UIntPtr MagickImage_TotalColors_Get(
					global::System.IntPtr instance, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.UIntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_TotalColors_Get(
									instance, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_VirtualPixelMethod_Get, [fwd] [return] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_VirtualPixelMethod_Get")]
		public static global::System.UIntPtr MagickImage_VirtualPixelMethod_Get(
					global::System.IntPtr instance, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.UIntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_VirtualPixelMethod_Get(
									instance, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_VirtualPixelMethod_Set, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_VirtualPixelMethod_Set")]
		public static void MagickImage_VirtualPixelMethod_Set(
					global::System.IntPtr instance, 
					global::System.UIntPtr value, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_VirtualPixelMethod_Set(
									instance, 
									value, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, MagickImage_Width_Get, [fwd] [return] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_Width_Get")]
		public static global::System.UIntPtr MagickImage_Width_Get(global::System.IntPtr instance)
		{
			// Setup
			global::System.UIntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_Width_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_AdaptiveBlur, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_AdaptiveBlur")]
		public static global::System.IntPtr MagickImage_AdaptiveBlur(
					global::System.IntPtr Instance, 
					double radius, 
					double sigma, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_AdaptiveBlur(
									Instance, 
									radius, 
									sigma, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_AdaptiveResize, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_AdaptiveResize")]
		public static global::System.IntPtr MagickImage_AdaptiveResize(
					global::System.IntPtr Instance, 
					global::System.IntPtr geometry, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_AdaptiveResize(
									Instance, 
									geometry, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_AdaptiveSharpen, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_AdaptiveSharpen")]
		public static global::System.IntPtr MagickImage_AdaptiveSharpen(
					global::System.IntPtr Instance, 
					double radius, 
					double sigma, 
					global::System.UIntPtr channels, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_AdaptiveSharpen(
									Instance, 
									radius, 
									sigma, 
									channels, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_AdaptiveThreshold, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_AdaptiveThreshold")]
		public static global::System.IntPtr MagickImage_AdaptiveThreshold(
					global::System.IntPtr Instance, 
					global::System.UIntPtr width, 
					global::System.UIntPtr height, 
					double bias, 
					global::System.UIntPtr channels, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_AdaptiveThreshold(
									Instance, 
									width, 
									height, 
									bias, 
									channels, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_AddNoise, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_AddNoise")]
		public static global::System.IntPtr MagickImage_AddNoise(
					global::System.IntPtr Instance, 
					global::System.UIntPtr noiseType, 
					double attenuate, 
					global::System.UIntPtr channels, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_AddNoise(
									Instance, 
									noiseType, 
									attenuate, 
									channels, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_AddProfile, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00042A40] rg_byte__unsigned char *, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_AddProfile")]
		public static void MagickImage_AddProfile(
					global::System.IntPtr Instance, 
					global::System.IntPtr name, 
					byte[] datum, 
					global::System.UIntPtr length, 
					out global::System.IntPtr exception)
		{
			// Setup
			byte* unsafe_datum;
			// Marshalling
			fixed (byte* pinned_datum = ((datum != null 
						&& datum.Length == 0) ? new byte[1] : datum))
			{
				unsafe_datum = (byte*)pinned_datum;
				fixed (global::System.IntPtr* pinned_exception = &(exception))
				{
					// Call to native method
					global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_AddProfile(
										Instance, 
										name, 
										unsafe_datum, 
										length, 
										pinned_exception
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				}
			}
			// Return
		}

		// Signature, MagickImage_AffineTransform, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_AffineTransform")]
		public static global::System.IntPtr MagickImage_AffineTransform(
					global::System.IntPtr Instance, 
					double scaleX, 
					double scaleY, 
					double shearX, 
					double shearY, 
					double translateX, 
					double translateY, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_AffineTransform(
									Instance, 
									scaleX, 
									scaleY, 
									shearX, 
									shearY, 
									translateX, 
									translateY, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_Annotate, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_Annotate")]
		public static void MagickImage_Annotate(
					global::System.IntPtr Instance, 
					global::System.IntPtr settings, 
					global::System.IntPtr text, 
					global::System.IntPtr boundingArea, 
					global::System.UIntPtr gravity, 
					double degrees, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_Annotate(
									Instance, 
									settings, 
									text, 
									boundingArea, 
									gravity, 
									degrees, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, MagickImage_AnnotateGravity, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_AnnotateGravity")]
		public static void MagickImage_AnnotateGravity(
					global::System.IntPtr Instance, 
					global::System.IntPtr settings, 
					global::System.IntPtr text, 
					global::System.UIntPtr gravity, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_AnnotateGravity(
									Instance, 
									settings, 
									text, 
									gravity, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, MagickImage_AutoGamma, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_AutoGamma")]
		public static void MagickImage_AutoGamma(
					global::System.IntPtr Instance, 
					global::System.UIntPtr channels, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_AutoGamma(
									Instance, 
									channels, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, MagickImage_AutoLevel, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_AutoLevel")]
		public static void MagickImage_AutoLevel(
					global::System.IntPtr Instance, 
					global::System.UIntPtr channels, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_AutoLevel(
									Instance, 
									channels, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, MagickImage_AutoOrient, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_AutoOrient")]
		public static global::System.IntPtr MagickImage_AutoOrient(
					global::System.IntPtr Instance, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_AutoOrient(
									Instance, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_AutoThreshold, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_AutoThreshold")]
		public static void MagickImage_AutoThreshold(
					global::System.IntPtr Instance, 
					global::System.UIntPtr method, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_AutoThreshold(
									Instance, 
									method, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, MagickImage_BlackThreshold, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_BlackThreshold")]
		public static void MagickImage_BlackThreshold(
					global::System.IntPtr Instance, 
					global::System.IntPtr threshold, 
					global::System.UIntPtr channels, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_BlackThreshold(
									Instance, 
									threshold, 
									channels, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, MagickImage_BlueShift, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_BlueShift")]
		public static global::System.IntPtr MagickImage_BlueShift(
					global::System.IntPtr Instance, 
					double factor, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_BlueShift(
									Instance, 
									factor, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_Blur, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_Blur")]
		public static global::System.IntPtr MagickImage_Blur(
					global::System.IntPtr Instance, 
					double radius, 
					double sigma, 
					global::System.UIntPtr channels, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_Blur(
									Instance, 
									radius, 
									sigma, 
									channels, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_Border, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_Border")]
		public static global::System.IntPtr MagickImage_Border(
					global::System.IntPtr Instance, 
					global::System.IntPtr value, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_Border(
									Instance, 
									value, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_BrightnessContrast, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_BrightnessContrast")]
		public static void MagickImage_BrightnessContrast(
					global::System.IntPtr Instance, 
					double brightness, 
					double contrast, 
					global::System.UIntPtr channels, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_BrightnessContrast(
									Instance, 
									brightness, 
									contrast, 
									channels, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, MagickImage_CannyEdge, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_CannyEdge")]
		public static global::System.IntPtr MagickImage_CannyEdge(
					global::System.IntPtr Instance, 
					double radius, 
					double sigma, 
					double lower, 
					double upper, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_CannyEdge(
									Instance, 
									radius, 
									sigma, 
									lower, 
									upper, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_ChannelOffset, [fwd] [return] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_ChannelOffset")]
		public static global::System.UIntPtr MagickImage_ChannelOffset(
					global::System.IntPtr Instance, 
					global::System.UIntPtr channel)
		{
			// Setup
			global::System.UIntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_ChannelOffset(
								Instance, 
								channel
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_Charcoal, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_Charcoal")]
		public static global::System.IntPtr MagickImage_Charcoal(
					global::System.IntPtr Instance, 
					double radius, 
					double sigma, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_Charcoal(
									Instance, 
									radius, 
									sigma, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_Chop, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_Chop")]
		public static global::System.IntPtr MagickImage_Chop(
					global::System.IntPtr Instance, 
					global::System.IntPtr geometry, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_Chop(
									Instance, 
									geometry, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_Clahe, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_Clahe")]
		public static void MagickImage_Clahe(
					global::System.IntPtr Instance, 
					global::System.UIntPtr xTiles, 
					global::System.UIntPtr yTiles, 
					global::System.UIntPtr numberBins, 
					double clipLimit, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_Clahe(
									Instance, 
									xTiles, 
									yTiles, 
									numberBins, 
									clipLimit, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, MagickImage_Clamp, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_Clamp")]
		public static void MagickImage_Clamp(
					global::System.IntPtr Instance, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_Clamp(
									Instance, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, MagickImage_ClampChannel, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_ClampChannel")]
		public static void MagickImage_ClampChannel(
					global::System.IntPtr Instance, 
					global::System.UIntPtr channels, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_ClampChannel(
									Instance, 
									channels, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, MagickImage_Clip, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_Clip")]
		public static void MagickImage_Clip(
					global::System.IntPtr Instance, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_Clip(
									Instance, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, MagickImage_ClipPath, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_ClipPath")]
		public static void MagickImage_ClipPath(
					global::System.IntPtr Instance, 
					global::System.IntPtr pathName, 
					bool inside, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_ClipPath(
									Instance, 
									pathName, 
									(inside ? 1 : 0), 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, MagickImage_Clone, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_Clone")]
		public static global::System.IntPtr MagickImage_Clone(
					global::System.IntPtr Instance, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_Clone(
									Instance, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_CloneArea, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_CloneArea")]
		public static global::System.IntPtr MagickImage_CloneArea(
					global::System.IntPtr Instance, 
					global::System.UIntPtr width, 
					global::System.UIntPtr height, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_CloneArea(
									Instance, 
									width, 
									height, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_Clut, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_Clut")]
		public static void MagickImage_Clut(
					global::System.IntPtr Instance, 
					global::System.IntPtr image, 
					global::System.UIntPtr method, 
					global::System.UIntPtr channels, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_Clut(
									Instance, 
									image, 
									method, 
									channels, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, MagickImage_ColorDecisionList, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_ColorDecisionList")]
		public static void MagickImage_ColorDecisionList(
					global::System.IntPtr Instance, 
					global::System.IntPtr fileName, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_ColorDecisionList(
									Instance, 
									fileName, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, MagickImage_Colorize, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_Colorize")]
		public static global::System.IntPtr MagickImage_Colorize(
					global::System.IntPtr Instance, 
					global::System.IntPtr color, 
					global::System.IntPtr blend, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_Colorize(
									Instance, 
									color, 
									blend, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_ColorMatrix, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_ColorMatrix")]
		public static global::System.IntPtr MagickImage_ColorMatrix(
					global::System.IntPtr Instance, 
					global::System.IntPtr matrix, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_ColorMatrix(
									Instance, 
									matrix, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_ColorThreshold, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_ColorThreshold")]
		public static void MagickImage_ColorThreshold(
					global::System.IntPtr Instance, 
					global::System.IntPtr startColor, 
					global::System.IntPtr stopColor, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_ColorThreshold(
									Instance, 
									startColor, 
									stopColor, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, MagickImage_Compare, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] double__double, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_Compare")]
		public static global::System.IntPtr MagickImage_Compare(
					global::System.IntPtr Instance, 
					global::System.IntPtr image, 
					global::System.UIntPtr metric, 
					global::System.UIntPtr channels, 
					out double distortion, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (double* pinned_distortion = &(distortion))
				fixed (global::System.IntPtr* pinned_exception = &(exception))
				{
					// Call to native method
					unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_Compare(
										Instance, 
										image, 
										metric, 
										channels, 
										pinned_distortion, 
										pinned_exception
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_CompareDistortion, [fwd] [return] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_CompareDistortion")]
		public static double MagickImage_CompareDistortion(
					global::System.IntPtr Instance, 
					global::System.IntPtr image, 
					global::System.UIntPtr metric, 
					global::System.UIntPtr channels, 
					out global::System.IntPtr exception)
		{
			// Setup
			double unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_CompareDistortion(
									Instance, 
									image, 
									metric, 
									channels, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_Composite, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_Composite")]
		public static void MagickImage_Composite(
					global::System.IntPtr Instance, 
					global::System.IntPtr image, 
					global::System.IntPtr x, 
					global::System.IntPtr y, 
					global::System.UIntPtr compose, 
					global::System.UIntPtr channels, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_Composite(
									Instance, 
									image, 
									x, 
									y, 
									compose, 
									channels, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, MagickImage_CompositeGravity, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_CompositeGravity")]
		public static void MagickImage_CompositeGravity(
					global::System.IntPtr Instance, 
					global::System.IntPtr image, 
					global::System.UIntPtr gravity, 
					global::System.IntPtr x, 
					global::System.IntPtr y, 
					global::System.UIntPtr compose, 
					global::System.UIntPtr channels, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_CompositeGravity(
									Instance, 
									image, 
									gravity, 
									x, 
									y, 
									compose, 
									channels, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, MagickImage_ConnectedComponents, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_ConnectedComponents")]
		public static global::System.IntPtr MagickImage_ConnectedComponents(
					global::System.IntPtr Instance, 
					global::System.UIntPtr connectivity, 
					out global::System.IntPtr objects, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_objects = &(objects))
				fixed (global::System.IntPtr* pinned_exception = &(exception))
				{
					// Call to native method
					unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_ConnectedComponents(
										Instance, 
										connectivity, 
										pinned_objects, 
										pinned_exception
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_Contrast, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_Contrast")]
		public static void MagickImage_Contrast(
					global::System.IntPtr Instance, 
					bool enhance, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_Contrast(
									Instance, 
									(enhance ? 1 : 0), 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, MagickImage_ContrastStretch, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_ContrastStretch")]
		public static void MagickImage_ContrastStretch(
					global::System.IntPtr Instance, 
					double blackPoint, 
					double whitePoint, 
					global::System.UIntPtr channels, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_ContrastStretch(
									Instance, 
									blackPoint, 
									whitePoint, 
									channels, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, MagickImage_ConvexHull, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_ConvexHull")]
		public static global::System.IntPtr MagickImage_ConvexHull(
					global::System.IntPtr Instance, 
					out global::System.UIntPtr length, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.UIntPtr* pinned_length = &(length))
				fixed (global::System.IntPtr* pinned_exception = &(exception))
				{
					// Call to native method
					unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_ConvexHull(
										Instance, 
										pinned_length, 
										pinned_exception
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_Convolve, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_Convolve")]
		public static global::System.IntPtr MagickImage_Convolve(
					global::System.IntPtr Instance, 
					global::System.IntPtr matrix, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_Convolve(
									Instance, 
									matrix, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_CopyPixels, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_CopyPixels")]
		public static void MagickImage_CopyPixels(
					global::System.IntPtr Instance, 
					global::System.IntPtr image, 
					global::System.IntPtr geometry, 
					global::System.IntPtr offset, 
					global::System.UIntPtr channels, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_CopyPixels(
									Instance, 
									image, 
									geometry, 
									offset, 
									channels, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, MagickImage_Crop, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_Crop")]
		public static global::System.IntPtr MagickImage_Crop(
					global::System.IntPtr Instance, 
					global::System.IntPtr geometry, 
					global::System.UIntPtr gravity, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_Crop(
									Instance, 
									geometry, 
									gravity, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_CropToTiles, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_CropToTiles")]
		public static global::System.IntPtr MagickImage_CropToTiles(
					global::System.IntPtr Instance, 
					global::System.IntPtr geometry, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_CropToTiles(
									Instance, 
									geometry, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_CycleColormap, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_CycleColormap")]
		public static void MagickImage_CycleColormap(
					global::System.IntPtr Instance, 
					global::System.IntPtr amount, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_CycleColormap(
									Instance, 
									amount, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, MagickImage_Decipher, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_Decipher")]
		public static void MagickImage_Decipher(
					global::System.IntPtr Instance, 
					global::System.IntPtr passphrase, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_Decipher(
									Instance, 
									passphrase, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, MagickImage_Deskew, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_Deskew")]
		public static global::System.IntPtr MagickImage_Deskew(
					global::System.IntPtr Instance, 
					double threshold, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_Deskew(
									Instance, 
									threshold, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_Despeckle, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_Despeckle")]
		public static global::System.IntPtr MagickImage_Despeckle(
					global::System.IntPtr Instance, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_Despeckle(
									Instance, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_DetermineColorType, [fwd] [return] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_DetermineColorType")]
		public static global::System.UIntPtr MagickImage_DetermineColorType(
					global::System.IntPtr Instance, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.UIntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_DetermineColorType(
									Instance, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_Distort, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x00042A40] rg_double__double *, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_Distort")]
		public static global::System.IntPtr MagickImage_Distort(
					global::System.IntPtr Instance, 
					global::System.UIntPtr method, 
					bool bestfit, 
					double[] arguments, 
					global::System.UIntPtr length, 
					out global::System.IntPtr exception)
		{
			// Setup
			double* unsafe_arguments;
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (double* pinned_arguments = ((arguments != null 
						&& arguments.Length == 0) ? new double[1] : arguments))
			{
				unsafe_arguments = (double*)pinned_arguments;
				fixed (global::System.IntPtr* pinned_exception = &(exception))
				{
					// Call to native method
					unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_Distort(
										Instance, 
										method, 
										(bestfit ? 1 : 0), 
										unsafe_arguments, 
										length, 
										pinned_exception
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				}
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_Edge, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_Edge")]
		public static global::System.IntPtr MagickImage_Edge(
					global::System.IntPtr Instance, 
					double radius, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_Edge(
									Instance, 
									radius, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_Emboss, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_Emboss")]
		public static global::System.IntPtr MagickImage_Emboss(
					global::System.IntPtr Instance, 
					double radius, 
					double sigma, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_Emboss(
									Instance, 
									radius, 
									sigma, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_Encipher, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_Encipher")]
		public static void MagickImage_Encipher(
					global::System.IntPtr Instance, 
					global::System.IntPtr passphrase, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_Encipher(
									Instance, 
									passphrase, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, MagickImage_Enhance, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_Enhance")]
		public static global::System.IntPtr MagickImage_Enhance(
					global::System.IntPtr Instance, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_Enhance(
									Instance, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_Equalize, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_Equalize")]
		public static void MagickImage_Equalize(
					global::System.IntPtr Instance, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_Equalize(
									Instance, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, MagickImage_Equals, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_Equals")]
		public static bool MagickImage_Equals(
					global::System.IntPtr Instance, 
					global::System.IntPtr image, 
					out global::System.IntPtr exception)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_Equals(
									Instance, 
									image, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value != 0;
		}

		// Signature, MagickImage_EvaluateFunction, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x00042A40] rg_double__double *, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_EvaluateFunction")]
		public static void MagickImage_EvaluateFunction(
					global::System.IntPtr Instance, 
					global::System.UIntPtr channels, 
					global::System.UIntPtr evaluateFunction, 
					double[] values, 
					global::System.UIntPtr length, 
					out global::System.IntPtr exception)
		{
			// Setup
			double* unsafe_values;
			// Marshalling
			fixed (double* pinned_values = ((values != null 
						&& values.Length == 0) ? new double[1] : values))
			{
				unsafe_values = (double*)pinned_values;
				fixed (global::System.IntPtr* pinned_exception = &(exception))
				{
					// Call to native method
					global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_EvaluateFunction(
										Instance, 
										channels, 
										evaluateFunction, 
										unsafe_values, 
										length, 
										pinned_exception
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				}
			}
			// Return
		}

		// Signature, MagickImage_EvaluateGeometry, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_EvaluateGeometry")]
		public static void MagickImage_EvaluateGeometry(
					global::System.IntPtr Instance, 
					global::System.UIntPtr channels, 
					global::System.IntPtr geometry, 
					global::System.UIntPtr evaluateOperator, 
					double value, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_EvaluateGeometry(
									Instance, 
									channels, 
									geometry, 
									evaluateOperator, 
									value, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, MagickImage_EvaluateOperator, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_EvaluateOperator")]
		public static void MagickImage_EvaluateOperator(
					global::System.IntPtr Instance, 
					global::System.UIntPtr channels, 
					global::System.UIntPtr evaluateOperator, 
					double value, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_EvaluateOperator(
									Instance, 
									channels, 
									evaluateOperator, 
									value, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, MagickImage_Extent, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_Extent")]
		public static global::System.IntPtr MagickImage_Extent(
					global::System.IntPtr Instance, 
					global::System.IntPtr geometry, 
					global::System.UIntPtr gravity, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_Extent(
									Instance, 
									geometry, 
									gravity, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_Flip, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_Flip")]
		public static global::System.IntPtr MagickImage_Flip(
					global::System.IntPtr Instance, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_Flip(
									Instance, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_FloodFill, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_FloodFill")]
		public static void MagickImage_FloodFill(
					global::System.IntPtr Instance, 
					global::System.IntPtr settings, 
					global::System.IntPtr x, 
					global::System.IntPtr y, 
					global::System.IntPtr target, 
					bool invert, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_FloodFill(
									Instance, 
									settings, 
									x, 
									y, 
									target, 
									(invert ? 1 : 0), 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, MagickImage_Flop, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_Flop")]
		public static global::System.IntPtr MagickImage_Flop(
					global::System.IntPtr Instance, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_Flop(
									Instance, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_FontTypeMetrics, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_FontTypeMetrics")]
		public static global::System.IntPtr MagickImage_FontTypeMetrics(
					global::System.IntPtr Instance, 
					global::System.IntPtr settings, 
					bool ignoreNewlines, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_FontTypeMetrics(
									Instance, 
									settings, 
									(ignoreNewlines ? 1 : 0), 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_FormatExpression, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_FormatExpression")]
		public static global::System.IntPtr MagickImage_FormatExpression(
					global::System.IntPtr Instance, 
					global::System.IntPtr settings, 
					global::System.IntPtr expression, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_FormatExpression(
									Instance, 
									settings, 
									expression, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_Frame, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_Frame")]
		public static global::System.IntPtr MagickImage_Frame(
					global::System.IntPtr Instance, 
					global::System.IntPtr geometry, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_Frame(
									Instance, 
									geometry, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_Fx, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_Fx")]
		public static global::System.IntPtr MagickImage_Fx(
					global::System.IntPtr Instance, 
					global::System.IntPtr expression, 
					global::System.UIntPtr channels, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_Fx(
									Instance, 
									expression, 
									channels, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_GammaCorrect, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_GammaCorrect")]
		public static void MagickImage_GammaCorrect(
					global::System.IntPtr Instance, 
					double gamma, 
					global::System.UIntPtr channels, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_GammaCorrect(
									Instance, 
									gamma, 
									channels, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, MagickImage_GaussianBlur, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_GaussianBlur")]
		public static global::System.IntPtr MagickImage_GaussianBlur(
					global::System.IntPtr Instance, 
					double radius, 
					double sigma, 
					global::System.UIntPtr channels, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_GaussianBlur(
									Instance, 
									radius, 
									sigma, 
									channels, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_GetArtifact, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_GetArtifact")]
		public static global::System.IntPtr MagickImage_GetArtifact(
					global::System.IntPtr Instance, 
					global::System.IntPtr name)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_GetArtifact(
								Instance, 
								name
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_GetAttribute, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_GetAttribute")]
		public static global::System.IntPtr MagickImage_GetAttribute(
					global::System.IntPtr Instance, 
					global::System.IntPtr name, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_GetAttribute(
									Instance, 
									name, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_GetBitDepth, [fwd] [return] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_GetBitDepth")]
		public static global::System.UIntPtr MagickImage_GetBitDepth(
					global::System.IntPtr Instance, 
					global::System.UIntPtr channels, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.UIntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_GetBitDepth(
									Instance, 
									channels, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_GetColormap, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_GetColormap")]
		public static global::System.IntPtr MagickImage_GetColormap(
					global::System.IntPtr Instance, 
					global::System.UIntPtr index)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_GetColormap(
								Instance, 
								index
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_GetNext, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_GetNext")]
		public static global::System.IntPtr MagickImage_GetNext(global::System.IntPtr image)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_GetNext(image);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_GetNextArtifactName, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_GetNextArtifactName")]
		public static global::System.IntPtr MagickImage_GetNextArtifactName(global::System.IntPtr Instance)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_GetNextArtifactName(Instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_GetNextAttributeName, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_GetNextAttributeName")]
		public static global::System.IntPtr MagickImage_GetNextAttributeName(global::System.IntPtr Instance)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_GetNextAttributeName(Instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_GetNextProfileName, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_GetNextProfileName")]
		public static global::System.IntPtr MagickImage_GetNextProfileName(global::System.IntPtr Instance)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_GetNextProfileName(Instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_GetProfile, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_GetProfile")]
		public static global::System.IntPtr MagickImage_GetProfile(
					global::System.IntPtr Instance, 
					global::System.IntPtr name, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_GetProfile(
									Instance, 
									name, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_GetReadMask, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_GetReadMask")]
		public static global::System.IntPtr MagickImage_GetReadMask(
					global::System.IntPtr Instance, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_GetReadMask(
									Instance, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_GetWriteMask, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_GetWriteMask")]
		public static global::System.IntPtr MagickImage_GetWriteMask(
					global::System.IntPtr Instance, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_GetWriteMask(
									Instance, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_Grayscale, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_Grayscale")]
		public static void MagickImage_Grayscale(
					global::System.IntPtr Instance, 
					global::System.UIntPtr method, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_Grayscale(
									Instance, 
									method, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, MagickImage_HaldClut, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_HaldClut")]
		public static void MagickImage_HaldClut(
					global::System.IntPtr Instance, 
					global::System.IntPtr image, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_HaldClut(
									Instance, 
									image, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, MagickImage_HasChannel, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_HasChannel")]
		public static bool MagickImage_HasChannel(
					global::System.IntPtr Instance, 
					global::System.UIntPtr channel)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_HasChannel(
								Instance, 
								channel
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value != 0;
		}

		// Signature, MagickImage_HasProfile, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_HasProfile")]
		public static bool MagickImage_HasProfile(
					global::System.IntPtr Instance, 
					global::System.IntPtr name)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_HasProfile(
								Instance, 
								name
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value != 0;
		}

		// Signature, MagickImage_Histogram, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_Histogram")]
		public static global::System.IntPtr MagickImage_Histogram(
					global::System.IntPtr Instance, 
					out global::System.UIntPtr length, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.UIntPtr* pinned_length = &(length))
				fixed (global::System.IntPtr* pinned_exception = &(exception))
				{
					// Call to native method
					unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_Histogram(
										Instance, 
										pinned_length, 
										pinned_exception
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_HoughLine, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_HoughLine")]
		public static global::System.IntPtr MagickImage_HoughLine(
					global::System.IntPtr Instance, 
					global::System.UIntPtr width, 
					global::System.UIntPtr height, 
					global::System.UIntPtr threshold, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_HoughLine(
									Instance, 
									width, 
									height, 
									threshold, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_Implode, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_Implode")]
		public static global::System.IntPtr MagickImage_Implode(
					global::System.IntPtr Instance, 
					double amount, 
					global::System.UIntPtr method, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_Implode(
									Instance, 
									amount, 
									method, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_Kmeans, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_Kmeans")]
		public static void MagickImage_Kmeans(
					global::System.IntPtr Instance, 
					global::System.UIntPtr numberColors, 
					global::System.UIntPtr maxIterations, 
					double tolerance, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_Kmeans(
									Instance, 
									numberColors, 
									maxIterations, 
									tolerance, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, MagickImage_Kuwahara, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_Kuwahara")]
		public static global::System.IntPtr MagickImage_Kuwahara(
					global::System.IntPtr Instance, 
					double radius, 
					double sigma, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_Kuwahara(
									Instance, 
									radius, 
									sigma, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_Level, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_Level")]
		public static void MagickImage_Level(
					global::System.IntPtr Instance, 
					double blackPoint, 
					double whitePoint, 
					double gamma, 
					global::System.UIntPtr channels, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_Level(
									Instance, 
									blackPoint, 
									whitePoint, 
									gamma, 
									channels, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, MagickImage_LevelColors, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_LevelColors")]
		public static void MagickImage_LevelColors(
					global::System.IntPtr Instance, 
					global::System.IntPtr blackColor, 
					global::System.IntPtr whiteColor, 
					global::System.UIntPtr channels, 
					bool invert, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_LevelColors(
									Instance, 
									blackColor, 
									whiteColor, 
									channels, 
									(invert ? 1 : 0), 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, MagickImage_Levelize, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_Levelize")]
		public static void MagickImage_Levelize(
					global::System.IntPtr Instance, 
					double blackPoint, 
					double whitePoint, 
					double gamma, 
					global::System.UIntPtr channels, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_Levelize(
									Instance, 
									blackPoint, 
									whitePoint, 
									gamma, 
									channels, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, MagickImage_LinearStretch, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_LinearStretch")]
		public static void MagickImage_LinearStretch(
					global::System.IntPtr Instance, 
					double blackPoint, 
					double whitePoint, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_LinearStretch(
									Instance, 
									blackPoint, 
									whitePoint, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, MagickImage_LiquidRescale, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_LiquidRescale")]
		public static global::System.IntPtr MagickImage_LiquidRescale(
					global::System.IntPtr Instance, 
					global::System.IntPtr geometry, 
					double deltaX, 
					double rigidity, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_LiquidRescale(
									Instance, 
									geometry, 
									deltaX, 
									rigidity, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_LocalContrast, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_LocalContrast")]
		public static global::System.IntPtr MagickImage_LocalContrast(
					global::System.IntPtr Instance, 
					double radius, 
					double strength, 
					global::System.UIntPtr channels, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_LocalContrast(
									Instance, 
									radius, 
									strength, 
									channels, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_Magnify, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_Magnify")]
		public static global::System.IntPtr MagickImage_Magnify(
					global::System.IntPtr Instance, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_Magnify(
									Instance, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_Map, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_Map")]
		public static bool MagickImage_Map(
					global::System.IntPtr Instance, 
					global::System.IntPtr image, 
					global::System.IntPtr settings, 
					out global::System.IntPtr exception)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_Map(
									Instance, 
									image, 
									settings, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value != 0;
		}

		// Signature, MagickImage_MeanShift, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_MeanShift")]
		public static global::System.IntPtr MagickImage_MeanShift(
					global::System.IntPtr Instance, 
					global::System.UIntPtr width, 
					global::System.UIntPtr height, 
					double colorDistance, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_MeanShift(
									Instance, 
									width, 
									height, 
									colorDistance, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_Minify, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_Minify")]
		public static global::System.IntPtr MagickImage_Minify(
					global::System.IntPtr Instance, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_Minify(
									Instance, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_Moments, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_Moments")]
		public static global::System.IntPtr MagickImage_Moments(
					global::System.IntPtr Instance, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_Moments(
									Instance, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_Modulate, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_Modulate")]
		public static void MagickImage_Modulate(
					global::System.IntPtr Instance, 
					global::System.IntPtr modulate, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_Modulate(
									Instance, 
									modulate, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, MagickImage_MinimumBoundingBox, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_MinimumBoundingBox")]
		public static global::System.IntPtr MagickImage_MinimumBoundingBox(
					global::System.IntPtr Instance, 
					out global::System.UIntPtr length, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.UIntPtr* pinned_length = &(length))
				fixed (global::System.IntPtr* pinned_exception = &(exception))
				{
					// Call to native method
					unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_MinimumBoundingBox(
										Instance, 
										pinned_length, 
										pinned_exception
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_Morphology, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_Morphology")]
		public static global::System.IntPtr MagickImage_Morphology(
					global::System.IntPtr Instance, 
					global::System.UIntPtr method, 
					global::System.IntPtr kernel, 
					global::System.UIntPtr channels, 
					global::System.UIntPtr iterations, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_Morphology(
									Instance, 
									method, 
									kernel, 
									channels, 
									iterations, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_MotionBlur, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_MotionBlur")]
		public static global::System.IntPtr MagickImage_MotionBlur(
					global::System.IntPtr Instance, 
					double radius, 
					double sigma, 
					double angle, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_MotionBlur(
									Instance, 
									radius, 
									sigma, 
									angle, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_Negate, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_Negate")]
		public static void MagickImage_Negate(
					global::System.IntPtr Instance, 
					bool onlyGrayscale, 
					global::System.UIntPtr channels, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_Negate(
									Instance, 
									(onlyGrayscale ? 1 : 0), 
									channels, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, MagickImage_Normalize, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_Normalize")]
		public static void MagickImage_Normalize(
					global::System.IntPtr Instance, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_Normalize(
									Instance, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, MagickImage_OilPaint, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_OilPaint")]
		public static global::System.IntPtr MagickImage_OilPaint(
					global::System.IntPtr Instance, 
					double radius, 
					double sigma, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_OilPaint(
									Instance, 
									radius, 
									sigma, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_Opaque, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_Opaque")]
		public static void MagickImage_Opaque(
					global::System.IntPtr Instance, 
					global::System.IntPtr target, 
					global::System.IntPtr fill, 
					bool invert, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_Opaque(
									Instance, 
									target, 
									fill, 
									(invert ? 1 : 0), 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, MagickImage_OrderedDither, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_OrderedDither")]
		public static void MagickImage_OrderedDither(
					global::System.IntPtr Instance, 
					global::System.IntPtr thresholdMap, 
					global::System.UIntPtr channels, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_OrderedDither(
									Instance, 
									thresholdMap, 
									channels, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, MagickImage_Perceptible, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_Perceptible")]
		public static void MagickImage_Perceptible(
					global::System.IntPtr Instance, 
					double epsilon, 
					global::System.UIntPtr channels, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_Perceptible(
									Instance, 
									epsilon, 
									channels, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, MagickImage_PerceptualHash, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_PerceptualHash")]
		public static global::System.IntPtr MagickImage_PerceptualHash(
					global::System.IntPtr Instance, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_PerceptualHash(
									Instance, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_Polaroid, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_Polaroid")]
		public static global::System.IntPtr MagickImage_Polaroid(
					global::System.IntPtr Instance, 
					global::System.IntPtr settings, 
					global::System.IntPtr caption, 
					double angle, 
					global::System.UIntPtr method, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_Polaroid(
									Instance, 
									settings, 
									caption, 
									angle, 
									method, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_Posterize, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_Posterize")]
		public static void MagickImage_Posterize(
					global::System.IntPtr Instance, 
					global::System.UIntPtr levels, 
					global::System.UIntPtr method, 
					global::System.UIntPtr channels, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_Posterize(
									Instance, 
									levels, 
									method, 
									channels, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, MagickImage_Quantize, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_Quantize")]
		public static void MagickImage_Quantize(
					global::System.IntPtr Instance, 
					global::System.IntPtr settings, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_Quantize(
									Instance, 
									settings, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, MagickImage_RaiseOrLower, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_RaiseOrLower")]
		public static void MagickImage_RaiseOrLower(
					global::System.IntPtr Instance, 
					global::System.UIntPtr size, 
					bool raise, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_RaiseOrLower(
									Instance, 
									size, 
									(raise ? 1 : 0), 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, MagickImage_RandomThreshold, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_RandomThreshold")]
		public static void MagickImage_RandomThreshold(
					global::System.IntPtr Instance, 
					double low, 
					double high, 
					global::System.UIntPtr channels, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_RandomThreshold(
									Instance, 
									low, 
									high, 
									channels, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, MagickImage_RangeThreshold, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_RangeThreshold")]
		public static void MagickImage_RangeThreshold(
					global::System.IntPtr Instance, 
					double low_black, 
					double low_white, 
					double high_white, 
					double high_black, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_RangeThreshold(
									Instance, 
									low_black, 
									low_white, 
									high_white, 
									high_black, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, MagickImage_ReadBlob, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00042A40] rg_byte__unsigned char *, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_ReadBlob")]
		public static global::System.IntPtr MagickImage_ReadBlob(
					global::System.IntPtr settings, 
					byte[] data, 
					global::System.UIntPtr offset, 
					global::System.UIntPtr length, 
					out global::System.IntPtr exception)
		{
			// Setup
			byte* unsafe_data;
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (byte* pinned_data = ((data != null 
						&& data.Length == 0) ? new byte[1] : data))
			{
				unsafe_data = (byte*)pinned_data;
				fixed (global::System.IntPtr* pinned_exception = &(exception))
				{
					// Call to native method
					unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_ReadBlob(
										settings, 
										unsafe_data, 
										offset, 
										length, 
										pinned_exception
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				}
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_ReadFile, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_ReadFile")]
		public static global::System.IntPtr MagickImage_ReadFile(
					global::System.IntPtr settings, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_ReadFile(
									settings, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_ReadPixels, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x00042A40] rg_byte__unsigned char *, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_ReadPixels")]
		public static global::System.IntPtr MagickImage_ReadPixels(
					global::System.UIntPtr width, 
					global::System.UIntPtr height, 
					global::System.IntPtr map, 
					global::System.UIntPtr storageType, 
					byte[] data, 
					global::System.UIntPtr offset, 
					out global::System.IntPtr exception)
		{
			// Setup
			byte* unsafe_data;
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (byte* pinned_data = ((data != null 
						&& data.Length == 0) ? new byte[1] : data))
			{
				unsafe_data = (byte*)pinned_data;
				fixed (global::System.IntPtr* pinned_exception = &(exception))
				{
					// Call to native method
					unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_ReadPixels(
										width, 
										height, 
										map, 
										storageType, 
										unsafe_data, 
										offset, 
										pinned_exception
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				}
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_ReadStream, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00041EA8] ImageMagick_MagickImage_ReadWriteStreamDelegate__Magick_NET_Q16_AnyCPU__ImageMagick__MagickImage_ReadWriteStreamDelegate__Magick_NET_Q16_AnyCPU, [fwd] [in] [EETypeRva:0x00041EA8] ImageMagick_MagickImage_SeekStreamDelegate__Magick_NET_Q16_AnyCPU__ImageMagick__MagickImage_SeekStreamDelegate__Magick_NET_Q16_AnyCPU, [fwd] [in] [EETypeRva:0x00041EA8] ImageMagick_MagickImage_TellStreamDelegate__Magick_NET_Q16_AnyCPU__ImageMagick__MagickImage_TellStreamDelegate__Magick_NET_Q16_AnyCPU, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_ReadStream")]
		public static global::System.IntPtr MagickImage_ReadStream(
					global::System.IntPtr settings, 
					global::ImageMagick.MagickImage_ReadWriteStreamDelegate__Magick_NET_Q16_AnyCPU reader, 
					global::ImageMagick.MagickImage_SeekStreamDelegate__Magick_NET_Q16_AnyCPU seeker, 
					global::ImageMagick.MagickImage_TellStreamDelegate__Magick_NET_Q16_AnyCPU teller, 
					out global::System.IntPtr exception)
		{
			// Setup
			void* unsafe_reader = default(void*);
			void* unsafe_seeker = default(void*);
			void* unsafe_teller = default(void*);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				unsafe_reader = (void*)global::System.Runtime.InteropServices.McgMarshal.GetStubForPInvokeDelegate(
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("ImageMagick.MagickImage+ReadWriteStreamDelegate,Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, Public" +
											"KeyToken=2004825badfa91ec"), 
									reader
								);
				unsafe_seeker = (void*)global::System.Runtime.InteropServices.McgMarshal.GetStubForPInvokeDelegate(
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("ImageMagick.MagickImage+SeekStreamDelegate,Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyTo" +
											"ken=2004825badfa91ec"), 
									seeker
								);
				unsafe_teller = (void*)global::System.Runtime.InteropServices.McgMarshal.GetStubForPInvokeDelegate(
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("ImageMagick.MagickImage+TellStreamDelegate,Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyTo" +
											"ken=2004825badfa91ec"), 
									teller
								);
				fixed (global::System.IntPtr* pinned_exception = &(exception))
				{
					// Call to native method
					unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_ReadStream(
										settings, 
										unsafe_reader, 
										unsafe_seeker, 
										unsafe_teller, 
										pinned_exception
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				}
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(reader);
				global::System.GC.KeepAlive(seeker);
				global::System.GC.KeepAlive(teller);
			}
		}

		// Signature, MagickImage_RegionMask, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_RegionMask")]
		public static void MagickImage_RegionMask(
					global::System.IntPtr Instance, 
					global::System.IntPtr region, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_RegionMask(
									Instance, 
									region, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, MagickImage_RemoveArtifact, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_RemoveArtifact")]
		public static void MagickImage_RemoveArtifact(
					global::System.IntPtr Instance, 
					global::System.IntPtr name)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_RemoveArtifact(
								Instance, 
								name
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, MagickImage_RemoveAttribute, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_RemoveAttribute")]
		public static void MagickImage_RemoveAttribute(
					global::System.IntPtr Instance, 
					global::System.IntPtr name)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_RemoveAttribute(
								Instance, 
								name
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, MagickImage_RemoveProfile, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_RemoveProfile")]
		public static void MagickImage_RemoveProfile(
					global::System.IntPtr Instance, 
					global::System.IntPtr name)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_RemoveProfile(
								Instance, 
								name
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, MagickImage_ResetArtifactIterator, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_ResetArtifactIterator")]
		public static void MagickImage_ResetArtifactIterator(global::System.IntPtr Instance)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_ResetArtifactIterator(Instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, MagickImage_ResetAttributeIterator, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_ResetAttributeIterator")]
		public static void MagickImage_ResetAttributeIterator(global::System.IntPtr Instance)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_ResetAttributeIterator(Instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, MagickImage_ResetProfileIterator, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_ResetProfileIterator")]
		public static void MagickImage_ResetProfileIterator(global::System.IntPtr Instance)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_ResetProfileIterator(Instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, MagickImage_Resample, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_Resample")]
		public static global::System.IntPtr MagickImage_Resample(
					global::System.IntPtr Instance, 
					double resolutionX, 
					double resolutionY, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_Resample(
									Instance, 
									resolutionX, 
									resolutionY, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_Resize, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_Resize")]
		public static global::System.IntPtr MagickImage_Resize(
					global::System.IntPtr Instance, 
					global::System.IntPtr geometry, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_Resize(
									Instance, 
									geometry, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_Roll, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_Roll")]
		public static global::System.IntPtr MagickImage_Roll(
					global::System.IntPtr Instance, 
					global::System.IntPtr x, 
					global::System.IntPtr y, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_Roll(
									Instance, 
									x, 
									y, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_Rotate, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_Rotate")]
		public static global::System.IntPtr MagickImage_Rotate(
					global::System.IntPtr Instance, 
					double degrees, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_Rotate(
									Instance, 
									degrees, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_RotationalBlur, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_RotationalBlur")]
		public static global::System.IntPtr MagickImage_RotationalBlur(
					global::System.IntPtr Instance, 
					double angle, 
					global::System.UIntPtr channels, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_RotationalBlur(
									Instance, 
									angle, 
									channels, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_Sample, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_Sample")]
		public static global::System.IntPtr MagickImage_Sample(
					global::System.IntPtr Instance, 
					global::System.IntPtr geometry, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_Sample(
									Instance, 
									geometry, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_Scale, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_Scale")]
		public static global::System.IntPtr MagickImage_Scale(
					global::System.IntPtr Instance, 
					global::System.IntPtr geometry, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_Scale(
									Instance, 
									geometry, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_Segment, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_Segment")]
		public static void MagickImage_Segment(
					global::System.IntPtr Instance, 
					global::System.UIntPtr colorSpace, 
					double clusterThreshold, 
					double smoothingThreshold, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_Segment(
									Instance, 
									colorSpace, 
									clusterThreshold, 
									smoothingThreshold, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, MagickImage_SelectiveBlur, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_SelectiveBlur")]
		public static global::System.IntPtr MagickImage_SelectiveBlur(
					global::System.IntPtr Instance, 
					double radius, 
					double sigma, 
					double threshold, 
					global::System.UIntPtr channels, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_SelectiveBlur(
									Instance, 
									radius, 
									sigma, 
									threshold, 
									channels, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_Separate, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_Separate")]
		public static global::System.IntPtr MagickImage_Separate(
					global::System.IntPtr Instance, 
					global::System.UIntPtr channels, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_Separate(
									Instance, 
									channels, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_SepiaTone, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_SepiaTone")]
		public static global::System.IntPtr MagickImage_SepiaTone(
					global::System.IntPtr Instance, 
					double threshold, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_SepiaTone(
									Instance, 
									threshold, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_SetAlpha, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_SetAlpha")]
		public static void MagickImage_SetAlpha(
					global::System.IntPtr Instance, 
					global::System.UIntPtr value, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_SetAlpha(
									Instance, 
									value, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, MagickImage_SetArtifact, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_SetArtifact")]
		public static void MagickImage_SetArtifact(
					global::System.IntPtr Instance, 
					global::System.IntPtr name, 
					global::System.IntPtr value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_SetArtifact(
								Instance, 
								name, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, MagickImage_SetAttribute, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_SetAttribute")]
		public static void MagickImage_SetAttribute(
					global::System.IntPtr Instance, 
					global::System.IntPtr name, 
					global::System.IntPtr value, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_SetAttribute(
									Instance, 
									name, 
									value, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, MagickImage_SetBitDepth, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_SetBitDepth")]
		public static void MagickImage_SetBitDepth(
					global::System.IntPtr Instance, 
					global::System.UIntPtr channels, 
					global::System.UIntPtr value, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_SetBitDepth(
									Instance, 
									channels, 
									value, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, MagickImage_SetColormap, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_SetColormap")]
		public static void MagickImage_SetColormap(
					global::System.IntPtr Instance, 
					global::System.UIntPtr index, 
					global::System.IntPtr color, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_SetColormap(
									Instance, 
									index, 
									color, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, MagickImage_SetColorMetric, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_SetColorMetric")]
		public static bool MagickImage_SetColorMetric(
					global::System.IntPtr Instance, 
					global::System.IntPtr image, 
					out global::System.IntPtr exception)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_SetColorMetric(
									Instance, 
									image, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value != 0;
		}

		// Signature, MagickImage_SetNext, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_SetNext")]
		public static void MagickImage_SetNext(
					global::System.IntPtr Instance, 
					global::System.IntPtr image)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_SetNext(
								Instance, 
								image
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, MagickImage_SetProgressDelegate, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00041EA8] ImageMagick_MagickImage_ProgressDelegate__Magick_NET_Q16_AnyCPU__ImageMagick__MagickImage_ProgressDelegate__Magick_NET_Q16_AnyCPU, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_SetProgressDelegate")]
		public static void MagickImage_SetProgressDelegate(
					global::System.IntPtr Instance, 
					global::ImageMagick.MagickImage_ProgressDelegate__Magick_NET_Q16_AnyCPU method)
		{
			// Setup
			void* unsafe_method = default(void*);
			try
			{
				// Marshalling
				unsafe_method = (void*)global::System.Runtime.InteropServices.McgMarshal.GetStubForPInvokeDelegate(
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("ImageMagick.MagickImage+ProgressDelegate,Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToke" +
											"n=2004825badfa91ec"), 
									method
								);
				// Call to native method
				global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_SetProgressDelegate(
									Instance, 
									unsafe_method
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(method);
			}
		}

		// Signature, MagickImage_SetReadMask, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_SetReadMask")]
		public static void MagickImage_SetReadMask(
					global::System.IntPtr Instance, 
					global::System.IntPtr image, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_SetReadMask(
									Instance, 
									image, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, MagickImage_SetWriteMask, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_SetWriteMask")]
		public static void MagickImage_SetWriteMask(
					global::System.IntPtr Instance, 
					global::System.IntPtr image, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_SetWriteMask(
									Instance, 
									image, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, MagickImage_Shade, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_Shade")]
		public static global::System.IntPtr MagickImage_Shade(
					global::System.IntPtr Instance, 
					double azimuth, 
					double elevation, 
					bool colorShading, 
					global::System.UIntPtr channels, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_Shade(
									Instance, 
									azimuth, 
									elevation, 
									(colorShading ? 1 : 0), 
									channels, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_Shadow, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_Shadow")]
		public static global::System.IntPtr MagickImage_Shadow(
					global::System.IntPtr Instance, 
					global::System.IntPtr x, 
					global::System.IntPtr y, 
					double sigma, 
					double alphaPercentage, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_Shadow(
									Instance, 
									x, 
									y, 
									sigma, 
									alphaPercentage, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_Sharpen, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_Sharpen")]
		public static global::System.IntPtr MagickImage_Sharpen(
					global::System.IntPtr Instance, 
					double radius, 
					double sigma, 
					global::System.UIntPtr channel, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_Sharpen(
									Instance, 
									radius, 
									sigma, 
									channel, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_Shave, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_Shave")]
		public static global::System.IntPtr MagickImage_Shave(
					global::System.IntPtr Instance, 
					global::System.UIntPtr leftRight, 
					global::System.UIntPtr topBottom, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_Shave(
									Instance, 
									leftRight, 
									topBottom, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_Shear, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_Shear")]
		public static global::System.IntPtr MagickImage_Shear(
					global::System.IntPtr Instance, 
					double xAngle, 
					double yAngle, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_Shear(
									Instance, 
									xAngle, 
									yAngle, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_SigmoidalContrast, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_SigmoidalContrast")]
		public static void MagickImage_SigmoidalContrast(
					global::System.IntPtr Instance, 
					bool sharpen, 
					double contrast, 
					double midpoint, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_SigmoidalContrast(
									Instance, 
									(sharpen ? 1 : 0), 
									contrast, 
									midpoint, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, MagickImage_SparseColor, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x00042A40] rg_double__double *, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_SparseColor")]
		public static global::System.IntPtr MagickImage_SparseColor(
					global::System.IntPtr Instance, 
					global::System.UIntPtr channel, 
					global::System.UIntPtr method, 
					double[] values, 
					global::System.UIntPtr length, 
					out global::System.IntPtr exception)
		{
			// Setup
			double* unsafe_values;
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (double* pinned_values = ((values != null 
						&& values.Length == 0) ? new double[1] : values))
			{
				unsafe_values = (double*)pinned_values;
				fixed (global::System.IntPtr* pinned_exception = &(exception))
				{
					// Call to native method
					unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_SparseColor(
										Instance, 
										channel, 
										method, 
										unsafe_values, 
										length, 
										pinned_exception
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				}
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_Sketch, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_Sketch")]
		public static global::System.IntPtr MagickImage_Sketch(
					global::System.IntPtr Instance, 
					double radius, 
					double sigma, 
					double angle, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_Sketch(
									Instance, 
									radius, 
									sigma, 
									angle, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_Solarize, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_Solarize")]
		public static void MagickImage_Solarize(
					global::System.IntPtr Instance, 
					double factor, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_Solarize(
									Instance, 
									factor, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, MagickImage_Splice, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_Splice")]
		public static global::System.IntPtr MagickImage_Splice(
					global::System.IntPtr Instance, 
					global::System.IntPtr geometry, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_Splice(
									Instance, 
									geometry, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_Spread, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_Spread")]
		public static global::System.IntPtr MagickImage_Spread(
					global::System.IntPtr Instance, 
					global::System.UIntPtr method, 
					double radius, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_Spread(
									Instance, 
									method, 
									radius, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_Statistic, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_Statistic")]
		public static global::System.IntPtr MagickImage_Statistic(
					global::System.IntPtr Instance, 
					global::System.UIntPtr type, 
					global::System.UIntPtr width, 
					global::System.UIntPtr height, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_Statistic(
									Instance, 
									type, 
									width, 
									height, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_Statistics, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_Statistics")]
		public static global::System.IntPtr MagickImage_Statistics(
					global::System.IntPtr Instance, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_Statistics(
									Instance, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_Stegano, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_Stegano")]
		public static global::System.IntPtr MagickImage_Stegano(
					global::System.IntPtr Instance, 
					global::System.IntPtr watermark, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_Stegano(
									Instance, 
									watermark, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_Stereo, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_Stereo")]
		public static global::System.IntPtr MagickImage_Stereo(
					global::System.IntPtr Instance, 
					global::System.IntPtr rightImage, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_Stereo(
									Instance, 
									rightImage, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_Strip, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_Strip")]
		public static void MagickImage_Strip(
					global::System.IntPtr Instance, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_Strip(
									Instance, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, MagickImage_SubImageSearch, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] double__double, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_SubImageSearch")]
		public static global::System.IntPtr MagickImage_SubImageSearch(
					global::System.IntPtr Instance, 
					global::System.IntPtr reference, 
					global::System.UIntPtr metric, 
					double similarityThreshold, 
					global::System.IntPtr offset, 
					out double similarityMetric, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (double* pinned_similarityMetric = &(similarityMetric))
				fixed (global::System.IntPtr* pinned_exception = &(exception))
				{
					// Call to native method
					unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_SubImageSearch(
										Instance, 
										reference, 
										metric, 
										similarityThreshold, 
										offset, 
										pinned_similarityMetric, 
										pinned_exception
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_Swirl, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_Swirl")]
		public static global::System.IntPtr MagickImage_Swirl(
					global::System.IntPtr Instance, 
					global::System.UIntPtr method, 
					double degrees, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_Swirl(
									Instance, 
									method, 
									degrees, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_Texture, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_Texture")]
		public static void MagickImage_Texture(
					global::System.IntPtr Instance, 
					global::System.IntPtr image, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_Texture(
									Instance, 
									image, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, MagickImage_Threshold, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_Threshold")]
		public static void MagickImage_Threshold(
					global::System.IntPtr Instance, 
					double threshold, 
					global::System.UIntPtr channels, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_Threshold(
									Instance, 
									threshold, 
									channels, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, MagickImage_Thumbnail, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_Thumbnail")]
		public static global::System.IntPtr MagickImage_Thumbnail(
					global::System.IntPtr Instance, 
					global::System.IntPtr geometry, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_Thumbnail(
									Instance, 
									geometry, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_Tint, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_Tint")]
		public static global::System.IntPtr MagickImage_Tint(
					global::System.IntPtr Instance, 
					global::System.IntPtr opacity, 
					global::System.IntPtr tint, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_Tint(
									Instance, 
									opacity, 
									tint, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_Transparent, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_Transparent")]
		public static void MagickImage_Transparent(
					global::System.IntPtr Instance, 
					global::System.IntPtr color, 
					bool invert, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_Transparent(
									Instance, 
									color, 
									(invert ? 1 : 0), 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, MagickImage_TransparentChroma, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_TransparentChroma")]
		public static void MagickImage_TransparentChroma(
					global::System.IntPtr Instance, 
					global::System.IntPtr colorLow, 
					global::System.IntPtr colorHigh, 
					bool invert, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_TransparentChroma(
									Instance, 
									colorLow, 
									colorHigh, 
									(invert ? 1 : 0), 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, MagickImage_Transpose, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_Transpose")]
		public static global::System.IntPtr MagickImage_Transpose(
					global::System.IntPtr Instance, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_Transpose(
									Instance, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_Transverse, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_Transverse")]
		public static global::System.IntPtr MagickImage_Transverse(
					global::System.IntPtr Instance, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_Transverse(
									Instance, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_Trim, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_Trim")]
		public static global::System.IntPtr MagickImage_Trim(
					global::System.IntPtr Instance, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_Trim(
									Instance, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_UniqueColors, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_UniqueColors")]
		public static global::System.IntPtr MagickImage_UniqueColors(
					global::System.IntPtr Instance, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_UniqueColors(
									Instance, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_UnsharpMask, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_UnsharpMask")]
		public static global::System.IntPtr MagickImage_UnsharpMask(
					global::System.IntPtr Instance, 
					double radius, 
					double sigma, 
					double amount, 
					double threshold, 
					global::System.UIntPtr channels, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_UnsharpMask(
									Instance, 
									radius, 
									sigma, 
									amount, 
									threshold, 
									channels, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_Vignette, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_Vignette")]
		public static global::System.IntPtr MagickImage_Vignette(
					global::System.IntPtr Instance, 
					double radius, 
					double sigma, 
					global::System.IntPtr x, 
					global::System.IntPtr y, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_Vignette(
									Instance, 
									radius, 
									sigma, 
									x, 
									y, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_Wave, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_Wave")]
		public static global::System.IntPtr MagickImage_Wave(
					global::System.IntPtr Instance, 
					global::System.UIntPtr method, 
					double amplitude, 
					double length, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_Wave(
									Instance, 
									method, 
									amplitude, 
									length, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_WaveletDenoise, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_WaveletDenoise")]
		public static global::System.IntPtr MagickImage_WaveletDenoise(
					global::System.IntPtr Instance, 
					double threshold, 
					double softness, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_WaveletDenoise(
									Instance, 
									threshold, 
									softness, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImage_WhiteThreshold, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_WhiteThreshold")]
		public static void MagickImage_WhiteThreshold(
					global::System.IntPtr Instance, 
					global::System.IntPtr threshold, 
					global::System.UIntPtr channels, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_WhiteThreshold(
									Instance, 
									threshold, 
									channels, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, MagickImage_WriteFile, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_WriteFile")]
		public static void MagickImage_WriteFile(
					global::System.IntPtr Instance, 
					global::System.IntPtr settings, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_WriteFile(
									Instance, 
									settings, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, MagickImage_WriteStream, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00041EA8] ImageMagick_MagickImage_ReadWriteStreamDelegate__Magick_NET_Q16_AnyCPU__ImageMagick__MagickImage_ReadWriteStreamDelegate__Magick_NET_Q16_AnyCPU, [fwd] [in] [EETypeRva:0x00041EA8] ImageMagick_MagickImage_SeekStreamDelegate__Magick_NET_Q16_AnyCPU__ImageMagick__MagickImage_SeekStreamDelegate__Magick_NET_Q16_AnyCPU, [fwd] [in] [EETypeRva:0x00041EA8] ImageMagick_MagickImage_TellStreamDelegate__Magick_NET_Q16_AnyCPU__ImageMagick__MagickImage_TellStreamDelegate__Magick_NET_Q16_AnyCPU, [fwd] [in] [EETypeRva:0x00041EA8] ImageMagick_MagickImage_ReadWriteStreamDelegate__Magick_NET_Q16_AnyCPU__ImageMagick__MagickImage_ReadWriteStreamDelegate__Magick_NET_Q16_AnyCPU, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImage+NativeMethods+X86", "MagickImage_WriteStream")]
		public static void MagickImage_WriteStream(
					global::System.IntPtr Instance, 
					global::System.IntPtr settings, 
					global::ImageMagick.MagickImage_ReadWriteStreamDelegate__Magick_NET_Q16_AnyCPU writer, 
					global::ImageMagick.MagickImage_SeekStreamDelegate__Magick_NET_Q16_AnyCPU seeker, 
					global::ImageMagick.MagickImage_TellStreamDelegate__Magick_NET_Q16_AnyCPU teller, 
					global::ImageMagick.MagickImage_ReadWriteStreamDelegate__Magick_NET_Q16_AnyCPU reader, 
					out global::System.IntPtr exception)
		{
			// Setup
			void* unsafe_writer = default(void*);
			void* unsafe_seeker = default(void*);
			void* unsafe_teller = default(void*);
			void* unsafe_reader = default(void*);
			try
			{
				// Marshalling
				unsafe_writer = (void*)global::System.Runtime.InteropServices.McgMarshal.GetStubForPInvokeDelegate(
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("ImageMagick.MagickImage+ReadWriteStreamDelegate,Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, Public" +
											"KeyToken=2004825badfa91ec"), 
									writer
								);
				unsafe_seeker = (void*)global::System.Runtime.InteropServices.McgMarshal.GetStubForPInvokeDelegate(
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("ImageMagick.MagickImage+SeekStreamDelegate,Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyTo" +
											"ken=2004825badfa91ec"), 
									seeker
								);
				unsafe_teller = (void*)global::System.Runtime.InteropServices.McgMarshal.GetStubForPInvokeDelegate(
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("ImageMagick.MagickImage+TellStreamDelegate,Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyTo" +
											"ken=2004825badfa91ec"), 
									teller
								);
				unsafe_reader = (void*)global::System.Runtime.InteropServices.McgMarshal.GetStubForPInvokeDelegate(
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("ImageMagick.MagickImage+ReadWriteStreamDelegate,Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, Public" +
											"KeyToken=2004825badfa91ec"), 
									reader
								);
				fixed (global::System.IntPtr* pinned_exception = &(exception))
				{
					// Call to native method
					global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImage_WriteStream(
										Instance, 
										settings, 
										unsafe_writer, 
										unsafe_seeker, 
										unsafe_teller, 
										unsafe_reader, 
										pinned_exception
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				}
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(writer);
				global::System.GC.KeepAlive(seeker);
				global::System.GC.KeepAlive(teller);
				global::System.GC.KeepAlive(reader);
			}
		}

		// Signature, MagickImageCollection_Append, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImageCollection+NativeMethods+X86", "MagickImageCollection_Append")]
		public static global::System.IntPtr MagickImageCollection_Append(
					global::System.IntPtr image, 
					bool stack, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImageCollection_Append(
									image, 
									(stack ? 1 : 0), 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImageCollection_Coalesce, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImageCollection+NativeMethods+X86", "MagickImageCollection_Coalesce")]
		public static global::System.IntPtr MagickImageCollection_Coalesce(
					global::System.IntPtr image, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImageCollection_Coalesce(
									image, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImageCollection_Combine, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImageCollection+NativeMethods+X86", "MagickImageCollection_Combine")]
		public static global::System.IntPtr MagickImageCollection_Combine(
					global::System.IntPtr image, 
					global::System.UIntPtr colorSpace, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImageCollection_Combine(
									image, 
									colorSpace, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImageCollection_Complex, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImageCollection+NativeMethods+X86", "MagickImageCollection_Complex")]
		public static global::System.IntPtr MagickImageCollection_Complex(
					global::System.IntPtr image, 
					global::System.UIntPtr complexOperator, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImageCollection_Complex(
									image, 
									complexOperator, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImageCollection_Deconstruct, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImageCollection+NativeMethods+X86", "MagickImageCollection_Deconstruct")]
		public static global::System.IntPtr MagickImageCollection_Deconstruct(
					global::System.IntPtr image, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImageCollection_Deconstruct(
									image, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImageCollection_Dispose, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImageCollection+NativeMethods+X86", "MagickImageCollection_Dispose")]
		public static void MagickImageCollection_Dispose(global::System.IntPtr value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImageCollection_Dispose(value);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, MagickImageCollection_Evaluate, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImageCollection+NativeMethods+X86", "MagickImageCollection_Evaluate")]
		public static global::System.IntPtr MagickImageCollection_Evaluate(
					global::System.IntPtr image, 
					global::System.UIntPtr evaluateOperator, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImageCollection_Evaluate(
									image, 
									evaluateOperator, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImageCollection_Map, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImageCollection+NativeMethods+X86", "MagickImageCollection_Map")]
		public static void MagickImageCollection_Map(
					global::System.IntPtr image, 
					global::System.IntPtr settings, 
					global::System.IntPtr remapImage, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImageCollection_Map(
									image, 
									settings, 
									remapImage, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, MagickImageCollection_Merge, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImageCollection+NativeMethods+X86", "MagickImageCollection_Merge")]
		public static global::System.IntPtr MagickImageCollection_Merge(
					global::System.IntPtr image, 
					global::System.UIntPtr method, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImageCollection_Merge(
									image, 
									method, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImageCollection_Montage, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImageCollection+NativeMethods+X86", "MagickImageCollection_Montage")]
		public static global::System.IntPtr MagickImageCollection_Montage(
					global::System.IntPtr image, 
					global::System.IntPtr settings, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImageCollection_Montage(
									image, 
									settings, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImageCollection_Morph, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImageCollection+NativeMethods+X86", "MagickImageCollection_Morph")]
		public static global::System.IntPtr MagickImageCollection_Morph(
					global::System.IntPtr image, 
					global::System.UIntPtr frames, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImageCollection_Morph(
									image, 
									frames, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImageCollection_Optimize, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImageCollection+NativeMethods+X86", "MagickImageCollection_Optimize")]
		public static global::System.IntPtr MagickImageCollection_Optimize(
					global::System.IntPtr image, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImageCollection_Optimize(
									image, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImageCollection_OptimizePlus, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImageCollection+NativeMethods+X86", "MagickImageCollection_OptimizePlus")]
		public static global::System.IntPtr MagickImageCollection_OptimizePlus(
					global::System.IntPtr image, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImageCollection_OptimizePlus(
									image, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImageCollection_OptimizeTransparency, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImageCollection+NativeMethods+X86", "MagickImageCollection_OptimizeTransparency")]
		public static void MagickImageCollection_OptimizeTransparency(
					global::System.IntPtr image, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImageCollection_OptimizeTransparency(
									image, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, MagickImageCollection_Polynomial, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00042A40] rg_double__double *, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImageCollection+NativeMethods+X86", "MagickImageCollection_Polynomial")]
		public static global::System.IntPtr MagickImageCollection_Polynomial(
					global::System.IntPtr image, 
					double[] terms, 
					global::System.UIntPtr length, 
					out global::System.IntPtr exception)
		{
			// Setup
			double* unsafe_terms;
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (double* pinned_terms = ((terms != null 
						&& terms.Length == 0) ? new double[1] : terms))
			{
				unsafe_terms = (double*)pinned_terms;
				fixed (global::System.IntPtr* pinned_exception = &(exception))
				{
					// Call to native method
					unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImageCollection_Polynomial(
										image, 
										unsafe_terms, 
										length, 
										pinned_exception
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				}
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImageCollection_Quantize, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImageCollection+NativeMethods+X86", "MagickImageCollection_Quantize")]
		public static void MagickImageCollection_Quantize(
					global::System.IntPtr image, 
					global::System.IntPtr settings, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImageCollection_Quantize(
									image, 
									settings, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, MagickImageCollection_ReadBlob, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00042A40] rg_byte__unsigned char *, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImageCollection+NativeMethods+X86", "MagickImageCollection_ReadBlob")]
		public static global::System.IntPtr MagickImageCollection_ReadBlob(
					global::System.IntPtr settings, 
					byte[] data, 
					global::System.UIntPtr offset, 
					global::System.UIntPtr length, 
					out global::System.IntPtr exception)
		{
			// Setup
			byte* unsafe_data;
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (byte* pinned_data = ((data != null 
						&& data.Length == 0) ? new byte[1] : data))
			{
				unsafe_data = (byte*)pinned_data;
				fixed (global::System.IntPtr* pinned_exception = &(exception))
				{
					// Call to native method
					unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImageCollection_ReadBlob(
										settings, 
										unsafe_data, 
										offset, 
										length, 
										pinned_exception
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				}
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImageCollection_ReadFile, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImageCollection+NativeMethods+X86", "MagickImageCollection_ReadFile")]
		public static global::System.IntPtr MagickImageCollection_ReadFile(
					global::System.IntPtr settings, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImageCollection_ReadFile(
									settings, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImageCollection_ReadStream, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00041EA8] ImageMagick_MagickImageCollection_ReadWriteStreamDelegate__Magick_NET_Q16_AnyCPU__ImageMagick__MagickImageCollection_ReadWriteStreamDelegate__Magick_NET_Q16_AnyCPU, [fwd] [in] [EETypeRva:0x00041EA8] ImageMagick_MagickImageCollection_SeekStreamDelegate__Magick_NET_Q16_AnyCPU__ImageMagick__MagickImageCollection_SeekStreamDelegate__Magick_NET_Q16_AnyCPU, [fwd] [in] [EETypeRva:0x00041EA8] ImageMagick_MagickImageCollection_TellStreamDelegate__Magick_NET_Q16_AnyCPU__ImageMagick__MagickImageCollection_TellStreamDelegate__Magick_NET_Q16_AnyCPU, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImageCollection+NativeMethods+X86", "MagickImageCollection_ReadStream")]
		public static global::System.IntPtr MagickImageCollection_ReadStream(
					global::System.IntPtr settings, 
					global::ImageMagick.MagickImageCollection_ReadWriteStreamDelegate__Magick_NET_Q16_AnyCPU reader, 
					global::ImageMagick.MagickImageCollection_SeekStreamDelegate__Magick_NET_Q16_AnyCPU seeker, 
					global::ImageMagick.MagickImageCollection_TellStreamDelegate__Magick_NET_Q16_AnyCPU teller, 
					out global::System.IntPtr exception)
		{
			// Setup
			void* unsafe_reader = default(void*);
			void* unsafe_seeker = default(void*);
			void* unsafe_teller = default(void*);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				unsafe_reader = (void*)global::System.Runtime.InteropServices.McgMarshal.GetStubForPInvokeDelegate(
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("ImageMagick.MagickImageCollection+ReadWriteStreamDelegate,Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutr" +
											"al, PublicKeyToken=2004825badfa91ec"), 
									reader
								);
				unsafe_seeker = (void*)global::System.Runtime.InteropServices.McgMarshal.GetStubForPInvokeDelegate(
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("ImageMagick.MagickImageCollection+SeekStreamDelegate,Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, P" +
											"ublicKeyToken=2004825badfa91ec"), 
									seeker
								);
				unsafe_teller = (void*)global::System.Runtime.InteropServices.McgMarshal.GetStubForPInvokeDelegate(
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("ImageMagick.MagickImageCollection+TellStreamDelegate,Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, P" +
											"ublicKeyToken=2004825badfa91ec"), 
									teller
								);
				fixed (global::System.IntPtr* pinned_exception = &(exception))
				{
					// Call to native method
					unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImageCollection_ReadStream(
										settings, 
										unsafe_reader, 
										unsafe_seeker, 
										unsafe_teller, 
										pinned_exception
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				}
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(reader);
				global::System.GC.KeepAlive(seeker);
				global::System.GC.KeepAlive(teller);
			}
		}

		// Signature, MagickImageCollection_Smush, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImageCollection+NativeMethods+X86", "MagickImageCollection_Smush")]
		public static global::System.IntPtr MagickImageCollection_Smush(
					global::System.IntPtr image, 
					global::System.IntPtr offset, 
					bool stack, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImageCollection_Smush(
									image, 
									offset, 
									(stack ? 1 : 0), 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, MagickImageCollection_WriteFile, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImageCollection+NativeMethods+X86", "MagickImageCollection_WriteFile")]
		public static void MagickImageCollection_WriteFile(
					global::System.IntPtr image, 
					global::System.IntPtr settings, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImageCollection_WriteFile(
									image, 
									settings, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, MagickImageCollection_WriteStream, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00041EA8] ImageMagick_MagickImageCollection_ReadWriteStreamDelegate__Magick_NET_Q16_AnyCPU__ImageMagick__MagickImageCollection_ReadWriteStreamDelegate__Magick_NET_Q16_AnyCPU, [fwd] [in] [EETypeRva:0x00041EA8] ImageMagick_MagickImageCollection_SeekStreamDelegate__Magick_NET_Q16_AnyCPU__ImageMagick__MagickImageCollection_SeekStreamDelegate__Magick_NET_Q16_AnyCPU, [fwd] [in] [EETypeRva:0x00041EA8] ImageMagick_MagickImageCollection_TellStreamDelegate__Magick_NET_Q16_AnyCPU__ImageMagick__MagickImageCollection_TellStreamDelegate__Magick_NET_Q16_AnyCPU, [fwd] [in] [EETypeRva:0x00041EA8] ImageMagick_MagickImageCollection_ReadWriteStreamDelegate__Magick_NET_Q16_AnyCPU__ImageMagick__MagickImageCollection_ReadWriteStreamDelegate__Magick_NET_Q16_AnyCPU, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickImageCollection+NativeMethods+X86", "MagickImageCollection_WriteStream")]
		public static void MagickImageCollection_WriteStream(
					global::System.IntPtr image, 
					global::System.IntPtr settings, 
					global::ImageMagick.MagickImageCollection_ReadWriteStreamDelegate__Magick_NET_Q16_AnyCPU writer, 
					global::ImageMagick.MagickImageCollection_SeekStreamDelegate__Magick_NET_Q16_AnyCPU seeker, 
					global::ImageMagick.MagickImageCollection_TellStreamDelegate__Magick_NET_Q16_AnyCPU teller, 
					global::ImageMagick.MagickImageCollection_ReadWriteStreamDelegate__Magick_NET_Q16_AnyCPU reader, 
					out global::System.IntPtr exception)
		{
			// Setup
			void* unsafe_writer = default(void*);
			void* unsafe_seeker = default(void*);
			void* unsafe_teller = default(void*);
			void* unsafe_reader = default(void*);
			try
			{
				// Marshalling
				unsafe_writer = (void*)global::System.Runtime.InteropServices.McgMarshal.GetStubForPInvokeDelegate(
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("ImageMagick.MagickImageCollection+ReadWriteStreamDelegate,Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutr" +
											"al, PublicKeyToken=2004825badfa91ec"), 
									writer
								);
				unsafe_seeker = (void*)global::System.Runtime.InteropServices.McgMarshal.GetStubForPInvokeDelegate(
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("ImageMagick.MagickImageCollection+SeekStreamDelegate,Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, P" +
											"ublicKeyToken=2004825badfa91ec"), 
									seeker
								);
				unsafe_teller = (void*)global::System.Runtime.InteropServices.McgMarshal.GetStubForPInvokeDelegate(
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("ImageMagick.MagickImageCollection+TellStreamDelegate,Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, P" +
											"ublicKeyToken=2004825badfa91ec"), 
									teller
								);
				unsafe_reader = (void*)global::System.Runtime.InteropServices.McgMarshal.GetStubForPInvokeDelegate(
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("ImageMagick.MagickImageCollection+ReadWriteStreamDelegate,Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutr" +
											"al, PublicKeyToken=2004825badfa91ec"), 
									reader
								);
				fixed (global::System.IntPtr* pinned_exception = &(exception))
				{
					// Call to native method
					global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickImageCollection_WriteStream(
										image, 
										settings, 
										unsafe_writer, 
										unsafe_seeker, 
										unsafe_teller, 
										unsafe_reader, 
										pinned_exception
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				}
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(writer);
				global::System.GC.KeepAlive(seeker);
				global::System.GC.KeepAlive(teller);
				global::System.GC.KeepAlive(reader);
			}
		}

		// Signature, DoubleMatrix_Create, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00042A40] rg_double__double *, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DoubleMatrix+NativeMethods+X86", "DoubleMatrix_Create")]
		public static global::System.IntPtr DoubleMatrix_Create(
					double[] values, 
					global::System.UIntPtr order)
		{
			// Setup
			double* unsafe_values;
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (double* pinned_values = ((values != null 
						&& values.Length == 0) ? new double[1] : values))
			{
				unsafe_values = (double*)pinned_values;
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.DoubleMatrix_Create(
									unsafe_values, 
									order
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, DoubleMatrix_Dispose, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DoubleMatrix+NativeMethods+X86", "DoubleMatrix_Dispose")]
		public static void DoubleMatrix_Dispose(global::System.IntPtr instance)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.DoubleMatrix_Dispose(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, OpenCL_GetDevices, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.OpenCL+NativeMethods+X86", "OpenCL_GetDevices")]
		public static global::System.IntPtr OpenCL_GetDevices(out global::System.UIntPtr length)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.UIntPtr* pinned_length = &(length))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.OpenCL_GetDevices(pinned_length);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, OpenCL_GetDevice, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.OpenCL+NativeMethods+X86", "OpenCL_GetDevice")]
		public static global::System.IntPtr OpenCL_GetDevice(
					global::System.IntPtr list, 
					global::System.UIntPtr index)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.OpenCL_GetDevice(
								list, 
								index
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, OpenCL_SetEnabled, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x00040848] bool__System.Boolean, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.OpenCL+NativeMethods+X86", "OpenCL_SetEnabled")]
		public static bool OpenCL_SetEnabled(bool value)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.OpenCL_SetEnabled((value ? 1 : 0));
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value != 0;
		}

		// Signature, OpenCLDevice_BenchmarkScore_Get, [fwd] [return] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.OpenCLDevice+NativeMethods+X86", "OpenCLDevice_BenchmarkScore_Get")]
		public static double OpenCLDevice_BenchmarkScore_Get(global::System.IntPtr instance)
		{
			// Setup
			double unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.OpenCLDevice_BenchmarkScore_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, OpenCLDevice_DeviceType_Get, [fwd] [return] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.OpenCLDevice+NativeMethods+X86", "OpenCLDevice_DeviceType_Get")]
		public static global::System.UIntPtr OpenCLDevice_DeviceType_Get(global::System.IntPtr instance)
		{
			// Setup
			global::System.UIntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.OpenCLDevice_DeviceType_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, OpenCLDevice_IsEnabled_Get, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.OpenCLDevice+NativeMethods+X86", "OpenCLDevice_IsEnabled_Get")]
		public static bool OpenCLDevice_IsEnabled_Get(global::System.IntPtr instance)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.OpenCLDevice_IsEnabled_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value != 0;
		}

		// Signature, OpenCLDevice_IsEnabled_Set, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00040848] bool__System.Boolean, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.OpenCLDevice+NativeMethods+X86", "OpenCLDevice_IsEnabled_Set")]
		public static void OpenCLDevice_IsEnabled_Set(
					global::System.IntPtr instance, 
					bool value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.OpenCLDevice_IsEnabled_Set(
								instance, 
								(value ? 1 : 0)
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, OpenCLDevice_Name_Get, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.OpenCLDevice+NativeMethods+X86", "OpenCLDevice_Name_Get")]
		public static global::System.IntPtr OpenCLDevice_Name_Get(global::System.IntPtr instance)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.OpenCLDevice_Name_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, OpenCLDevice_Version_Get, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.OpenCLDevice+NativeMethods+X86", "OpenCLDevice_Version_Get")]
		public static global::System.IntPtr OpenCLDevice_Version_Get(global::System.IntPtr instance)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.OpenCLDevice_Version_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, OpenCLDevice_GetKernelProfileRecords, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.OpenCLDevice+NativeMethods+X86", "OpenCLDevice_GetKernelProfileRecords")]
		public static global::System.IntPtr OpenCLDevice_GetKernelProfileRecords(
					global::System.IntPtr Instance, 
					out global::System.UIntPtr length)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.UIntPtr* pinned_length = &(length))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.OpenCLDevice_GetKernelProfileRecords(
									Instance, 
									pinned_length
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, OpenCLDevice_GetKernelProfileRecord, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.OpenCLDevice+NativeMethods+X86", "OpenCLDevice_GetKernelProfileRecord")]
		public static global::System.IntPtr OpenCLDevice_GetKernelProfileRecord(
					global::System.IntPtr list, 
					global::System.UIntPtr index)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.OpenCLDevice_GetKernelProfileRecord(
								list, 
								index
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, OpenCLDevice_SetProfileKernels, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00040848] bool__System.Boolean, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.OpenCLDevice+NativeMethods+X86", "OpenCLDevice_SetProfileKernels")]
		public static void OpenCLDevice_SetProfileKernels(
					global::System.IntPtr Instance, 
					bool value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.OpenCLDevice_SetProfileKernels(
								Instance, 
								(value ? 1 : 0)
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, OpenCLKernelProfileRecord_Count_Get, [fwd] [return] [EETypeRva:0x000419B0] long____int64, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.OpenCLKernelProfileRecord+NativeMethods+X86", "OpenCLKernelProfileRecord_Count_Get")]
		public static long OpenCLKernelProfileRecord_Count_Get(global::System.IntPtr instance)
		{
			// Setup
			long unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.OpenCLKernelProfileRecord_Count_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, OpenCLKernelProfileRecord_MaximumDuration_Get, [fwd] [return] [EETypeRva:0x000419B0] long____int64, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.OpenCLKernelProfileRecord+NativeMethods+X86", "OpenCLKernelProfileRecord_MaximumDuration_Get")]
		public static long OpenCLKernelProfileRecord_MaximumDuration_Get(global::System.IntPtr instance)
		{
			// Setup
			long unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.OpenCLKernelProfileRecord_MaximumDuration_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, OpenCLKernelProfileRecord_MinimumDuration_Get, [fwd] [return] [EETypeRva:0x000419B0] long____int64, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.OpenCLKernelProfileRecord+NativeMethods+X86", "OpenCLKernelProfileRecord_MinimumDuration_Get")]
		public static long OpenCLKernelProfileRecord_MinimumDuration_Get(global::System.IntPtr instance)
		{
			// Setup
			long unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.OpenCLKernelProfileRecord_MinimumDuration_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, OpenCLKernelProfileRecord_Name_Get, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.OpenCLKernelProfileRecord+NativeMethods+X86", "OpenCLKernelProfileRecord_Name_Get")]
		public static global::System.IntPtr OpenCLKernelProfileRecord_Name_Get(global::System.IntPtr instance)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.OpenCLKernelProfileRecord_Name_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, OpenCLKernelProfileRecord_TotalDuration_Get, [fwd] [return] [EETypeRva:0x000419B0] long____int64, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.OpenCLKernelProfileRecord+NativeMethods+X86", "OpenCLKernelProfileRecord_TotalDuration_Get")]
		public static long OpenCLKernelProfileRecord_TotalDuration_Get(global::System.IntPtr instance)
		{
			// Setup
			long unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.OpenCLKernelProfileRecord_TotalDuration_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, PixelCollection_Create, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.PixelCollection+NativeMethods+X86", "PixelCollection_Create")]
		public static global::System.IntPtr PixelCollection_Create(
					global::System.IntPtr image, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.PixelCollection_Create(
									image, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, PixelCollection_Dispose, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.PixelCollection+NativeMethods+X86", "PixelCollection_Dispose")]
		public static void PixelCollection_Dispose(global::System.IntPtr instance)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.PixelCollection_Dispose(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, PixelCollection_GetArea, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.PixelCollection+NativeMethods+X86", "PixelCollection_GetArea")]
		public static global::System.IntPtr PixelCollection_GetArea(
					global::System.IntPtr Instance, 
					global::System.UIntPtr x, 
					global::System.UIntPtr y, 
					global::System.UIntPtr width, 
					global::System.UIntPtr height, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.PixelCollection_GetArea(
									Instance, 
									x, 
									y, 
									width, 
									height, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, PixelCollection_SetArea, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x00042A40] rg_ushort__unsigned short *, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.PixelCollection+NativeMethods+X86", "PixelCollection_SetArea")]
		public static void PixelCollection_SetArea(
					global::System.IntPtr Instance, 
					global::System.UIntPtr x, 
					global::System.UIntPtr y, 
					global::System.UIntPtr width, 
					global::System.UIntPtr height, 
					ushort[] values, 
					global::System.UIntPtr length, 
					out global::System.IntPtr exception)
		{
			// Setup
			ushort* unsafe_values;
			// Marshalling
			fixed (ushort* pinned_values = ((values != null 
						&& values.Length == 0) ? new ushort[1] : values))
			{
				unsafe_values = (ushort*)pinned_values;
				fixed (global::System.IntPtr* pinned_exception = &(exception))
				{
					// Call to native method
					global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.PixelCollection_SetArea(
										Instance, 
										x, 
										y, 
										width, 
										height, 
										unsafe_values, 
										length, 
										pinned_exception
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				}
			}
			// Return
		}

		// Signature, PixelCollection_ToByteArray, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.PixelCollection+NativeMethods+X86", "PixelCollection_ToByteArray")]
		public static global::System.IntPtr PixelCollection_ToByteArray(
					global::System.IntPtr Instance, 
					global::System.UIntPtr x, 
					global::System.UIntPtr y, 
					global::System.UIntPtr width, 
					global::System.UIntPtr height, 
					global::System.IntPtr mapping, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.PixelCollection_ToByteArray(
									Instance, 
									x, 
									y, 
									width, 
									height, 
									mapping, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, PixelCollection_ToShortArray, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.PixelCollection+NativeMethods+X86", "PixelCollection_ToShortArray")]
		public static global::System.IntPtr PixelCollection_ToShortArray(
					global::System.IntPtr Instance, 
					global::System.UIntPtr x, 
					global::System.UIntPtr y, 
					global::System.UIntPtr width, 
					global::System.UIntPtr height, 
					global::System.IntPtr mapping, 
					out global::System.IntPtr exception)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.PixelCollection_ToShortArray(
									Instance, 
									x, 
									y, 
									width, 
									height, 
									mapping, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, Quantum_Depth_Get, [fwd] [return] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.Quantum+NativeMethods+X86", "Quantum_Depth_Get")]
		public static global::System.UIntPtr Quantum_Depth_Get()
		{
			// Setup
			global::System.UIntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.Quantum_Depth_Get();
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, Quantum_Max_Get, [fwd] [return] [EETypeRva:0x000419B0] ushort__unsigned short, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.Quantum+NativeMethods+X86", "Quantum_Max_Get")]
		public static ushort Quantum_Max_Get()
		{
			// Setup
			ushort unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.Quantum_Max_Get();
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, Quantum_ScaleToByte, [fwd] [return] [EETypeRva:0x000419B0] byte__unsigned char, [fwd] [in] [EETypeRva:0x000419B0] ushort__unsigned short, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.Quantum+NativeMethods+X86", "Quantum_ScaleToByte")]
		public static byte Quantum_ScaleToByte(ushort value)
		{
			// Setup
			byte unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.Quantum_ScaleToByte(value);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, ResourceLimits_Area_Get, [fwd] [return] [EETypeRva:0x000419B0] ulong__unsigned __int64, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.ResourceLimits+NativeMethods+X86", "ResourceLimits_Area_Get")]
		public static ulong ResourceLimits_Area_Get()
		{
			// Setup
			ulong unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.ResourceLimits_Area_Get();
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, ResourceLimits_Area_Set, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] ulong__unsigned __int64, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.ResourceLimits+NativeMethods+X86", "ResourceLimits_Area_Set")]
		public static void ResourceLimits_Area_Set(ulong value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.ResourceLimits_Area_Set(value);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, ResourceLimits_Disk_Get, [fwd] [return] [EETypeRva:0x000419B0] ulong__unsigned __int64, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.ResourceLimits+NativeMethods+X86", "ResourceLimits_Disk_Get")]
		public static ulong ResourceLimits_Disk_Get()
		{
			// Setup
			ulong unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.ResourceLimits_Disk_Get();
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, ResourceLimits_Disk_Set, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] ulong__unsigned __int64, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.ResourceLimits+NativeMethods+X86", "ResourceLimits_Disk_Set")]
		public static void ResourceLimits_Disk_Set(ulong value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.ResourceLimits_Disk_Set(value);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, ResourceLimits_Height_Get, [fwd] [return] [EETypeRva:0x000419B0] ulong__unsigned __int64, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.ResourceLimits+NativeMethods+X86", "ResourceLimits_Height_Get")]
		public static ulong ResourceLimits_Height_Get()
		{
			// Setup
			ulong unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.ResourceLimits_Height_Get();
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, ResourceLimits_Height_Set, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] ulong__unsigned __int64, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.ResourceLimits+NativeMethods+X86", "ResourceLimits_Height_Set")]
		public static void ResourceLimits_Height_Set(ulong value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.ResourceLimits_Height_Set(value);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, ResourceLimits_ListLength_Get, [fwd] [return] [EETypeRva:0x000419B0] ulong__unsigned __int64, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.ResourceLimits+NativeMethods+X86", "ResourceLimits_ListLength_Get")]
		public static ulong ResourceLimits_ListLength_Get()
		{
			// Setup
			ulong unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.ResourceLimits_ListLength_Get();
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, ResourceLimits_ListLength_Set, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] ulong__unsigned __int64, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.ResourceLimits+NativeMethods+X86", "ResourceLimits_ListLength_Set")]
		public static void ResourceLimits_ListLength_Set(ulong value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.ResourceLimits_ListLength_Set(value);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, ResourceLimits_Memory_Get, [fwd] [return] [EETypeRva:0x000419B0] ulong__unsigned __int64, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.ResourceLimits+NativeMethods+X86", "ResourceLimits_Memory_Get")]
		public static ulong ResourceLimits_Memory_Get()
		{
			// Setup
			ulong unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.ResourceLimits_Memory_Get();
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, ResourceLimits_Memory_Set, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] ulong__unsigned __int64, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.ResourceLimits+NativeMethods+X86", "ResourceLimits_Memory_Set")]
		public static void ResourceLimits_Memory_Set(ulong value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.ResourceLimits_Memory_Set(value);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, ResourceLimits_Thread_Get, [fwd] [return] [EETypeRva:0x000419B0] ulong__unsigned __int64, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.ResourceLimits+NativeMethods+X86", "ResourceLimits_Thread_Get")]
		public static ulong ResourceLimits_Thread_Get()
		{
			// Setup
			ulong unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.ResourceLimits_Thread_Get();
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, ResourceLimits_Thread_Set, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] ulong__unsigned __int64, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.ResourceLimits+NativeMethods+X86", "ResourceLimits_Thread_Set")]
		public static void ResourceLimits_Thread_Set(ulong value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.ResourceLimits_Thread_Set(value);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, ResourceLimits_Throttle_Get, [fwd] [return] [EETypeRva:0x000419B0] ulong__unsigned __int64, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.ResourceLimits+NativeMethods+X86", "ResourceLimits_Throttle_Get")]
		public static ulong ResourceLimits_Throttle_Get()
		{
			// Setup
			ulong unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.ResourceLimits_Throttle_Get();
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, ResourceLimits_Throttle_Set, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] ulong__unsigned __int64, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.ResourceLimits+NativeMethods+X86", "ResourceLimits_Throttle_Set")]
		public static void ResourceLimits_Throttle_Set(ulong value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.ResourceLimits_Throttle_Set(value);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, ResourceLimits_Width_Get, [fwd] [return] [EETypeRva:0x000419B0] ulong__unsigned __int64, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.ResourceLimits+NativeMethods+X86", "ResourceLimits_Width_Get")]
		public static ulong ResourceLimits_Width_Get()
		{
			// Setup
			ulong unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.ResourceLimits_Width_Get();
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, ResourceLimits_Width_Set, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] ulong__unsigned __int64, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.ResourceLimits+NativeMethods+X86", "ResourceLimits_Width_Set")]
		public static void ResourceLimits_Width_Set(ulong value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.ResourceLimits_Width_Set(value);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, ResourceLimits_LimitMemory, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] double__double, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.ResourceLimits+NativeMethods+X86", "ResourceLimits_LimitMemory")]
		public static void ResourceLimits_LimitMemory(double percentage)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.ResourceLimits_LimitMemory(percentage);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, DrawingSettings_Create, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingSettings+NativeMethods+X86", "DrawingSettings_Create")]
		public static global::System.IntPtr DrawingSettings_Create()
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.DrawingSettings_Create();
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, DrawingSettings_Dispose, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingSettings+NativeMethods+X86", "DrawingSettings_Dispose")]
		public static void DrawingSettings_Dispose(global::System.IntPtr instance)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.DrawingSettings_Dispose(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, DrawingSettings_BorderColor_Get, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingSettings+NativeMethods+X86", "DrawingSettings_BorderColor_Get")]
		public static global::System.IntPtr DrawingSettings_BorderColor_Get(global::System.IntPtr instance)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.DrawingSettings_BorderColor_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, DrawingSettings_BorderColor_Set, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingSettings+NativeMethods+X86", "DrawingSettings_BorderColor_Set")]
		public static void DrawingSettings_BorderColor_Set(
					global::System.IntPtr instance, 
					global::System.IntPtr value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.DrawingSettings_BorderColor_Set(
								instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, DrawingSettings_FillColor_Get, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingSettings+NativeMethods+X86", "DrawingSettings_FillColor_Get")]
		public static global::System.IntPtr DrawingSettings_FillColor_Get(global::System.IntPtr instance)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.DrawingSettings_FillColor_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, DrawingSettings_FillColor_Set, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingSettings+NativeMethods+X86", "DrawingSettings_FillColor_Set")]
		public static void DrawingSettings_FillColor_Set(
					global::System.IntPtr instance, 
					global::System.IntPtr value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.DrawingSettings_FillColor_Set(
								instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, DrawingSettings_FillRule_Get, [fwd] [return] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingSettings+NativeMethods+X86", "DrawingSettings_FillRule_Get")]
		public static global::System.UIntPtr DrawingSettings_FillRule_Get(global::System.IntPtr instance)
		{
			// Setup
			global::System.UIntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.DrawingSettings_FillRule_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, DrawingSettings_FillRule_Set, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingSettings+NativeMethods+X86", "DrawingSettings_FillRule_Set")]
		public static void DrawingSettings_FillRule_Set(
					global::System.IntPtr instance, 
					global::System.UIntPtr value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.DrawingSettings_FillRule_Set(
								instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, DrawingSettings_Font_Get, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingSettings+NativeMethods+X86", "DrawingSettings_Font_Get")]
		public static global::System.IntPtr DrawingSettings_Font_Get(global::System.IntPtr instance)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.DrawingSettings_Font_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, DrawingSettings_Font_Set, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingSettings+NativeMethods+X86", "DrawingSettings_Font_Set")]
		public static void DrawingSettings_Font_Set(
					global::System.IntPtr instance, 
					global::System.IntPtr value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.DrawingSettings_Font_Set(
								instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, DrawingSettings_FontFamily_Get, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingSettings+NativeMethods+X86", "DrawingSettings_FontFamily_Get")]
		public static global::System.IntPtr DrawingSettings_FontFamily_Get(global::System.IntPtr instance)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.DrawingSettings_FontFamily_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, DrawingSettings_FontFamily_Set, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingSettings+NativeMethods+X86", "DrawingSettings_FontFamily_Set")]
		public static void DrawingSettings_FontFamily_Set(
					global::System.IntPtr instance, 
					global::System.IntPtr value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.DrawingSettings_FontFamily_Set(
								instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, DrawingSettings_FontPointsize_Get, [fwd] [return] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingSettings+NativeMethods+X86", "DrawingSettings_FontPointsize_Get")]
		public static double DrawingSettings_FontPointsize_Get(global::System.IntPtr instance)
		{
			// Setup
			double unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.DrawingSettings_FontPointsize_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, DrawingSettings_FontPointsize_Set, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingSettings+NativeMethods+X86", "DrawingSettings_FontPointsize_Set")]
		public static void DrawingSettings_FontPointsize_Set(
					global::System.IntPtr instance, 
					double value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.DrawingSettings_FontPointsize_Set(
								instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, DrawingSettings_FontStyle_Get, [fwd] [return] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingSettings+NativeMethods+X86", "DrawingSettings_FontStyle_Get")]
		public static global::System.UIntPtr DrawingSettings_FontStyle_Get(global::System.IntPtr instance)
		{
			// Setup
			global::System.UIntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.DrawingSettings_FontStyle_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, DrawingSettings_FontStyle_Set, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingSettings+NativeMethods+X86", "DrawingSettings_FontStyle_Set")]
		public static void DrawingSettings_FontStyle_Set(
					global::System.IntPtr instance, 
					global::System.UIntPtr value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.DrawingSettings_FontStyle_Set(
								instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, DrawingSettings_FontWeight_Get, [fwd] [return] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingSettings+NativeMethods+X86", "DrawingSettings_FontWeight_Get")]
		public static global::System.UIntPtr DrawingSettings_FontWeight_Get(global::System.IntPtr instance)
		{
			// Setup
			global::System.UIntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.DrawingSettings_FontWeight_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, DrawingSettings_FontWeight_Set, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingSettings+NativeMethods+X86", "DrawingSettings_FontWeight_Set")]
		public static void DrawingSettings_FontWeight_Set(
					global::System.IntPtr instance, 
					global::System.UIntPtr value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.DrawingSettings_FontWeight_Set(
								instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, DrawingSettings_StrokeAntiAlias_Get, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingSettings+NativeMethods+X86", "DrawingSettings_StrokeAntiAlias_Get")]
		public static bool DrawingSettings_StrokeAntiAlias_Get(global::System.IntPtr instance)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.DrawingSettings_StrokeAntiAlias_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value != 0;
		}

		// Signature, DrawingSettings_StrokeAntiAlias_Set, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00040848] bool__System.Boolean, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingSettings+NativeMethods+X86", "DrawingSettings_StrokeAntiAlias_Set")]
		public static void DrawingSettings_StrokeAntiAlias_Set(
					global::System.IntPtr instance, 
					bool value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.DrawingSettings_StrokeAntiAlias_Set(
								instance, 
								(value ? 1 : 0)
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, DrawingSettings_StrokeColor_Get, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingSettings+NativeMethods+X86", "DrawingSettings_StrokeColor_Get")]
		public static global::System.IntPtr DrawingSettings_StrokeColor_Get(global::System.IntPtr instance)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.DrawingSettings_StrokeColor_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, DrawingSettings_StrokeColor_Set, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingSettings+NativeMethods+X86", "DrawingSettings_StrokeColor_Set")]
		public static void DrawingSettings_StrokeColor_Set(
					global::System.IntPtr instance, 
					global::System.IntPtr value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.DrawingSettings_StrokeColor_Set(
								instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, DrawingSettings_StrokeDashOffset_Get, [fwd] [return] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingSettings+NativeMethods+X86", "DrawingSettings_StrokeDashOffset_Get")]
		public static double DrawingSettings_StrokeDashOffset_Get(global::System.IntPtr instance)
		{
			// Setup
			double unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.DrawingSettings_StrokeDashOffset_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, DrawingSettings_StrokeDashOffset_Set, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingSettings+NativeMethods+X86", "DrawingSettings_StrokeDashOffset_Set")]
		public static void DrawingSettings_StrokeDashOffset_Set(
					global::System.IntPtr instance, 
					double value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.DrawingSettings_StrokeDashOffset_Set(
								instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, DrawingSettings_StrokeLineCap_Get, [fwd] [return] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingSettings+NativeMethods+X86", "DrawingSettings_StrokeLineCap_Get")]
		public static global::System.UIntPtr DrawingSettings_StrokeLineCap_Get(global::System.IntPtr instance)
		{
			// Setup
			global::System.UIntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.DrawingSettings_StrokeLineCap_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, DrawingSettings_StrokeLineCap_Set, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingSettings+NativeMethods+X86", "DrawingSettings_StrokeLineCap_Set")]
		public static void DrawingSettings_StrokeLineCap_Set(
					global::System.IntPtr instance, 
					global::System.UIntPtr value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.DrawingSettings_StrokeLineCap_Set(
								instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, DrawingSettings_StrokeLineJoin_Get, [fwd] [return] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingSettings+NativeMethods+X86", "DrawingSettings_StrokeLineJoin_Get")]
		public static global::System.UIntPtr DrawingSettings_StrokeLineJoin_Get(global::System.IntPtr instance)
		{
			// Setup
			global::System.UIntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.DrawingSettings_StrokeLineJoin_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, DrawingSettings_StrokeLineJoin_Set, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingSettings+NativeMethods+X86", "DrawingSettings_StrokeLineJoin_Set")]
		public static void DrawingSettings_StrokeLineJoin_Set(
					global::System.IntPtr instance, 
					global::System.UIntPtr value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.DrawingSettings_StrokeLineJoin_Set(
								instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, DrawingSettings_StrokeMiterLimit_Get, [fwd] [return] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingSettings+NativeMethods+X86", "DrawingSettings_StrokeMiterLimit_Get")]
		public static global::System.UIntPtr DrawingSettings_StrokeMiterLimit_Get(global::System.IntPtr instance)
		{
			// Setup
			global::System.UIntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.DrawingSettings_StrokeMiterLimit_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, DrawingSettings_StrokeMiterLimit_Set, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingSettings+NativeMethods+X86", "DrawingSettings_StrokeMiterLimit_Set")]
		public static void DrawingSettings_StrokeMiterLimit_Set(
					global::System.IntPtr instance, 
					global::System.UIntPtr value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.DrawingSettings_StrokeMiterLimit_Set(
								instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, DrawingSettings_StrokeWidth_Get, [fwd] [return] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingSettings+NativeMethods+X86", "DrawingSettings_StrokeWidth_Get")]
		public static double DrawingSettings_StrokeWidth_Get(global::System.IntPtr instance)
		{
			// Setup
			double unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.DrawingSettings_StrokeWidth_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, DrawingSettings_StrokeWidth_Set, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingSettings+NativeMethods+X86", "DrawingSettings_StrokeWidth_Set")]
		public static void DrawingSettings_StrokeWidth_Set(
					global::System.IntPtr instance, 
					double value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.DrawingSettings_StrokeWidth_Set(
								instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, DrawingSettings_TextAntiAlias_Get, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingSettings+NativeMethods+X86", "DrawingSettings_TextAntiAlias_Get")]
		public static bool DrawingSettings_TextAntiAlias_Get(global::System.IntPtr instance)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.DrawingSettings_TextAntiAlias_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value != 0;
		}

		// Signature, DrawingSettings_TextAntiAlias_Set, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00040848] bool__System.Boolean, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingSettings+NativeMethods+X86", "DrawingSettings_TextAntiAlias_Set")]
		public static void DrawingSettings_TextAntiAlias_Set(
					global::System.IntPtr instance, 
					bool value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.DrawingSettings_TextAntiAlias_Set(
								instance, 
								(value ? 1 : 0)
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, DrawingSettings_TextDirection_Get, [fwd] [return] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingSettings+NativeMethods+X86", "DrawingSettings_TextDirection_Get")]
		public static global::System.UIntPtr DrawingSettings_TextDirection_Get(global::System.IntPtr instance)
		{
			// Setup
			global::System.UIntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.DrawingSettings_TextDirection_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, DrawingSettings_TextDirection_Set, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingSettings+NativeMethods+X86", "DrawingSettings_TextDirection_Set")]
		public static void DrawingSettings_TextDirection_Set(
					global::System.IntPtr instance, 
					global::System.UIntPtr value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.DrawingSettings_TextDirection_Set(
								instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, DrawingSettings_TextEncoding_Get, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingSettings+NativeMethods+X86", "DrawingSettings_TextEncoding_Get")]
		public static global::System.IntPtr DrawingSettings_TextEncoding_Get(global::System.IntPtr instance)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.DrawingSettings_TextEncoding_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, DrawingSettings_TextEncoding_Set, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingSettings+NativeMethods+X86", "DrawingSettings_TextEncoding_Set")]
		public static void DrawingSettings_TextEncoding_Set(
					global::System.IntPtr instance, 
					global::System.IntPtr value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.DrawingSettings_TextEncoding_Set(
								instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, DrawingSettings_TextGravity_Get, [fwd] [return] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingSettings+NativeMethods+X86", "DrawingSettings_TextGravity_Get")]
		public static global::System.UIntPtr DrawingSettings_TextGravity_Get(global::System.IntPtr instance)
		{
			// Setup
			global::System.UIntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.DrawingSettings_TextGravity_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, DrawingSettings_TextGravity_Set, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingSettings+NativeMethods+X86", "DrawingSettings_TextGravity_Set")]
		public static void DrawingSettings_TextGravity_Set(
					global::System.IntPtr instance, 
					global::System.UIntPtr value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.DrawingSettings_TextGravity_Set(
								instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, DrawingSettings_TextInterlineSpacing_Get, [fwd] [return] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingSettings+NativeMethods+X86", "DrawingSettings_TextInterlineSpacing_Get")]
		public static double DrawingSettings_TextInterlineSpacing_Get(global::System.IntPtr instance)
		{
			// Setup
			double unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.DrawingSettings_TextInterlineSpacing_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, DrawingSettings_TextInterlineSpacing_Set, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingSettings+NativeMethods+X86", "DrawingSettings_TextInterlineSpacing_Set")]
		public static void DrawingSettings_TextInterlineSpacing_Set(
					global::System.IntPtr instance, 
					double value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.DrawingSettings_TextInterlineSpacing_Set(
								instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, DrawingSettings_TextInterwordSpacing_Get, [fwd] [return] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingSettings+NativeMethods+X86", "DrawingSettings_TextInterwordSpacing_Get")]
		public static double DrawingSettings_TextInterwordSpacing_Get(global::System.IntPtr instance)
		{
			// Setup
			double unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.DrawingSettings_TextInterwordSpacing_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, DrawingSettings_TextInterwordSpacing_Set, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingSettings+NativeMethods+X86", "DrawingSettings_TextInterwordSpacing_Set")]
		public static void DrawingSettings_TextInterwordSpacing_Set(
					global::System.IntPtr instance, 
					double value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.DrawingSettings_TextInterwordSpacing_Set(
								instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, DrawingSettings_TextKerning_Get, [fwd] [return] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingSettings+NativeMethods+X86", "DrawingSettings_TextKerning_Get")]
		public static double DrawingSettings_TextKerning_Get(global::System.IntPtr instance)
		{
			// Setup
			double unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.DrawingSettings_TextKerning_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, DrawingSettings_TextKerning_Set, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingSettings+NativeMethods+X86", "DrawingSettings_TextKerning_Set")]
		public static void DrawingSettings_TextKerning_Set(
					global::System.IntPtr instance, 
					double value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.DrawingSettings_TextKerning_Set(
								instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, DrawingSettings_TextUnderColor_Get, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingSettings+NativeMethods+X86", "DrawingSettings_TextUnderColor_Get")]
		public static global::System.IntPtr DrawingSettings_TextUnderColor_Get(global::System.IntPtr instance)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.DrawingSettings_TextUnderColor_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, DrawingSettings_TextUnderColor_Set, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingSettings+NativeMethods+X86", "DrawingSettings_TextUnderColor_Set")]
		public static void DrawingSettings_TextUnderColor_Set(
					global::System.IntPtr instance, 
					global::System.IntPtr value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.DrawingSettings_TextUnderColor_Set(
								instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, DrawingSettings_SetFillPattern, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingSettings+NativeMethods+X86", "DrawingSettings_SetFillPattern")]
		public static void DrawingSettings_SetFillPattern(
					global::System.IntPtr Instance, 
					global::System.IntPtr value, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.DrawingSettings_SetFillPattern(
									Instance, 
									value, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, DrawingSettings_SetAffine, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingSettings+NativeMethods+X86", "DrawingSettings_SetAffine")]
		public static void DrawingSettings_SetAffine(
					global::System.IntPtr Instance, 
					double scaleX, 
					double scaleY, 
					double shearX, 
					double shearY, 
					double translateX, 
					double translateY, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.DrawingSettings_SetAffine(
									Instance, 
									scaleX, 
									scaleY, 
									shearX, 
									shearY, 
									translateX, 
									translateY, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, DrawingSettings_SetStrokeDashArray, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00042A40] rg_double__double *, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingSettings+NativeMethods+X86", "DrawingSettings_SetStrokeDashArray")]
		public static void DrawingSettings_SetStrokeDashArray(
					global::System.IntPtr Instance, 
					double[] dash, 
					global::System.UIntPtr length)
		{
			// Setup
			double* unsafe_dash;
			// Marshalling
			fixed (double* pinned_dash = ((dash != null 
						&& dash.Length == 0) ? new double[1] : dash))
			{
				unsafe_dash = (double*)pinned_dash;
				// Call to native method
				global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.DrawingSettings_SetStrokeDashArray(
									Instance, 
									unsafe_dash, 
									length
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, DrawingSettings_SetStrokePattern, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingSettings+NativeMethods+X86", "DrawingSettings_SetStrokePattern")]
		public static void DrawingSettings_SetStrokePattern(
					global::System.IntPtr Instance, 
					global::System.IntPtr value, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.DrawingSettings_SetStrokePattern(
									Instance, 
									value, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, DrawingSettings_SetText, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.DrawingSettings+NativeMethods+X86", "DrawingSettings_SetText")]
		public static void DrawingSettings_SetText(
					global::System.IntPtr Instance, 
					global::System.IntPtr value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.DrawingSettings_SetText(
								Instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, MagickSettings_Create, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickSettings+NativeMethods+X86", "MagickSettings_Create")]
		public static global::System.IntPtr MagickSettings_Create()
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickSettings_Create();
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, MagickSettings_Dispose, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickSettings+NativeMethods+X86", "MagickSettings_Dispose")]
		public static void MagickSettings_Dispose(global::System.IntPtr instance)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickSettings_Dispose(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, MagickSettings_AntiAlias_Get, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickSettings+NativeMethods+X86", "MagickSettings_AntiAlias_Get")]
		public static bool MagickSettings_AntiAlias_Get(global::System.IntPtr instance)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickSettings_AntiAlias_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value != 0;
		}

		// Signature, MagickSettings_AntiAlias_Set, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00040848] bool__System.Boolean, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickSettings+NativeMethods+X86", "MagickSettings_AntiAlias_Set")]
		public static void MagickSettings_AntiAlias_Set(
					global::System.IntPtr instance, 
					bool value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickSettings_AntiAlias_Set(
								instance, 
								(value ? 1 : 0)
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, MagickSettings_BackgroundColor_Get, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickSettings+NativeMethods+X86", "MagickSettings_BackgroundColor_Get")]
		public static global::System.IntPtr MagickSettings_BackgroundColor_Get(global::System.IntPtr instance)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickSettings_BackgroundColor_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, MagickSettings_BackgroundColor_Set, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickSettings+NativeMethods+X86", "MagickSettings_BackgroundColor_Set")]
		public static void MagickSettings_BackgroundColor_Set(
					global::System.IntPtr instance, 
					global::System.IntPtr value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickSettings_BackgroundColor_Set(
								instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, MagickSettings_ColorSpace_Get, [fwd] [return] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickSettings+NativeMethods+X86", "MagickSettings_ColorSpace_Get")]
		public static global::System.UIntPtr MagickSettings_ColorSpace_Get(global::System.IntPtr instance)
		{
			// Setup
			global::System.UIntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickSettings_ColorSpace_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, MagickSettings_ColorSpace_Set, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickSettings+NativeMethods+X86", "MagickSettings_ColorSpace_Set")]
		public static void MagickSettings_ColorSpace_Set(
					global::System.IntPtr instance, 
					global::System.UIntPtr value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickSettings_ColorSpace_Set(
								instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, MagickSettings_ColorType_Get, [fwd] [return] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickSettings+NativeMethods+X86", "MagickSettings_ColorType_Get")]
		public static global::System.UIntPtr MagickSettings_ColorType_Get(global::System.IntPtr instance)
		{
			// Setup
			global::System.UIntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickSettings_ColorType_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, MagickSettings_ColorType_Set, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickSettings+NativeMethods+X86", "MagickSettings_ColorType_Set")]
		public static void MagickSettings_ColorType_Set(
					global::System.IntPtr instance, 
					global::System.UIntPtr value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickSettings_ColorType_Set(
								instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, MagickSettings_Compression_Get, [fwd] [return] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickSettings+NativeMethods+X86", "MagickSettings_Compression_Get")]
		public static global::System.UIntPtr MagickSettings_Compression_Get(global::System.IntPtr instance)
		{
			// Setup
			global::System.UIntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickSettings_Compression_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, MagickSettings_Compression_Set, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickSettings+NativeMethods+X86", "MagickSettings_Compression_Set")]
		public static void MagickSettings_Compression_Set(
					global::System.IntPtr instance, 
					global::System.UIntPtr value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickSettings_Compression_Set(
								instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, MagickSettings_Debug_Get, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickSettings+NativeMethods+X86", "MagickSettings_Debug_Get")]
		public static bool MagickSettings_Debug_Get(global::System.IntPtr instance)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickSettings_Debug_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value != 0;
		}

		// Signature, MagickSettings_Debug_Set, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00040848] bool__System.Boolean, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickSettings+NativeMethods+X86", "MagickSettings_Debug_Set")]
		public static void MagickSettings_Debug_Set(
					global::System.IntPtr instance, 
					bool value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickSettings_Debug_Set(
								instance, 
								(value ? 1 : 0)
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, MagickSettings_Density_Get, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickSettings+NativeMethods+X86", "MagickSettings_Density_Get")]
		public static global::System.IntPtr MagickSettings_Density_Get(global::System.IntPtr instance)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickSettings_Density_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, MagickSettings_Density_Set, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickSettings+NativeMethods+X86", "MagickSettings_Density_Set")]
		public static void MagickSettings_Density_Set(
					global::System.IntPtr instance, 
					global::System.IntPtr value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickSettings_Density_Set(
								instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, MagickSettings_Depth_Get, [fwd] [return] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickSettings+NativeMethods+X86", "MagickSettings_Depth_Get")]
		public static global::System.UIntPtr MagickSettings_Depth_Get(global::System.IntPtr instance)
		{
			// Setup
			global::System.UIntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickSettings_Depth_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, MagickSettings_Depth_Set, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickSettings+NativeMethods+X86", "MagickSettings_Depth_Set")]
		public static void MagickSettings_Depth_Set(
					global::System.IntPtr instance, 
					global::System.UIntPtr value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickSettings_Depth_Set(
								instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, MagickSettings_Endian_Get, [fwd] [return] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickSettings+NativeMethods+X86", "MagickSettings_Endian_Get")]
		public static global::System.UIntPtr MagickSettings_Endian_Get(global::System.IntPtr instance)
		{
			// Setup
			global::System.UIntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickSettings_Endian_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, MagickSettings_Endian_Set, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickSettings+NativeMethods+X86", "MagickSettings_Endian_Set")]
		public static void MagickSettings_Endian_Set(
					global::System.IntPtr instance, 
					global::System.UIntPtr value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickSettings_Endian_Set(
								instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, MagickSettings_Extract_Get, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickSettings+NativeMethods+X86", "MagickSettings_Extract_Get")]
		public static global::System.IntPtr MagickSettings_Extract_Get(global::System.IntPtr instance)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickSettings_Extract_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, MagickSettings_Extract_Set, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickSettings+NativeMethods+X86", "MagickSettings_Extract_Set")]
		public static void MagickSettings_Extract_Set(
					global::System.IntPtr instance, 
					global::System.IntPtr value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickSettings_Extract_Set(
								instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, MagickSettings_Format_Get, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickSettings+NativeMethods+X86", "MagickSettings_Format_Get")]
		public static global::System.IntPtr MagickSettings_Format_Get(global::System.IntPtr instance)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickSettings_Format_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, MagickSettings_Format_Set, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickSettings+NativeMethods+X86", "MagickSettings_Format_Set")]
		public static void MagickSettings_Format_Set(
					global::System.IntPtr instance, 
					global::System.IntPtr value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickSettings_Format_Set(
								instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, MagickSettings_Font_Get, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickSettings+NativeMethods+X86", "MagickSettings_Font_Get")]
		public static global::System.IntPtr MagickSettings_Font_Get(global::System.IntPtr instance)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickSettings_Font_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, MagickSettings_Font_Set, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickSettings+NativeMethods+X86", "MagickSettings_Font_Set")]
		public static void MagickSettings_Font_Set(
					global::System.IntPtr instance, 
					global::System.IntPtr value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickSettings_Font_Set(
								instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, MagickSettings_FontPointsize_Get, [fwd] [return] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickSettings+NativeMethods+X86", "MagickSettings_FontPointsize_Get")]
		public static double MagickSettings_FontPointsize_Get(global::System.IntPtr instance)
		{
			// Setup
			double unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickSettings_FontPointsize_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, MagickSettings_FontPointsize_Set, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickSettings+NativeMethods+X86", "MagickSettings_FontPointsize_Set")]
		public static void MagickSettings_FontPointsize_Set(
					global::System.IntPtr instance, 
					double value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickSettings_FontPointsize_Set(
								instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, MagickSettings_Monochrome_Get, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickSettings+NativeMethods+X86", "MagickSettings_Monochrome_Get")]
		public static bool MagickSettings_Monochrome_Get(global::System.IntPtr instance)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickSettings_Monochrome_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value != 0;
		}

		// Signature, MagickSettings_Monochrome_Set, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00040848] bool__System.Boolean, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickSettings+NativeMethods+X86", "MagickSettings_Monochrome_Set")]
		public static void MagickSettings_Monochrome_Set(
					global::System.IntPtr instance, 
					bool value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickSettings_Monochrome_Set(
								instance, 
								(value ? 1 : 0)
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, MagickSettings_Interlace_Get, [fwd] [return] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickSettings+NativeMethods+X86", "MagickSettings_Interlace_Get")]
		public static global::System.UIntPtr MagickSettings_Interlace_Get(global::System.IntPtr instance)
		{
			// Setup
			global::System.UIntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickSettings_Interlace_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, MagickSettings_Interlace_Set, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickSettings+NativeMethods+X86", "MagickSettings_Interlace_Set")]
		public static void MagickSettings_Interlace_Set(
					global::System.IntPtr instance, 
					global::System.UIntPtr value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickSettings_Interlace_Set(
								instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, MagickSettings_Verbose_Get, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickSettings+NativeMethods+X86", "MagickSettings_Verbose_Get")]
		public static bool MagickSettings_Verbose_Get(global::System.IntPtr instance)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickSettings_Verbose_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value != 0;
		}

		// Signature, MagickSettings_Verbose_Set, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00040848] bool__System.Boolean, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickSettings+NativeMethods+X86", "MagickSettings_Verbose_Set")]
		public static void MagickSettings_Verbose_Set(
					global::System.IntPtr instance, 
					bool value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickSettings_Verbose_Set(
								instance, 
								(value ? 1 : 0)
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, MagickSettings_SetColorFuzz, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickSettings+NativeMethods+X86", "MagickSettings_SetColorFuzz")]
		public static void MagickSettings_SetColorFuzz(
					global::System.IntPtr Instance, 
					double value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickSettings_SetColorFuzz(
								Instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, MagickSettings_SetFileName, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickSettings+NativeMethods+X86", "MagickSettings_SetFileName")]
		public static void MagickSettings_SetFileName(
					global::System.IntPtr Instance, 
					global::System.IntPtr value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickSettings_SetFileName(
								Instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, MagickSettings_SetNumberScenes, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickSettings+NativeMethods+X86", "MagickSettings_SetNumberScenes")]
		public static void MagickSettings_SetNumberScenes(
					global::System.IntPtr Instance, 
					global::System.UIntPtr value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickSettings_SetNumberScenes(
								Instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, MagickSettings_SetOption, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickSettings+NativeMethods+X86", "MagickSettings_SetOption")]
		public static void MagickSettings_SetOption(
					global::System.IntPtr Instance, 
					global::System.IntPtr key, 
					global::System.IntPtr value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickSettings_SetOption(
								Instance, 
								key, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, MagickSettings_SetPage, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickSettings+NativeMethods+X86", "MagickSettings_SetPage")]
		public static void MagickSettings_SetPage(
					global::System.IntPtr Instance, 
					global::System.IntPtr value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickSettings_SetPage(
								Instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, MagickSettings_SetPing, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00040848] bool__System.Boolean, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickSettings+NativeMethods+X86", "MagickSettings_SetPing")]
		public static void MagickSettings_SetPing(
					global::System.IntPtr Instance, 
					bool value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickSettings_SetPing(
								Instance, 
								(value ? 1 : 0)
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, MagickSettings_SetQuality, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickSettings+NativeMethods+X86", "MagickSettings_SetQuality")]
		public static void MagickSettings_SetQuality(
					global::System.IntPtr Instance, 
					global::System.UIntPtr value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickSettings_SetQuality(
								Instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, MagickSettings_SetScenes, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickSettings+NativeMethods+X86", "MagickSettings_SetScenes")]
		public static void MagickSettings_SetScenes(
					global::System.IntPtr Instance, 
					global::System.IntPtr value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickSettings_SetScenes(
								Instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, MagickSettings_SetScene, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickSettings+NativeMethods+X86", "MagickSettings_SetScene")]
		public static void MagickSettings_SetScene(
					global::System.IntPtr Instance, 
					global::System.UIntPtr value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickSettings_SetScene(
								Instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, MagickSettings_SetSize, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickSettings+NativeMethods+X86", "MagickSettings_SetSize")]
		public static void MagickSettings_SetSize(
					global::System.IntPtr Instance, 
					global::System.IntPtr value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickSettings_SetSize(
								Instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, MontageSettings_Create, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MontageSettings+NativeMethods+X86", "MontageSettings_Create")]
		public static global::System.IntPtr MontageSettings_Create()
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MontageSettings_Create();
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, MontageSettings_Dispose, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MontageSettings+NativeMethods+X86", "MontageSettings_Dispose")]
		public static void MontageSettings_Dispose(global::System.IntPtr instance)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MontageSettings_Dispose(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, MontageSettings_SetBackgroundColor, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MontageSettings+NativeMethods+X86", "MontageSettings_SetBackgroundColor")]
		public static void MontageSettings_SetBackgroundColor(
					global::System.IntPtr Instance, 
					global::System.IntPtr value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MontageSettings_SetBackgroundColor(
								Instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, MontageSettings_SetBorderColor, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MontageSettings+NativeMethods+X86", "MontageSettings_SetBorderColor")]
		public static void MontageSettings_SetBorderColor(
					global::System.IntPtr Instance, 
					global::System.IntPtr value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MontageSettings_SetBorderColor(
								Instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, MontageSettings_SetBorderWidth, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MontageSettings+NativeMethods+X86", "MontageSettings_SetBorderWidth")]
		public static void MontageSettings_SetBorderWidth(
					global::System.IntPtr Instance, 
					global::System.UIntPtr value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MontageSettings_SetBorderWidth(
								Instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, MontageSettings_SetFillColor, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MontageSettings+NativeMethods+X86", "MontageSettings_SetFillColor")]
		public static void MontageSettings_SetFillColor(
					global::System.IntPtr Instance, 
					global::System.IntPtr value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MontageSettings_SetFillColor(
								Instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, MontageSettings_SetFont, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MontageSettings+NativeMethods+X86", "MontageSettings_SetFont")]
		public static void MontageSettings_SetFont(
					global::System.IntPtr Instance, 
					global::System.IntPtr value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MontageSettings_SetFont(
								Instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, MontageSettings_SetFontPointsize, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MontageSettings+NativeMethods+X86", "MontageSettings_SetFontPointsize")]
		public static void MontageSettings_SetFontPointsize(
					global::System.IntPtr Instance, 
					double value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MontageSettings_SetFontPointsize(
								Instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, MontageSettings_SetFrameGeometry, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MontageSettings+NativeMethods+X86", "MontageSettings_SetFrameGeometry")]
		public static void MontageSettings_SetFrameGeometry(
					global::System.IntPtr Instance, 
					global::System.IntPtr value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MontageSettings_SetFrameGeometry(
								Instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, MontageSettings_SetGeometry, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MontageSettings+NativeMethods+X86", "MontageSettings_SetGeometry")]
		public static void MontageSettings_SetGeometry(
					global::System.IntPtr Instance, 
					global::System.IntPtr value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MontageSettings_SetGeometry(
								Instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, MontageSettings_SetGravity, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MontageSettings+NativeMethods+X86", "MontageSettings_SetGravity")]
		public static void MontageSettings_SetGravity(
					global::System.IntPtr Instance, 
					global::System.UIntPtr value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MontageSettings_SetGravity(
								Instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, MontageSettings_SetShadow, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00040848] bool__System.Boolean, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MontageSettings+NativeMethods+X86", "MontageSettings_SetShadow")]
		public static void MontageSettings_SetShadow(
					global::System.IntPtr Instance, 
					bool value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MontageSettings_SetShadow(
								Instance, 
								(value ? 1 : 0)
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, MontageSettings_SetStrokeColor, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MontageSettings+NativeMethods+X86", "MontageSettings_SetStrokeColor")]
		public static void MontageSettings_SetStrokeColor(
					global::System.IntPtr Instance, 
					global::System.IntPtr value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MontageSettings_SetStrokeColor(
								Instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, MontageSettings_SetTextureFileName, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MontageSettings+NativeMethods+X86", "MontageSettings_SetTextureFileName")]
		public static void MontageSettings_SetTextureFileName(
					global::System.IntPtr Instance, 
					global::System.IntPtr value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MontageSettings_SetTextureFileName(
								Instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, MontageSettings_SetTileGeometry, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MontageSettings+NativeMethods+X86", "MontageSettings_SetTileGeometry")]
		public static void MontageSettings_SetTileGeometry(
					global::System.IntPtr Instance, 
					global::System.IntPtr value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MontageSettings_SetTileGeometry(
								Instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, MontageSettings_SetTitle, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MontageSettings+NativeMethods+X86", "MontageSettings_SetTitle")]
		public static void MontageSettings_SetTitle(
					global::System.IntPtr Instance, 
					global::System.IntPtr value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MontageSettings_SetTitle(
								Instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, QuantizeSettings_Create, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.QuantizeSettings+NativeMethods+X86", "QuantizeSettings_Create")]
		public static global::System.IntPtr QuantizeSettings_Create()
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.QuantizeSettings_Create();
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, QuantizeSettings_Dispose, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.QuantizeSettings+NativeMethods+X86", "QuantizeSettings_Dispose")]
		public static void QuantizeSettings_Dispose(global::System.IntPtr instance)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.QuantizeSettings_Dispose(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, QuantizeSettings_SetColors, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.QuantizeSettings+NativeMethods+X86", "QuantizeSettings_SetColors")]
		public static void QuantizeSettings_SetColors(
					global::System.IntPtr Instance, 
					global::System.UIntPtr value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.QuantizeSettings_SetColors(
								Instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, QuantizeSettings_SetColorSpace, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.QuantizeSettings+NativeMethods+X86", "QuantizeSettings_SetColorSpace")]
		public static void QuantizeSettings_SetColorSpace(
					global::System.IntPtr Instance, 
					global::System.UIntPtr value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.QuantizeSettings_SetColorSpace(
								Instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, QuantizeSettings_SetDitherMethod, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.QuantizeSettings+NativeMethods+X86", "QuantizeSettings_SetDitherMethod")]
		public static void QuantizeSettings_SetDitherMethod(
					global::System.IntPtr Instance, 
					global::System.UIntPtr value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.QuantizeSettings_SetDitherMethod(
								Instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, QuantizeSettings_SetMeasureErrors, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00040848] bool__System.Boolean, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.QuantizeSettings+NativeMethods+X86", "QuantizeSettings_SetMeasureErrors")]
		public static void QuantizeSettings_SetMeasureErrors(
					global::System.IntPtr Instance, 
					bool value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.QuantizeSettings_SetMeasureErrors(
								Instance, 
								(value ? 1 : 0)
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, QuantizeSettings_SetTreeDepth, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.QuantizeSettings+NativeMethods+X86", "QuantizeSettings_SetTreeDepth")]
		public static void QuantizeSettings_SetTreeDepth(
					global::System.IntPtr Instance, 
					global::System.UIntPtr value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.QuantizeSettings_SetTreeDepth(
								Instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, ChannelMoments_Centroid_Get, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.ChannelMoments+NativeMethods+X86", "ChannelMoments_Centroid_Get")]
		public static global::System.IntPtr ChannelMoments_Centroid_Get(global::System.IntPtr instance)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.ChannelMoments_Centroid_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, ChannelMoments_EllipseAngle_Get, [fwd] [return] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.ChannelMoments+NativeMethods+X86", "ChannelMoments_EllipseAngle_Get")]
		public static double ChannelMoments_EllipseAngle_Get(global::System.IntPtr instance)
		{
			// Setup
			double unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.ChannelMoments_EllipseAngle_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, ChannelMoments_EllipseAxis_Get, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.ChannelMoments+NativeMethods+X86", "ChannelMoments_EllipseAxis_Get")]
		public static global::System.IntPtr ChannelMoments_EllipseAxis_Get(global::System.IntPtr instance)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.ChannelMoments_EllipseAxis_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, ChannelMoments_EllipseEccentricity_Get, [fwd] [return] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.ChannelMoments+NativeMethods+X86", "ChannelMoments_EllipseEccentricity_Get")]
		public static double ChannelMoments_EllipseEccentricity_Get(global::System.IntPtr instance)
		{
			// Setup
			double unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.ChannelMoments_EllipseEccentricity_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, ChannelMoments_EllipseIntensity_Get, [fwd] [return] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.ChannelMoments+NativeMethods+X86", "ChannelMoments_EllipseIntensity_Get")]
		public static double ChannelMoments_EllipseIntensity_Get(global::System.IntPtr instance)
		{
			// Setup
			double unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.ChannelMoments_EllipseIntensity_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, ChannelMoments_GetHuInvariants, [fwd] [return] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.ChannelMoments+NativeMethods+X86", "ChannelMoments_GetHuInvariants")]
		public static double ChannelMoments_GetHuInvariants(
					global::System.IntPtr Instance, 
					global::System.UIntPtr index)
		{
			// Setup
			double unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.ChannelMoments_GetHuInvariants(
								Instance, 
								index
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, ChannelPerceptualHash_GetSrgbHuPhash, [fwd] [return] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.ChannelPerceptualHash+NativeMethods+X86", "ChannelPerceptualHash_GetSrgbHuPhash")]
		public static double ChannelPerceptualHash_GetSrgbHuPhash(
					global::System.IntPtr Instance, 
					global::System.UIntPtr index)
		{
			// Setup
			double unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.ChannelPerceptualHash_GetSrgbHuPhash(
								Instance, 
								index
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, ChannelPerceptualHash_GetHclpHuPhash, [fwd] [return] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.ChannelPerceptualHash+NativeMethods+X86", "ChannelPerceptualHash_GetHclpHuPhash")]
		public static double ChannelPerceptualHash_GetHclpHuPhash(
					global::System.IntPtr Instance, 
					global::System.UIntPtr index)
		{
			// Setup
			double unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.ChannelPerceptualHash_GetHclpHuPhash(
								Instance, 
								index
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, ChannelStatistics_Depth_Get, [fwd] [return] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.ChannelStatistics+NativeMethods+X86", "ChannelStatistics_Depth_Get")]
		public static global::System.UIntPtr ChannelStatistics_Depth_Get(global::System.IntPtr instance)
		{
			// Setup
			global::System.UIntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.ChannelStatistics_Depth_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, ChannelStatistics_Entropy_Get, [fwd] [return] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.ChannelStatistics+NativeMethods+X86", "ChannelStatistics_Entropy_Get")]
		public static double ChannelStatistics_Entropy_Get(global::System.IntPtr instance)
		{
			// Setup
			double unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.ChannelStatistics_Entropy_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, ChannelStatistics_Kurtosis_Get, [fwd] [return] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.ChannelStatistics+NativeMethods+X86", "ChannelStatistics_Kurtosis_Get")]
		public static double ChannelStatistics_Kurtosis_Get(global::System.IntPtr instance)
		{
			// Setup
			double unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.ChannelStatistics_Kurtosis_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, ChannelStatistics_Maximum_Get, [fwd] [return] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.ChannelStatistics+NativeMethods+X86", "ChannelStatistics_Maximum_Get")]
		public static double ChannelStatistics_Maximum_Get(global::System.IntPtr instance)
		{
			// Setup
			double unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.ChannelStatistics_Maximum_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, ChannelStatistics_Mean_Get, [fwd] [return] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.ChannelStatistics+NativeMethods+X86", "ChannelStatistics_Mean_Get")]
		public static double ChannelStatistics_Mean_Get(global::System.IntPtr instance)
		{
			// Setup
			double unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.ChannelStatistics_Mean_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, ChannelStatistics_Minimum_Get, [fwd] [return] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.ChannelStatistics+NativeMethods+X86", "ChannelStatistics_Minimum_Get")]
		public static double ChannelStatistics_Minimum_Get(global::System.IntPtr instance)
		{
			// Setup
			double unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.ChannelStatistics_Minimum_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, ChannelStatistics_Skewness_Get, [fwd] [return] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.ChannelStatistics+NativeMethods+X86", "ChannelStatistics_Skewness_Get")]
		public static double ChannelStatistics_Skewness_Get(global::System.IntPtr instance)
		{
			// Setup
			double unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.ChannelStatistics_Skewness_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, ChannelStatistics_StandardDeviation_Get, [fwd] [return] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.ChannelStatistics+NativeMethods+X86", "ChannelStatistics_StandardDeviation_Get")]
		public static double ChannelStatistics_StandardDeviation_Get(global::System.IntPtr instance)
		{
			// Setup
			double unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.ChannelStatistics_StandardDeviation_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, ChannelStatistics_Sum_Get, [fwd] [return] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.ChannelStatistics+NativeMethods+X86", "ChannelStatistics_Sum_Get")]
		public static double ChannelStatistics_Sum_Get(global::System.IntPtr instance)
		{
			// Setup
			double unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.ChannelStatistics_Sum_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, ChannelStatistics_SumCubed_Get, [fwd] [return] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.ChannelStatistics+NativeMethods+X86", "ChannelStatistics_SumCubed_Get")]
		public static double ChannelStatistics_SumCubed_Get(global::System.IntPtr instance)
		{
			// Setup
			double unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.ChannelStatistics_SumCubed_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, ChannelStatistics_SumFourthPower_Get, [fwd] [return] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.ChannelStatistics+NativeMethods+X86", "ChannelStatistics_SumFourthPower_Get")]
		public static double ChannelStatistics_SumFourthPower_Get(global::System.IntPtr instance)
		{
			// Setup
			double unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.ChannelStatistics_SumFourthPower_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, ChannelStatistics_SumSquared_Get, [fwd] [return] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.ChannelStatistics+NativeMethods+X86", "ChannelStatistics_SumSquared_Get")]
		public static double ChannelStatistics_SumSquared_Get(global::System.IntPtr instance)
		{
			// Setup
			double unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.ChannelStatistics_SumSquared_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, ChannelStatistics_Variance_Get, [fwd] [return] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.ChannelStatistics+NativeMethods+X86", "ChannelStatistics_Variance_Get")]
		public static double ChannelStatistics_Variance_Get(global::System.IntPtr instance)
		{
			// Setup
			double unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.ChannelStatistics_Variance_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, Moments_DisposeList, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.Moments+NativeMethods+X86", "Moments_DisposeList")]
		public static void Moments_DisposeList(global::System.IntPtr list)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.Moments_DisposeList(list);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, Moments_GetInstance, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.Moments+NativeMethods+X86", "Moments_GetInstance")]
		public static global::System.IntPtr Moments_GetInstance(
					global::System.IntPtr list, 
					global::System.UIntPtr channel)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.Moments_GetInstance(
								list, 
								channel
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, PerceptualHash_DisposeList, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.PerceptualHash+NativeMethods+X86", "PerceptualHash_DisposeList")]
		public static void PerceptualHash_DisposeList(global::System.IntPtr list)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.PerceptualHash_DisposeList(list);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, PerceptualHash_GetInstance, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.PerceptualHash+NativeMethods+X86", "PerceptualHash_GetInstance")]
		public static global::System.IntPtr PerceptualHash_GetInstance(
					global::System.IntPtr image, 
					global::System.IntPtr list, 
					global::System.UIntPtr channel)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.PerceptualHash_GetInstance(
								image, 
								list, 
								channel
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, Statistics_DisposeList, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.Statistics+NativeMethods+X86", "Statistics_DisposeList")]
		public static void Statistics_DisposeList(global::System.IntPtr list)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.Statistics_DisposeList(list);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, Statistics_GetInstance, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.Statistics+NativeMethods+X86", "Statistics_GetInstance")]
		public static global::System.IntPtr Statistics_GetInstance(
					global::System.IntPtr list, 
					global::System.UIntPtr channel)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.Statistics_GetInstance(
								list, 
								channel
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, ConnectedComponent_DisposeList, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.ConnectedComponent+NativeMethods+X86", "ConnectedComponent_DisposeList")]
		public static void ConnectedComponent_DisposeList(global::System.IntPtr list)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.ConnectedComponent_DisposeList(list);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, ConnectedComponent_GetArea, [fwd] [return] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.ConnectedComponent+NativeMethods+X86", "ConnectedComponent_GetArea")]
		public static global::System.UIntPtr ConnectedComponent_GetArea(global::System.IntPtr instance)
		{
			// Setup
			global::System.UIntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.ConnectedComponent_GetArea(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, ConnectedComponent_GetCentroid, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.ConnectedComponent+NativeMethods+X86", "ConnectedComponent_GetCentroid")]
		public static global::System.IntPtr ConnectedComponent_GetCentroid(global::System.IntPtr instance)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.ConnectedComponent_GetCentroid(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, ConnectedComponent_GetColor, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.ConnectedComponent+NativeMethods+X86", "ConnectedComponent_GetColor")]
		public static global::System.IntPtr ConnectedComponent_GetColor(global::System.IntPtr instance)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.ConnectedComponent_GetColor(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, ConnectedComponent_GetHeight, [fwd] [return] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.ConnectedComponent+NativeMethods+X86", "ConnectedComponent_GetHeight")]
		public static global::System.UIntPtr ConnectedComponent_GetHeight(global::System.IntPtr instance)
		{
			// Setup
			global::System.UIntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.ConnectedComponent_GetHeight(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, ConnectedComponent_GetId, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.ConnectedComponent+NativeMethods+X86", "ConnectedComponent_GetId")]
		public static global::System.IntPtr ConnectedComponent_GetId(global::System.IntPtr instance)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.ConnectedComponent_GetId(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, ConnectedComponent_GetInstance, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.ConnectedComponent+NativeMethods+X86", "ConnectedComponent_GetInstance")]
		public static global::System.IntPtr ConnectedComponent_GetInstance(
					global::System.IntPtr list, 
					global::System.UIntPtr index)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.ConnectedComponent_GetInstance(
								list, 
								index
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, ConnectedComponent_GetWidth, [fwd] [return] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.ConnectedComponent+NativeMethods+X86", "ConnectedComponent_GetWidth")]
		public static global::System.UIntPtr ConnectedComponent_GetWidth(global::System.IntPtr instance)
		{
			// Setup
			global::System.UIntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.ConnectedComponent_GetWidth(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, ConnectedComponent_GetX, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.ConnectedComponent+NativeMethods+X86", "ConnectedComponent_GetX")]
		public static global::System.IntPtr ConnectedComponent_GetX(global::System.IntPtr instance)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.ConnectedComponent_GetX(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, ConnectedComponent_GetY, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.ConnectedComponent+NativeMethods+X86", "ConnectedComponent_GetY")]
		public static global::System.IntPtr ConnectedComponent_GetY(global::System.IntPtr instance)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.ConnectedComponent_GetY(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, MagickGeometry_Create, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickGeometry+NativeMethods+X86", "MagickGeometry_Create")]
		public static global::System.IntPtr MagickGeometry_Create()
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickGeometry_Create();
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, MagickGeometry_Dispose, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickGeometry+NativeMethods+X86", "MagickGeometry_Dispose")]
		public static void MagickGeometry_Dispose(global::System.IntPtr instance)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickGeometry_Dispose(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, MagickGeometry_X_Get, [fwd] [return] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickGeometry+NativeMethods+X86", "MagickGeometry_X_Get")]
		public static double MagickGeometry_X_Get(global::System.IntPtr instance)
		{
			// Setup
			double unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickGeometry_X_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, MagickGeometry_Y_Get, [fwd] [return] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickGeometry+NativeMethods+X86", "MagickGeometry_Y_Get")]
		public static double MagickGeometry_Y_Get(global::System.IntPtr instance)
		{
			// Setup
			double unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickGeometry_Y_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, MagickGeometry_Width_Get, [fwd] [return] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickGeometry+NativeMethods+X86", "MagickGeometry_Width_Get")]
		public static double MagickGeometry_Width_Get(global::System.IntPtr instance)
		{
			// Setup
			double unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickGeometry_Width_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, MagickGeometry_Height_Get, [fwd] [return] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickGeometry+NativeMethods+X86", "MagickGeometry_Height_Get")]
		public static double MagickGeometry_Height_Get(global::System.IntPtr instance)
		{
			// Setup
			double unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickGeometry_Height_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, MagickGeometry_Initialize, [fwd] [return] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickGeometry+NativeMethods+X86", "MagickGeometry_Initialize")]
		public static global::System.UIntPtr MagickGeometry_Initialize(
					global::System.IntPtr Instance, 
					global::System.IntPtr value)
		{
			// Setup
			global::System.UIntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickGeometry_Initialize(
								Instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, MagickRectangle_Create, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickRectangle+NativeMethods+X86", "MagickRectangle_Create")]
		public static global::System.IntPtr MagickRectangle_Create()
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickRectangle_Create();
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, MagickRectangle_Dispose, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickRectangle+NativeMethods+X86", "MagickRectangle_Dispose")]
		public static void MagickRectangle_Dispose(global::System.IntPtr instance)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickRectangle_Dispose(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, MagickRectangle_X_Get, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickRectangle+NativeMethods+X86", "MagickRectangle_X_Get")]
		public static global::System.IntPtr MagickRectangle_X_Get(global::System.IntPtr instance)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickRectangle_X_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, MagickRectangle_X_Set, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickRectangle+NativeMethods+X86", "MagickRectangle_X_Set")]
		public static void MagickRectangle_X_Set(
					global::System.IntPtr instance, 
					global::System.IntPtr value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickRectangle_X_Set(
								instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, MagickRectangle_Y_Get, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickRectangle+NativeMethods+X86", "MagickRectangle_Y_Get")]
		public static global::System.IntPtr MagickRectangle_Y_Get(global::System.IntPtr instance)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickRectangle_Y_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, MagickRectangle_Y_Set, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickRectangle+NativeMethods+X86", "MagickRectangle_Y_Set")]
		public static void MagickRectangle_Y_Set(
					global::System.IntPtr instance, 
					global::System.IntPtr value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickRectangle_Y_Set(
								instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, MagickRectangle_Width_Get, [fwd] [return] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickRectangle+NativeMethods+X86", "MagickRectangle_Width_Get")]
		public static global::System.UIntPtr MagickRectangle_Width_Get(global::System.IntPtr instance)
		{
			// Setup
			global::System.UIntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickRectangle_Width_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, MagickRectangle_Width_Set, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickRectangle+NativeMethods+X86", "MagickRectangle_Width_Set")]
		public static void MagickRectangle_Width_Set(
					global::System.IntPtr instance, 
					global::System.UIntPtr value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickRectangle_Width_Set(
								instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, MagickRectangle_Height_Get, [fwd] [return] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickRectangle+NativeMethods+X86", "MagickRectangle_Height_Get")]
		public static global::System.UIntPtr MagickRectangle_Height_Get(global::System.IntPtr instance)
		{
			// Setup
			global::System.UIntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickRectangle_Height_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, MagickRectangle_Height_Set, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.MagickRectangle+NativeMethods+X86", "MagickRectangle_Height_Set")]
		public static void MagickRectangle_Height_Set(
					global::System.IntPtr instance, 
					global::System.UIntPtr value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.MagickRectangle_Height_Set(
								instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, OffsetInfo_Create, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.OffsetInfo+NativeMethods+X86", "OffsetInfo_Create")]
		public static global::System.IntPtr OffsetInfo_Create()
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.OffsetInfo_Create();
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, OffsetInfo_Dispose, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.OffsetInfo+NativeMethods+X86", "OffsetInfo_Dispose")]
		public static void OffsetInfo_Dispose(global::System.IntPtr instance)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.OffsetInfo_Dispose(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, OffsetInfo_SetX, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.OffsetInfo+NativeMethods+X86", "OffsetInfo_SetX")]
		public static void OffsetInfo_SetX(
					global::System.IntPtr Instance, 
					global::System.UIntPtr value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.OffsetInfo_SetX(
								Instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, OffsetInfo_SetY, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.OffsetInfo+NativeMethods+X86", "OffsetInfo_SetY")]
		public static void OffsetInfo_SetY(
					global::System.IntPtr Instance, 
					global::System.UIntPtr value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.OffsetInfo_SetY(
								Instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, PointInfo_X_Get, [fwd] [return] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.PointInfo+NativeMethods+X86", "PointInfo_X_Get")]
		public static double PointInfo_X_Get(global::System.IntPtr instance)
		{
			// Setup
			double unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.PointInfo_X_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, PointInfo_Y_Get, [fwd] [return] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.PointInfo+NativeMethods+X86", "PointInfo_Y_Get")]
		public static double PointInfo_Y_Get(global::System.IntPtr instance)
		{
			// Setup
			double unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.PointInfo_Y_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, PointInfoCollection_Create, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.PointInfoCollection+NativeMethods+X86", "PointInfoCollection_Create")]
		public static global::System.IntPtr PointInfoCollection_Create(global::System.UIntPtr length)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.PointInfoCollection_Create(length);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, PointInfoCollection_Dispose, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.PointInfoCollection+NativeMethods+X86", "PointInfoCollection_Dispose")]
		public static void PointInfoCollection_Dispose(global::System.IntPtr instance)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.PointInfoCollection_Dispose(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, PointInfoCollection_GetX, [fwd] [return] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.PointInfoCollection+NativeMethods+X86", "PointInfoCollection_GetX")]
		public static double PointInfoCollection_GetX(
					global::System.IntPtr Instance, 
					global::System.UIntPtr index)
		{
			// Setup
			double unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.PointInfoCollection_GetX(
								Instance, 
								index
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, PointInfoCollection_GetY, [fwd] [return] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.PointInfoCollection+NativeMethods+X86", "PointInfoCollection_GetY")]
		public static double PointInfoCollection_GetY(
					global::System.IntPtr Instance, 
					global::System.UIntPtr index)
		{
			// Setup
			double unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.PointInfoCollection_GetY(
								Instance, 
								index
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, PointInfoCollection_Set, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] double__double, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.PointInfoCollection+NativeMethods+X86", "PointInfoCollection_Set")]
		public static void PointInfoCollection_Set(
					global::System.IntPtr Instance, 
					global::System.UIntPtr index, 
					double x, 
					double y)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.PointInfoCollection_Set(
								Instance, 
								index, 
								x, 
								y
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, PrimaryInfo_Create, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.PrimaryInfo+NativeMethods+X86", "PrimaryInfo_Create")]
		public static global::System.IntPtr PrimaryInfo_Create()
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.PrimaryInfo_Create();
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, PrimaryInfo_Dispose, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.PrimaryInfo+NativeMethods+X86", "PrimaryInfo_Dispose")]
		public static void PrimaryInfo_Dispose(global::System.IntPtr instance)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.PrimaryInfo_Dispose(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, PrimaryInfo_X_Get, [fwd] [return] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.PrimaryInfo+NativeMethods+X86", "PrimaryInfo_X_Get")]
		public static double PrimaryInfo_X_Get(global::System.IntPtr instance)
		{
			// Setup
			double unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.PrimaryInfo_X_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, PrimaryInfo_X_Set, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.PrimaryInfo+NativeMethods+X86", "PrimaryInfo_X_Set")]
		public static void PrimaryInfo_X_Set(
					global::System.IntPtr instance, 
					double value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.PrimaryInfo_X_Set(
								instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, PrimaryInfo_Y_Get, [fwd] [return] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.PrimaryInfo+NativeMethods+X86", "PrimaryInfo_Y_Get")]
		public static double PrimaryInfo_Y_Get(global::System.IntPtr instance)
		{
			// Setup
			double unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.PrimaryInfo_Y_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, PrimaryInfo_Y_Set, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.PrimaryInfo+NativeMethods+X86", "PrimaryInfo_Y_Set")]
		public static void PrimaryInfo_Y_Set(
					global::System.IntPtr instance, 
					double value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.PrimaryInfo_Y_Set(
								instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, PrimaryInfo_Z_Get, [fwd] [return] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.PrimaryInfo+NativeMethods+X86", "PrimaryInfo_Z_Get")]
		public static double PrimaryInfo_Z_Get(global::System.IntPtr instance)
		{
			// Setup
			double unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.PrimaryInfo_Z_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, PrimaryInfo_Z_Set, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] double__double, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.PrimaryInfo+NativeMethods+X86", "PrimaryInfo_Z_Set")]
		public static void PrimaryInfo_Z_Set(
					global::System.IntPtr instance, 
					double value)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.PrimaryInfo_Z_Set(
								instance, 
								value
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, StringInfo_Datum_Get, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.StringInfo+NativeMethods+X86", "StringInfo_Datum_Get")]
		public static global::System.IntPtr StringInfo_Datum_Get(global::System.IntPtr instance)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.StringInfo_Datum_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, StringInfo_Length_Get, [fwd] [return] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.StringInfo+NativeMethods+X86", "StringInfo_Length_Get")]
		public static global::System.UIntPtr StringInfo_Length_Get(global::System.IntPtr instance)
		{
			// Setup
			global::System.UIntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.StringInfo_Length_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, TypeMetric_Dispose, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.TypeMetric+NativeMethods+X86", "TypeMetric_Dispose")]
		public static void TypeMetric_Dispose(global::System.IntPtr instance)
		{
			// Marshalling
			// Call to native method
			global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.TypeMetric_Dispose(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, TypeMetric_Ascent_Get, [fwd] [return] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.TypeMetric+NativeMethods+X86", "TypeMetric_Ascent_Get")]
		public static double TypeMetric_Ascent_Get(global::System.IntPtr instance)
		{
			// Setup
			double unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.TypeMetric_Ascent_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, TypeMetric_Descent_Get, [fwd] [return] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.TypeMetric+NativeMethods+X86", "TypeMetric_Descent_Get")]
		public static double TypeMetric_Descent_Get(global::System.IntPtr instance)
		{
			// Setup
			double unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.TypeMetric_Descent_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, TypeMetric_MaxHorizontalAdvance_Get, [fwd] [return] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.TypeMetric+NativeMethods+X86", "TypeMetric_MaxHorizontalAdvance_Get")]
		public static double TypeMetric_MaxHorizontalAdvance_Get(global::System.IntPtr instance)
		{
			// Setup
			double unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.TypeMetric_MaxHorizontalAdvance_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, TypeMetric_TextHeight_Get, [fwd] [return] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.TypeMetric+NativeMethods+X86", "TypeMetric_TextHeight_Get")]
		public static double TypeMetric_TextHeight_Get(global::System.IntPtr instance)
		{
			// Setup
			double unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.TypeMetric_TextHeight_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, TypeMetric_TextWidth_Get, [fwd] [return] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.TypeMetric+NativeMethods+X86", "TypeMetric_TextWidth_Get")]
		public static double TypeMetric_TextWidth_Get(global::System.IntPtr instance)
		{
			// Setup
			double unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.TypeMetric_TextWidth_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, TypeMetric_UnderlinePosition_Get, [fwd] [return] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.TypeMetric+NativeMethods+X86", "TypeMetric_UnderlinePosition_Get")]
		public static double TypeMetric_UnderlinePosition_Get(global::System.IntPtr instance)
		{
			// Setup
			double unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.TypeMetric_UnderlinePosition_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, TypeMetric_UnderlineThickness_Get, [fwd] [return] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.TypeMetric+NativeMethods+X86", "TypeMetric_UnderlineThickness_Get")]
		public static double TypeMetric_UnderlineThickness_Get(global::System.IntPtr instance)
		{
			// Setup
			double unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.TypeMetric_UnderlineThickness_Get(instance);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, JpegOptimizer_CompressFile, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.ImageOptimizers.JpegOptimizer+NativeMethods+X86", "JpegOptimizer_CompressFile")]
		public static void JpegOptimizer_CompressFile(
					global::System.IntPtr input, 
					global::System.IntPtr output, 
					bool progressive, 
					bool lossless, 
					global::System.UIntPtr quality, 
					out global::System.IntPtr exception)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_exception = &(exception))
			{
				// Call to native method
				global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.JpegOptimizer_CompressFile(
									input, 
									output, 
									(progressive ? 1 : 0), 
									(lossless ? 1 : 0), 
									quality, 
									pinned_exception
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
		}

		// Signature, JpegOptimizer_CompressStream, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x00041EA8] ImageMagick_ImageOptimizers_JpegOptimizer_ReadWriteStreamDelegate__Magick_NET_Q16_AnyCPU__ImageMagick_ImageOptimizers__JpegOptimizer_ReadWriteStreamDelegate__Magick_NET_Q16_AnyCPU, [fwd] [in] [EETypeRva:0x00041EA8] ImageMagick_ImageOptimizers_JpegOptimizer_ReadWriteStreamDelegate__Magick_NET_Q16_AnyCPU__ImageMagick_ImageOptimizers__JpegOptimizer_ReadWriteStreamDelegate__Magick_NET_Q16_AnyCPU, [fwd] [in] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000419B0] System_UIntPtr____w64 unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Culture=neutral, PublicKeyToken=2004825badfa91ec", "ImageMagick.ImageOptimizers.JpegOptimizer+NativeMethods+X86", "JpegOptimizer_CompressStream")]
		public static void JpegOptimizer_CompressStream(
					global::ImageMagick.ImageOptimizers.JpegOptimizer_ReadWriteStreamDelegate__Magick_NET_Q16_AnyCPU reader, 
					global::ImageMagick.ImageOptimizers.JpegOptimizer_ReadWriteStreamDelegate__Magick_NET_Q16_AnyCPU writer, 
					bool progressive, 
					bool lossless, 
					global::System.UIntPtr quality, 
					out global::System.IntPtr exception)
		{
			// Setup
			void* unsafe_reader = default(void*);
			void* unsafe_writer = default(void*);
			try
			{
				// Marshalling
				unsafe_reader = (void*)global::System.Runtime.InteropServices.McgMarshal.GetStubForPInvokeDelegate(
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("ImageMagick.ImageOptimizers.JpegOptimizer+ReadWriteStreamDelegate,Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Cultu" +
											"re=neutral, PublicKeyToken=2004825badfa91ec"), 
									reader
								);
				unsafe_writer = (void*)global::System.Runtime.InteropServices.McgMarshal.GetStubForPInvokeDelegate(
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("ImageMagick.ImageOptimizers.JpegOptimizer+ReadWriteStreamDelegate,Magick.NET-Q16-AnyCPU, Version=7.17.0.0, Cultu" +
											"re=neutral, PublicKeyToken=2004825badfa91ec"), 
									writer
								);
				fixed (global::System.IntPtr* pinned_exception = &(exception))
				{
					// Call to native method
					global::__Interop.Magick_Native_Q16_x86_dll_PInvokes.JpegOptimizer_CompressStream(
										unsafe_reader, 
										unsafe_writer, 
										(progressive ? 1 : 0), 
										(lossless ? 1 : 0), 
										quality, 
										pinned_exception
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				}
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(reader);
				global::System.GC.KeepAlive(writer);
			}
		}
	}

	/// <summary>
	/// P/Invoke class for module 'libdl.so'
	/// </summary>
	public unsafe static partial class libdl_so
	{
		// Signature, UnixLoadLibrary, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00041C30] string__unsigned char *, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Tesseract, Version=3.3.0.0, Culture=neutral, PublicKeyToken=null", "InteropDotNet.UnixLibraryLoaderLogic", "UnixLoadLibrary")]
		public static global::System.IntPtr UnixLoadLibrary(
					string fileName, 
					int flags)
		{
			// Setup
			byte* unsafe_fileName = default(byte*);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				unsafe_fileName = global::System.Runtime.InteropServices.McgMarshal.StringToAnsiString(fileName, true, false);
				// Call to native method
				unsafe___value = global::__Interop.libdl_so_PInvokes.UnixLoadLibrary(
									unsafe_fileName, 
									flags
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.McgMarshal.SafeCoTaskMemFree(unsafe_fileName);
			}
		}

		// Signature, UnixFreeLibrary, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Tesseract, Version=3.3.0.0, Culture=neutral, PublicKeyToken=null", "InteropDotNet.UnixLibraryLoaderLogic", "UnixFreeLibrary")]
		public static int UnixFreeLibrary(global::System.IntPtr handle)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libdl_so_PInvokes.UnixFreeLibrary(handle);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, UnixGetProcAddress, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00041C30] string__unsigned char *, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Tesseract, Version=3.3.0.0, Culture=neutral, PublicKeyToken=null", "InteropDotNet.UnixLibraryLoaderLogic", "UnixGetProcAddress")]
		public static global::System.IntPtr UnixGetProcAddress(
					global::System.IntPtr handle, 
					string symbol)
		{
			// Setup
			byte* unsafe_symbol = default(byte*);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				unsafe_symbol = global::System.Runtime.InteropServices.McgMarshal.StringToAnsiString(symbol, true, false);
				// Call to native method
				unsafe___value = global::__Interop.libdl_so_PInvokes.UnixGetProcAddress(
									handle, 
									unsafe_symbol
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.McgMarshal.SafeCoTaskMemFree(unsafe_symbol);
			}
		}

		// Signature, UnixGetLastError, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Tesseract, Version=3.3.0.0, Culture=neutral, PublicKeyToken=null", "InteropDotNet.UnixLibraryLoaderLogic", "UnixGetLastError")]
		public static global::System.IntPtr UnixGetLastError()
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.libdl_so_PInvokes.UnixGetLastError();
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}
	}

	/// <summary>
	/// P/Invoke class for module 'kernel32'
	/// </summary>
	public unsafe static partial class kernel32
	{
		// Signature, WindowsLoadLibrary, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00041B44] string__wchar_t *, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Tesseract, Version=3.3.0.0, Culture=neutral, PublicKeyToken=null", "InteropDotNet.WindowsLibraryLoaderLogic", "WindowsLoadLibrary")]
		public static global::System.IntPtr WindowsLoadLibrary(string dllPath)
		{
			// Setup
			ushort* unsafe_dllPath = default(ushort*);
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (char* pinned_dllPath = dllPath)
			{
				unsafe_dllPath = (ushort*)pinned_dllPath;
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = global::__Interop.kernel32_PInvokes.WindowsLoadLibrary(unsafe_dllPath);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			}
			// Return
			return unsafe___value;
		}

		// Signature, WindowsFreeLibrary, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Tesseract, Version=3.3.0.0, Culture=neutral, PublicKeyToken=null", "InteropDotNet.WindowsLibraryLoaderLogic", "WindowsFreeLibrary")]
		public static bool WindowsFreeLibrary(global::System.IntPtr handle)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.kernel32_PInvokes.WindowsFreeLibrary(handle);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
			return unsafe___value != 0;
		}

		// Signature, WindowsGetProcAddress, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00041C30] string__unsigned char *, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Tesseract, Version=3.3.0.0, Culture=neutral, PublicKeyToken=null", "InteropDotNet.WindowsLibraryLoaderLogic", "WindowsGetProcAddress")]
		public static global::System.IntPtr WindowsGetProcAddress(
					global::System.IntPtr handle, 
					string procedureName)
		{
			// Setup
			byte* unsafe_procedureName = default(byte*);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				unsafe_procedureName = global::System.Runtime.InteropServices.McgMarshal.StringToAnsiString(procedureName, true, false);
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = global::__Interop.kernel32_PInvokes.WindowsGetProcAddress(
									handle, 
									unsafe_procedureName
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.McgMarshal.SafeCoTaskMemFree(unsafe_procedureName);
			}
		}
	}

	/// <summary>
	/// P/Invoke class for module '[MRT]'
	/// </summary>
	public unsafe static partial class _MRT_
	{
		// Signature, RhpGetFuncEvalParameterBufferSize, [fwd] [return] [EETypeRva:0x000419B0] uint__unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Runtime.RuntimeImports", "RhpGetFuncEvalParameterBufferSize")]
		public static uint RhpGetFuncEvalParameterBufferSize()
		{
			// Setup
			uint unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop._MRT__PInvokes.RhpGetFuncEvalParameterBufferSize();
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, RhpGetFuncEvalMode, [fwd] [return] [EETypeRva:0x000419B0] uint__unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Runtime.RuntimeImports", "RhpGetFuncEvalMode")]
		public static uint RhpGetFuncEvalMode()
		{
			// Setup
			uint unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop._MRT__PInvokes.RhpGetFuncEvalMode();
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, RhpRecordDebuggeeInitiatedHandle, [fwd] [return] [EETypeRva:0x000419B0] uint__unsigned int, [fwd] [in] [EETypeRva:0x000419B0] void___ptrvoid *, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Runtime.RuntimeImports", "RhpRecordDebuggeeInitiatedHandle")]
		public static uint RhpRecordDebuggeeInitiatedHandle(void* objectHandle)
		{
			// Setup
			uint unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop._MRT__PInvokes.RhpRecordDebuggeeInitiatedHandle(((void*)objectHandle));
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, RhpVerifyDebuggerCleanup, [fwd] [return] [EETypeRva:0x00041F6C] void__void, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Runtime.RuntimeImports", "RhpVerifyDebuggerCleanup")]
		public static void RhpVerifyDebuggerCleanup()
		{
			// Marshalling
			// Call to native method
			global::__Interop._MRT__PInvokes.RhpVerifyDebuggerCleanup();
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, RhpGetCurrentThread, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Runtime.RuntimeImports", "RhpGetCurrentThread")]
		public static global::System.IntPtr RhpGetCurrentThread()
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop._MRT__PInvokes.RhpGetCurrentThread();
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, RhWaitForPendingFinalizers, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Runtime.RuntimeImports", "RhWaitForPendingFinalizers")]
		public static void RhWaitForPendingFinalizers(int allowReentrantWait)
		{
			// Marshalling
			// Call to native method
			global::__Interop._MRT__PInvokes.RhWaitForPendingFinalizers(allowReentrantWait);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, _RhYield, [fwd] [return] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Runtime.RuntimeImports", "_RhYield")]
		public static int _RhYield()
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop._MRT__PInvokes._RhYield();
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, RhFlushProcessWriteBuffers, [fwd] [return] [EETypeRva:0x00041F6C] void__void, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Runtime.RuntimeImports", "RhFlushProcessWriteBuffers")]
		public static void RhFlushProcessWriteBuffers()
		{
			// Marshalling
			// Call to native method
			global::__Interop._MRT__PInvokes.RhFlushProcessWriteBuffers();
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, RhCompatibleReentrantWaitAny, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr___ptr__w64 int *, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Runtime.RuntimeImports", "RhCompatibleReentrantWaitAny")]
		public static int RhCompatibleReentrantWaitAny(
					int alertable, 
					int timeout, 
					int count, 
					global::System.IntPtr* handles)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop._MRT__PInvokes.RhCompatibleReentrantWaitAny(
								alertable, 
								timeout, 
								count, 
								((global::System.IntPtr*)handles)
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, RhCallDescrWorkerNative, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Runtime.RuntimeImports", "RhCallDescrWorkerNative")]
		public static void RhCallDescrWorkerNative(global::System.IntPtr callDescr)
		{
			// Marshalling
			// Call to native method
			global::__Interop._MRT__PInvokes.RhCallDescrWorkerNative(callDescr);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, _ecvt_s, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] byte___ptrunsigned char *, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] double__double, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] int___ptrint *, [fwd] [in] [EETypeRva:0x000419B0] int___ptrint *, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Runtime.RuntimeImports", "_ecvt_s")]
		public static void _ecvt_s(
					byte* buffer, 
					int sizeInBytes, 
					double value, 
					int count, 
					int* dec, 
					int* sign)
		{
			// Marshalling
			// Call to native method
			global::__Interop._MRT__PInvokes._ecvt_s(
								((byte*)buffer), 
								sizeInBytes, 
								value, 
								count, 
								((int*)dec), 
								((int*)sign)
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, memmove, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] byte___ptrunsigned char *, [fwd] [in] [EETypeRva:0x000419B0] byte___ptrunsigned char *, [fwd] [in] [EETypeRva:0x000419B0] ulong__unsigned __int64, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Runtime.RuntimeImports", "memmove")]
		public static void memmove(
					byte* dmem, 
					byte* smem, 
					ulong size)
		{
			// Marshalling
			// Call to native method
			global::__Interop._MRT__PInvokes.memmove(
								((byte*)dmem), 
								((byte*)smem), 
								size
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, memset, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] byte___ptrunsigned char *, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] ulong__unsigned __int64, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Runtime.RuntimeImports", "memset")]
		public static void memset(
					byte* mem, 
					int value, 
					ulong size)
		{
			// Marshalling
			// Call to native method
			global::__Interop._MRT__PInvokes.memset(
								((byte*)mem), 
								value, 
								size
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}
	}

	/// <summary>
	/// P/Invoke class for module '*'
	/// </summary>
	public unsafe static partial class _
	{
		// Signature, CallingConventionConverter_GetStubs, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.TypeLoader, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Internal.Runtime.TypeLoader.CallConverterThunk", "CallingConventionConverter_GetStubs")]
		public static void CallingConventionConverter_GetStubs(
					out global::System.IntPtr returnVoidStub, 
					out global::System.IntPtr returnIntegerStub, 
					out global::System.IntPtr commonStub)
		{
			// Marshalling
			fixed (global::System.IntPtr* pinned_returnVoidStub = &(returnVoidStub))
				fixed (global::System.IntPtr* pinned_returnIntegerStub = &(returnIntegerStub))
					fixed (global::System.IntPtr* pinned_commonStub = &(commonStub))
					{
						// Call to native method
						global::__Interop.__PInvokes.CallingConventionConverter_GetStubs(
											pinned_returnVoidStub, 
											pinned_returnIntegerStub, 
											pinned_commonStub
										);
						global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
					}
			// Return
		}
	}

	/// <summary>
	/// P/Invoke class for module 'api-ms-win-core-winrt-string-l1-1-0.dll'
	/// </summary>
	public unsafe static partial class api_ms_win_core_winrt_string_l1_1_0_dll
	{
		// Signature, WindowsCreateStringReference, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] char___ptrwchar_t *, [fwd] [in] [EETypeRva:0x000419B0] uint__unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_Runtime_InteropServices_HSTRING_HEADER__System_Private_Interop___ptrSystem_Runtime_InteropServices__HSTRING_HEADER__System_Private_Interop *, [fwd] [in] [EETypeRva:0x000419B0] void___ptrvoid *, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.WinRTInterop.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089", "mincore", "WindowsCreateStringReference")]
		public static int WindowsCreateStringReference(
					char* sourceString, 
					uint length, 
					global::System_Runtime_InteropServices.HSTRING_HEADER__System_Private_Interop* phstringHeader, 
					void* hstring)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.api_ms_win_core_winrt_string_l1_1_0_dll_PInvokes.WindowsCreateStringReference(
								((ushort*)sourceString), 
								length, 
								((global::System_Runtime_InteropServices.HSTRING_HEADER__System_Private_Interop*)phstringHeader), 
								((void*)hstring)
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}
	}

	/// <summary>
	/// P/Invoke class for module 'api-ms-win-core-errorhandling-l1-1-0.dll'
	/// </summary>
	public unsafe static partial class api_ms_win_core_errorhandling_l1_1_0_dll
	{
		// Signature, GetLastError, [fwd] [return] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+mincore", "GetLastError")]
		public static int GetLastError()
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.api_ms_win_core_errorhandling_l1_1_0_dll_PInvokes.GetLastError();
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, SetLastError, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] uint__unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+mincore", "SetLastError")]
		public static void SetLastError(uint dwErrCode)
		{
			// Marshalling
			// Call to native method
			global::__Interop.api_ms_win_core_errorhandling_l1_1_0_dll_PInvokes.SetLastError(dwErrCode);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}
	}

	/// <summary>
	/// P/Invoke class for module 'api-ms-win-core-winrt-l1-1-0.dll'
	/// </summary>
	public unsafe static partial class api_ms_win_core_winrt_l1_1_0_dll
	{
		// Signature, RoInitialize, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] uint__unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.WinRTInterop.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089", "mincore+mincore_PInvokes", "RoInitialize")]
		public static int RoInitialize(uint initType)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.api_ms_win_core_winrt_l1_1_0_dll_PInvokes.RoInitialize(initType);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}
	}

	/// <summary>
	/// P/Invoke class for module 'api-ms-win-core-localization-l1-2-0.dll'
	/// </summary>
	public unsafe static partial class api_ms_win_core_localization_l1_2_0_dll
	{
		// Signature, IsValidLocaleName, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] char___ptrwchar_t *, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.WinRTInterop.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089", "mincore+mincore_PInvokes", "IsValidLocaleName")]
		public static int IsValidLocaleName(char* lpLocaleName)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.api_ms_win_core_localization_l1_2_0_dll_PInvokes.IsValidLocaleName(((ushort*)lpLocaleName));
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, ResolveLocaleName, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] char___ptrwchar_t *, [fwd] [in] [EETypeRva:0x000419B0] char___ptrwchar_t *, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.WinRTInterop.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089", "mincore+mincore_PInvokes", "ResolveLocaleName")]
		public static int ResolveLocaleName(
					char* lpNameToResolve, 
					char* lpLocaleName, 
					int cchLocaleName)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.api_ms_win_core_localization_l1_2_0_dll_PInvokes.ResolveLocaleName(
								((ushort*)lpNameToResolve), 
								((ushort*)lpLocaleName), 
								cchLocaleName
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}
	}

	/// <summary>
	/// P/Invoke class for module 'crypt32.dll'
	/// </summary>
	public unsafe static partial class crypt32_dll
	{
		// Signature, CertDuplicateCertificateContext, [fwd] [return] [EETypeRva:0x000434A4] Internal_Cryptography_Pal_Native_SafeCertContextHandle__System_Security_Cryptography_X509Certificates____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.X509Certificates, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
			"", "Interop+crypt32", "CertDuplicateCertificateContext")]
		public static global::Internal.Cryptography.Pal.Native.SafeCertContextHandle__System_Security_Cryptography_X509Certificates CertDuplicateCertificateContext(global::System.IntPtr pCertContext)
		{
			// Setup
			global::Internal.Cryptography.Pal.Native.SafeCertContextHandle__System_Security_Cryptography_X509Certificates __value;
			global::System.IntPtr unsafe___value;
			// Marshalling
			__value = new global::Internal.Cryptography.Pal.Native.SafeCertContextHandle__System_Security_Cryptography_X509Certificates();
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.crypt32_dll_PInvokes.CertDuplicateCertificateContext(pCertContext);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			global::System.Runtime.InteropServices.McgMarshal.InitializeHandle(
								__value, 
								unsafe___value
							);
			// Return
			return __value;
		}

		// Signature, CertGetCertificateContextProperty, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000434A4] Internal_Cryptography_Pal_Native_SafeCertContextHandle__System_Security_Cryptography_X509Certificates____w64 int, [fwd] [in] [EETypeRva:0x00042D60] Internal_Cryptography_Pal_Native_CertContextPropId__System_Security_Cryptography_X509Certificates__CertContextPropId__System_Security_Cryptography_X509Certificates, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x0004314C] Internal_Cryptography_Pal_Native_CRYPTOAPI_BLOB__System_Security_Cryptography_X509Certificates__Internal_Cryptography_Pal_Native__CRYPTOAPI_BLOB__System_Security_Cryptography_X509Certificates, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.X509Certificates, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
			"", "Interop+crypt32", "CertGetCertificateContextProperty")]
		public static bool CertGetCertificateContextProperty(
					global::Internal.Cryptography.Pal.Native.SafeCertContextHandle__System_Security_Cryptography_X509Certificates pCertContext, 
					global::Internal_Cryptography_Pal_Native.CertContextPropId__System_Security_Cryptography_X509Certificates dwPropId, 
					out global::Internal_Cryptography_Pal_Native.CRYPTOAPI_BLOB__System_Security_Cryptography_X509Certificates pvData, 
					ref int pcbData)
		{
			// Setup
			bool addRefed = false;
			int unsafe___value;
			// Marshalling
			pCertContext.DangerousAddRef(ref addRefed);
			fixed (global::Internal_Cryptography_Pal_Native.CRYPTOAPI_BLOB__System_Security_Cryptography_X509Certificates* pinned_pvData = &(pvData))
				fixed (int* pinned_pcbData = &(pcbData))
				{
					global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
					// Call to native method
					unsafe___value = global::__Interop.crypt32_dll_PInvokes.CertGetCertificateContextProperty(
										pCertContext.DangerousGetHandle(), 
										dwPropId, 
										pinned_pvData, 
										pinned_pcbData
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
					global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
				}
			if (addRefed)
				pCertContext.DangerousRelease();
			// Return
			return unsafe___value != 0;
		}

		// Signature, CertDuplicateCertificateContextWithKeyContainerDeletion, [fwd] [return] [EETypeRva:0x000434A4] Internal_Cryptography_Pal_Native_SafeCertContextHandleWithKeyContainerDeletion__System_Security_Cryptography_X509Certificates____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.X509Certificates, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
			"", "Interop+crypt32", "CertDuplicateCertificateContextWithKeyContainerDeletion")]
		public static global::Internal.Cryptography.Pal.Native.SafeCertContextHandleWithKeyContainerDeletion__System_Security_Cryptography_X509Certificates CertDuplicateCertificateContextWithKeyContainerDeletion(global::System.IntPtr pCertContext)
		{
			// Setup
			global::Internal.Cryptography.Pal.Native.SafeCertContextHandleWithKeyContainerDeletion__System_Security_Cryptography_X509Certificates __value;
			global::System.IntPtr unsafe___value;
			// Marshalling
			__value = new global::Internal.Cryptography.Pal.Native.SafeCertContextHandleWithKeyContainerDeletion__System_Security_Cryptography_X509Certificates();
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.crypt32_dll_PInvokes.CertDuplicateCertificateContextWithKeyContainerDeletion(pCertContext);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			global::System.Runtime.InteropServices.McgMarshal.InitializeHandle(
								__value, 
								unsafe___value
							);
			// Return
			return __value;
		}

		// Signature, CryptQueryObject, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x00042D60] Internal_Cryptography_Pal_Native_CertQueryObjectType__System_Security_Cryptography_X509Certificates__CertQueryObjectType__System_Security_Cryptography_X509Certificates, [fwd] [in] [EETypeRva:0x000419B0] void___ptrvoid *, [fwd] [in] [EETypeRva:0x00042D60] Internal_Cryptography_Pal_Native_ExpectedContentTypeFlags__System_Security_Cryptography_X509Certificates__ExpectedContentTypeFlags__System_Security_Cryptography_X509Certificates, [fwd] [in] [EETypeRva:0x00042D60] Internal_Cryptography_Pal_Native_ExpectedFormatTypeFlags__System_Security_Cryptography_X509Certificates__ExpectedFormatTypeFlags__System_Security_Cryptography_X509Certificates, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x00042D60] Internal_Cryptography_Pal_Native_CertEncodingType__System_Security_Cryptography_X509Certificates__CertEncodingType__System_Security_Cryptography_X509Certificates, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x00042D60] Internal_Cryptography_Pal_Native_ContentType__System_Security_Cryptography_X509Certificates__ContentType__System_Security_Cryptography_X509Certificates, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x00042D60] Internal_Cryptography_Pal_Native_FormatType__System_Security_Cryptography_X509Certificates__FormatType__System_Security_Cryptography_X509Certificates, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000434A4] Internal_Cryptography_Pal_Native_SafeCertStoreHandle__System_Security_Cryptography_X509Certificates____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000434A4] Internal_Cryptography_Pal_Native_SafeCryptMsgHandle__System_Security_Cryptography_X509Certificates____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000434A4] Internal_Cryptography_Pal_Native_SafeCertContextHandle__System_Security_Cryptography_X509Certificates____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.X509Certificates, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
			"", "Interop+crypt32", "CryptQueryObject")]
		public static bool CryptQueryObject(
					global::Internal_Cryptography_Pal_Native.CertQueryObjectType__System_Security_Cryptography_X509Certificates dwObjectType, 
					void* pvObject, 
					global::Internal_Cryptography_Pal_Native.ExpectedContentTypeFlags__System_Security_Cryptography_X509Certificates dwExpectedContentTypeFlags, 
					global::Internal_Cryptography_Pal_Native.ExpectedFormatTypeFlags__System_Security_Cryptography_X509Certificates dwExpectedFormatTypeFlags, 
					int dwFlags, 
					out global::Internal_Cryptography_Pal_Native.CertEncodingType__System_Security_Cryptography_X509Certificates pdwMsgAndCertEncodingType, 
					out global::Internal_Cryptography_Pal_Native.ContentType__System_Security_Cryptography_X509Certificates pdwContentType, 
					out global::Internal_Cryptography_Pal_Native.FormatType__System_Security_Cryptography_X509Certificates pdwFormatType, 
					out global::Internal.Cryptography.Pal.Native.SafeCertStoreHandle__System_Security_Cryptography_X509Certificates phCertStore, 
					out global::Internal.Cryptography.Pal.Native.SafeCryptMsgHandle__System_Security_Cryptography_X509Certificates phMsg, 
					out global::Internal.Cryptography.Pal.Native.SafeCertContextHandle__System_Security_Cryptography_X509Certificates ppvContext)
		{
			// Setup
			global::System.IntPtr unsafe_phCertStore;
			global::System.IntPtr unsafe_phMsg;
			global::System.IntPtr unsafe_ppvContext;
			int unsafe___value;
			// Marshalling
			fixed (global::Internal_Cryptography_Pal_Native.CertEncodingType__System_Security_Cryptography_X509Certificates* pinned_pdwMsgAndCertEncodingType = &(pdwMsgAndCertEncodingType))
				fixed (global::Internal_Cryptography_Pal_Native.ContentType__System_Security_Cryptography_X509Certificates* pinned_pdwContentType = &(pdwContentType))
					fixed (global::Internal_Cryptography_Pal_Native.FormatType__System_Security_Cryptography_X509Certificates* pinned_pdwFormatType = &(pdwFormatType))
					{
						phCertStore = new global::Internal.Cryptography.Pal.Native.SafeCertStoreHandle__System_Security_Cryptography_X509Certificates();
						unsafe_phCertStore = phCertStore.DangerousGetHandle();
						phMsg = new global::Internal.Cryptography.Pal.Native.SafeCryptMsgHandle__System_Security_Cryptography_X509Certificates();
						unsafe_phMsg = phMsg.DangerousGetHandle();
						ppvContext = new global::Internal.Cryptography.Pal.Native.SafeCertContextHandle__System_Security_Cryptography_X509Certificates();
						unsafe_ppvContext = ppvContext.DangerousGetHandle();
						global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
						// Call to native method
						unsafe___value = global::__Interop.crypt32_dll_PInvokes.CryptQueryObject(
											dwObjectType, 
											((void*)pvObject), 
											dwExpectedContentTypeFlags, 
											dwExpectedFormatTypeFlags, 
											dwFlags, 
											pinned_pdwMsgAndCertEncodingType, 
											pinned_pdwContentType, 
											pinned_pdwFormatType, 
											&(unsafe_phCertStore), 
											&(unsafe_phMsg), 
											&(unsafe_ppvContext)
										);
						global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
						global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
						global::System.Runtime.InteropServices.McgMarshal.InitializeHandle(
											ppvContext, 
											unsafe_ppvContext
										);
						global::System.Runtime.InteropServices.McgMarshal.InitializeHandle(
											phMsg, 
											unsafe_phMsg
										);
						global::System.Runtime.InteropServices.McgMarshal.InitializeHandle(
											phCertStore, 
											unsafe_phCertStore
										);
					}
			// Return
			return unsafe___value != 0;
		}

		// Signature, CertFreeCertificateContext, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.X509Certificates, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
			"", "Interop+crypt32", "CertFreeCertificateContext")]
		public static bool CertFreeCertificateContext(global::System.IntPtr pCertContext)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.crypt32_dll_PInvokes.CertFreeCertificateContext(pCertContext);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
			return unsafe___value != 0;
		}

		// Signature, CryptMsgGetParam, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000434A4] Internal_Cryptography_Pal_Native_SafeCryptMsgHandle__System_Security_Cryptography_X509Certificates____w64 int, [fwd] [in] [EETypeRva:0x00042D60] Internal_Cryptography_Pal_Native_CryptMessageParameterType__System_Security_Cryptography_X509Certificates__CryptMessageParameterType__System_Security_Cryptography_X509Certificates, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] int__int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.X509Certificates, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
			"", "Interop+crypt32", "CryptMsgGetParam")]
		public static bool CryptMsgGetParam(
					global::Internal.Cryptography.Pal.Native.SafeCryptMsgHandle__System_Security_Cryptography_X509Certificates hCryptMsg, 
					global::Internal_Cryptography_Pal_Native.CryptMessageParameterType__System_Security_Cryptography_X509Certificates dwParamType, 
					int dwIndex, 
					out int pvData, 
					ref int pcbData)
		{
			// Setup
			bool addRefed = false;
			int unsafe___value;
			// Marshalling
			hCryptMsg.DangerousAddRef(ref addRefed);
			fixed (int* pinned_pvData = &(pvData))
				fixed (int* pinned_pcbData = &(pcbData))
				{
					global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
					// Call to native method
					unsafe___value = global::__Interop.crypt32_dll_PInvokes.CryptMsgGetParam(
										hCryptMsg.DangerousGetHandle(), 
										dwParamType, 
										dwIndex, 
										pinned_pvData, 
										pinned_pcbData
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
					global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
				}
			if (addRefed)
				hCryptMsg.DangerousRelease();
			// Return
			return unsafe___value != 0;
		}

		// Signature, CryptMsgGetParam__0, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000434A4] Internal_Cryptography_Pal_Native_SafeCryptMsgHandle__System_Security_Cryptography_X509Certificates____w64 int, [fwd] [in] [EETypeRva:0x00042D60] Internal_Cryptography_Pal_Native_CryptMessageParameterType__System_Security_Cryptography_X509Certificates__CryptMessageParameterType__System_Security_Cryptography_X509Certificates, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] byte___ptrunsigned char *, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.X509Certificates, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
			"", "Interop+crypt32", "CryptMsgGetParam")]
		public static bool CryptMsgGetParam__0(
					global::Internal.Cryptography.Pal.Native.SafeCryptMsgHandle__System_Security_Cryptography_X509Certificates hCryptMsg, 
					global::Internal_Cryptography_Pal_Native.CryptMessageParameterType__System_Security_Cryptography_X509Certificates dwParamType, 
					int dwIndex, 
					byte* pvData, 
					ref int pcbData)
		{
			// Setup
			bool addRefed = false;
			int unsafe___value;
			// Marshalling
			hCryptMsg.DangerousAddRef(ref addRefed);
			fixed (int* pinned_pcbData = &(pcbData))
			{
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = global::__Interop.crypt32_dll_PInvokes.CryptMsgGetParam__0(
									hCryptMsg.DangerousGetHandle(), 
									dwParamType, 
									dwIndex, 
									((byte*)pvData), 
									pinned_pcbData
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			}
			if (addRefed)
				hCryptMsg.DangerousRelease();
			// Return
			return unsafe___value != 0;
		}

		// Signature, PFXImportCertStore, [fwd] [return] [EETypeRva:0x000434A4] Internal_Cryptography_Pal_Native_SafeCertStoreHandle__System_Security_Cryptography_X509Certificates____w64 int, [fwd] [in] [managedbyref] [nativebyref] [EETypeRva:0x0004314C] Internal_Cryptography_Pal_Native_CRYPTOAPI_BLOB__System_Security_Cryptography_X509Certificates__Internal_Cryptography_Pal_Native__CRYPTOAPI_BLOB__System_Security_Cryptography_X509Certificates, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_Win32_SafeHandles_SafePasswordHandle__System_Security_Cryptography_X509Certificates____w64 int, [fwd] [in] [EETypeRva:0x00042D60] Internal_Cryptography_Pal_Native_PfxCertStoreFlags__System_Security_Cryptography_X509Certificates__PfxCertStoreFlags__System_Security_Cryptography_X509Certificates, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.X509Certificates, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
			"", "Interop+crypt32", "PFXImportCertStore")]
		public static global::Internal.Cryptography.Pal.Native.SafeCertStoreHandle__System_Security_Cryptography_X509Certificates PFXImportCertStore(
					ref global::Internal_Cryptography_Pal_Native.CRYPTOAPI_BLOB__System_Security_Cryptography_X509Certificates pPFX, 
					global::Microsoft.Win32.SafeHandles.SafePasswordHandle__System_Security_Cryptography_X509Certificates password, 
					global::Internal_Cryptography_Pal_Native.PfxCertStoreFlags__System_Security_Cryptography_X509Certificates dwFlags)
		{
			// Setup
			bool addRefed = false;
			global::Internal.Cryptography.Pal.Native.SafeCertStoreHandle__System_Security_Cryptography_X509Certificates __value;
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::Internal_Cryptography_Pal_Native.CRYPTOAPI_BLOB__System_Security_Cryptography_X509Certificates* pinned_pPFX = &(pPFX))
			{
				password.DangerousAddRef(ref addRefed);
				__value = new global::Internal.Cryptography.Pal.Native.SafeCertStoreHandle__System_Security_Cryptography_X509Certificates();
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = global::__Interop.crypt32_dll_PInvokes.PFXImportCertStore(
									pinned_pPFX, 
									password.DangerousGetHandle(), 
									dwFlags
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
				global::System.Runtime.InteropServices.McgMarshal.InitializeHandle(
									__value, 
									unsafe___value
								);
				if (addRefed)
					password.DangerousRelease();
			}
			// Return
			return __value;
		}

		// Signature, CryptFindOIDInfo, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00042D60] __Interop_Crypt32_CryptOidInfoKeyType__System_Security_Cryptography_Encoding__Interop_Crypt32_CryptOidInfoKeyType__System_Security_Cryptography_Encoding, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00042D60] System_Security_Cryptography_OidGroup__System_Security_Cryptography_Encoding__OidGroup__System_Security_Cryptography_Encoding, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.Encoding, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Crypt32", "CryptFindOIDInfo")]
		public static global::System.IntPtr CryptFindOIDInfo(
					global::_.Interop_Crypt32_CryptOidInfoKeyType__System_Security_Cryptography_Encoding dwKeyType, 
					global::System.IntPtr pvKey, 
					global::System_Security_Cryptography.OidGroup__System_Security_Cryptography_Encoding group)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.crypt32_dll_PInvokes.CryptFindOIDInfo(
								dwKeyType, 
								pvKey, 
								group
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, CertGetCertificateContextProperty__0, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000434A4] Internal_Cryptography_Pal_Native_SafeCertContextHandle__System_Security_Cryptography_X509Certificates____w64 int, [fwd] [in] [EETypeRva:0x00042D60] Internal_Cryptography_Pal_Native_CertContextPropId__System_Security_Cryptography_X509Certificates__CertContextPropId__System_Security_Cryptography_X509Certificates, [fwd] [out] [EETypeRva:0x00042A40] rg_byte__unsigned char *, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.X509Certificates, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
			"", "Interop+crypt32", "CertGetCertificateContextProperty")]
		public static bool CertGetCertificateContextProperty__0(
					global::Internal.Cryptography.Pal.Native.SafeCertContextHandle__System_Security_Cryptography_X509Certificates pCertContext, 
					global::Internal_Cryptography_Pal_Native.CertContextPropId__System_Security_Cryptography_X509Certificates dwPropId, 
					byte[] pvData, 
					ref int pcbData)
		{
			// Setup
			bool addRefed = false;
			byte* unsafe_pvData;
			int unsafe___value;
			// Marshalling
			pCertContext.DangerousAddRef(ref addRefed);
			fixed (byte* pinned_pvData = ((pvData != null 
						&& pvData.Length == 0) ? new byte[1] : pvData))
			{
				unsafe_pvData = (byte*)pinned_pvData;
				fixed (int* pinned_pcbData = &(pcbData))
				{
					global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
					// Call to native method
					unsafe___value = global::__Interop.crypt32_dll_PInvokes.CertGetCertificateContextProperty__0(
										pCertContext.DangerousGetHandle(), 
										dwPropId, 
										unsafe_pvData, 
										pinned_pcbData
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
					global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
				}
			}
			if (addRefed)
				pCertContext.DangerousRelease();
			// Return
			return unsafe___value != 0;
		}

		// Signature, CertCloseStore, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.X509Certificates, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
			"", "Interop+crypt32", "CertCloseStore")]
		public static bool CertCloseStore(
					global::System.IntPtr hCertStore, 
					int dwFlags)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.crypt32_dll_PInvokes.CertCloseStore(
								hCertStore, 
								dwFlags
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
			return unsafe___value != 0;
		}

		// Signature, CryptMsgClose, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.X509Certificates, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
			"", "Interop+crypt32", "CryptMsgClose")]
		public static bool CryptMsgClose(global::System.IntPtr hCryptMsg)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.crypt32_dll_PInvokes.CryptMsgClose(hCryptMsg);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
			return unsafe___value != 0;
		}

		// Signature, CertFindCertificateInStore, [fwd] [return] [EETypeRva:0x000434A4] Internal_Cryptography_Pal_Native_SafeCertContextHandle__System_Security_Cryptography_X509Certificates____w64 int, [fwd] [in] [EETypeRva:0x000434A4] Internal_Cryptography_Pal_Native_SafeCertStoreHandle__System_Security_Cryptography_X509Certificates____w64 int, [fwd] [in] [EETypeRva:0x00042D60] Internal_Cryptography_Pal_Native_CertEncodingType__System_Security_Cryptography_X509Certificates__CertEncodingType__System_Security_Cryptography_X509Certificates, [fwd] [in] [EETypeRva:0x00042D60] Internal_Cryptography_Pal_Native_CertFindFlags__System_Security_Cryptography_X509Certificates__CertFindFlags__System_Security_Cryptography_X509Certificates, [fwd] [in] [EETypeRva:0x00042D60] Internal_Cryptography_Pal_Native_CertFindType__System_Security_Cryptography_X509Certificates__CertFindType__System_Security_Cryptography_X509Certificates, [fwd] [in] [EETypeRva:0x000419B0] void___ptrvoid *, [fwd] [in] [EETypeRva:0x000419B0] Internal_Cryptography_Pal_Native_CERT_CONTEXT__System_Security_Cryptography_X509Certificates___ptrInternal_Cryptography_Pal_Native__CERT_CONTEXT__System_Security_Cryptography_X509Certificates *, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.X509Certificates, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
			"", "Interop+crypt32", "CertFindCertificateInStore")]
		public static global::Internal.Cryptography.Pal.Native.SafeCertContextHandle__System_Security_Cryptography_X509Certificates CertFindCertificateInStore(
					global::Internal.Cryptography.Pal.Native.SafeCertStoreHandle__System_Security_Cryptography_X509Certificates hCertStore, 
					global::Internal_Cryptography_Pal_Native.CertEncodingType__System_Security_Cryptography_X509Certificates dwCertEncodingType, 
					global::Internal_Cryptography_Pal_Native.CertFindFlags__System_Security_Cryptography_X509Certificates dwFindFlags, 
					global::Internal_Cryptography_Pal_Native.CertFindType__System_Security_Cryptography_X509Certificates dwFindType, 
					void* pvFindPara, 
					global::Internal_Cryptography_Pal_Native.CERT_CONTEXT__System_Security_Cryptography_X509Certificates* pPrevCertContext)
		{
			// Setup
			bool addRefed = false;
			global::Internal.Cryptography.Pal.Native.SafeCertContextHandle__System_Security_Cryptography_X509Certificates __value;
			global::System.IntPtr unsafe___value;
			// Marshalling
			hCertStore.DangerousAddRef(ref addRefed);
			__value = new global::Internal.Cryptography.Pal.Native.SafeCertContextHandle__System_Security_Cryptography_X509Certificates();
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.crypt32_dll_PInvokes.CertFindCertificateInStore(
								hCertStore.DangerousGetHandle(), 
								dwCertEncodingType, 
								dwFindFlags, 
								dwFindType, 
								((void*)pvFindPara), 
								((global::Internal_Cryptography_Pal_Native.CERT_CONTEXT__System_Security_Cryptography_X509Certificates*)pPrevCertContext)
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			global::System.Runtime.InteropServices.McgMarshal.InitializeHandle(
								__value, 
								unsafe___value
							);
			if (addRefed)
				hCertStore.DangerousRelease();
			// Return
			return __value;
		}

		// Signature, CertEnumCertificatesInStore, [fwd] [return] [EETypeRva:0x000434A4] Internal_Cryptography_Pal_Native_SafeCertContextHandle__System_Security_Cryptography_X509Certificates____w64 int, [fwd] [in] [EETypeRva:0x000434A4] Internal_Cryptography_Pal_Native_SafeCertStoreHandle__System_Security_Cryptography_X509Certificates____w64 int, [fwd] [in] [EETypeRva:0x000419B0] Internal_Cryptography_Pal_Native_CERT_CONTEXT__System_Security_Cryptography_X509Certificates___ptrInternal_Cryptography_Pal_Native__CERT_CONTEXT__System_Security_Cryptography_X509Certificates *, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.X509Certificates, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
			"", "Interop+crypt32", "CertEnumCertificatesInStore")]
		public static global::Internal.Cryptography.Pal.Native.SafeCertContextHandle__System_Security_Cryptography_X509Certificates CertEnumCertificatesInStore(
					global::Internal.Cryptography.Pal.Native.SafeCertStoreHandle__System_Security_Cryptography_X509Certificates hCertStore, 
					global::Internal_Cryptography_Pal_Native.CERT_CONTEXT__System_Security_Cryptography_X509Certificates* pPrevCertContext)
		{
			// Setup
			bool addRefed = false;
			global::Internal.Cryptography.Pal.Native.SafeCertContextHandle__System_Security_Cryptography_X509Certificates __value;
			global::System.IntPtr unsafe___value;
			// Marshalling
			hCertStore.DangerousAddRef(ref addRefed);
			__value = new global::Internal.Cryptography.Pal.Native.SafeCertContextHandle__System_Security_Cryptography_X509Certificates();
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.crypt32_dll_PInvokes.CertEnumCertificatesInStore(
								hCertStore.DangerousGetHandle(), 
								((global::Internal_Cryptography_Pal_Native.CERT_CONTEXT__System_Security_Cryptography_X509Certificates*)pPrevCertContext)
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			global::System.Runtime.InteropServices.McgMarshal.InitializeHandle(
								__value, 
								unsafe___value
							);
			if (addRefed)
				hCertStore.DangerousRelease();
			// Return
			return __value;
		}

		// Signature, CertGetNameString, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000434A4] Internal_Cryptography_Pal_Native_SafeCertContextHandle__System_Security_Cryptography_X509Certificates____w64 int, [fwd] [in] [EETypeRva:0x00042D60] Internal_Cryptography_Pal_Native_CertNameType__System_Security_Cryptography_X509Certificates__CertNameType__System_Security_Cryptography_X509Certificates, [fwd] [in] [EETypeRva:0x00042D60] Internal_Cryptography_Pal_Native_CertNameFlags__System_Security_Cryptography_X509Certificates__CertNameFlags__System_Security_Cryptography_X509Certificates, [fwd] [in] [managedbyref] [nativebyref] [EETypeRva:0x00042D60] Internal_Cryptography_Pal_Native_CertNameStringType__System_Security_Cryptography_X509Certificates__CertNameStringType__System_Security_Cryptography_X509Certificates, [fwd] [out] [EETypeRva:0x00041CF4] System_Text_StringBuilder__wchar_t *, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.X509Certificates, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
			"", "Interop+crypt32", "CertGetNameString")]
		public static int CertGetNameString(
					global::Internal.Cryptography.Pal.Native.SafeCertContextHandle__System_Security_Cryptography_X509Certificates pCertContext, 
					global::Internal_Cryptography_Pal_Native.CertNameType__System_Security_Cryptography_X509Certificates dwType, 
					global::Internal_Cryptography_Pal_Native.CertNameFlags__System_Security_Cryptography_X509Certificates dwFlags, 
					ref global::Internal_Cryptography_Pal_Native.CertNameStringType__System_Security_Cryptography_X509Certificates pvTypePara, 
					global::System.Text.StringBuilder pszNameString, 
					int cchNameString)
		{
			// Setup
			bool addRefed = false;
			ushort* unsafe_pszNameString = default(ushort*);
			int unsafe___value;
			try
			{
				// Marshalling
				pCertContext.DangerousAddRef(ref addRefed);
				fixed (global::Internal_Cryptography_Pal_Native.CertNameStringType__System_Security_Cryptography_X509Certificates* pinned_pvTypePara = &(pvTypePara))
				{
					if (pszNameString == null)
						unsafe_pszNameString = null;
					else
					{
						unsafe_pszNameString = (ushort*)global::System.Runtime.InteropServices.McgMarshal.CoTaskMemAllocAndZeroMemory(new global::System.IntPtr(checked(pszNameString.Capacity * 2 
											+ 2)));
						if (unsafe_pszNameString == null)
							throw new global::System.OutOfMemoryException();
					}
					global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
					// Call to native method
					unsafe___value = global::__Interop.crypt32_dll_PInvokes.CertGetNameString(
										pCertContext.DangerousGetHandle(), 
										dwType, 
										dwFlags, 
										pinned_pvTypePara, 
										unsafe_pszNameString, 
										cchNameString
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
					global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
					if (pszNameString != null)
						global::System.Runtime.InteropServices.McgMarshal.UnicodeStringToStringBuilder(
											unsafe_pszNameString, 
											pszNameString
										);
				}
				if (addRefed)
					pCertContext.DangerousRelease();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				if (unsafe_pszNameString != null)
					global::System.Runtime.InteropServices.McgMarshal.SafeCoTaskMemFree(unsafe_pszNameString);
			}
		}

		// Signature, CertGetNameString__0, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000434A4] Internal_Cryptography_Pal_Native_SafeCertContextHandle__System_Security_Cryptography_X509Certificates____w64 int, [fwd] [in] [EETypeRva:0x00042D60] Internal_Cryptography_Pal_Native_CertNameType__System_Security_Cryptography_X509Certificates__CertNameType__System_Security_Cryptography_X509Certificates, [fwd] [in] [EETypeRva:0x00042D60] Internal_Cryptography_Pal_Native_CertNameFlags__System_Security_Cryptography_X509Certificates__CertNameFlags__System_Security_Cryptography_X509Certificates, [fwd] [in] [managedbyref] [nativebyref] [EETypeRva:0x00042D60] Internal_Cryptography_Pal_Native_CertNameStrTypeAndFlags__System_Security_Cryptography_X509Certificates__CertNameStrTypeAndFlags__System_Security_Cryptography_X509Certificates, [fwd] [out] [EETypeRva:0x00041CF4] System_Text_StringBuilder__wchar_t *, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.X509Certificates, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
			"", "Interop+crypt32", "CertGetNameString")]
		public static int CertGetNameString__0(
					global::Internal.Cryptography.Pal.Native.SafeCertContextHandle__System_Security_Cryptography_X509Certificates pCertContext, 
					global::Internal_Cryptography_Pal_Native.CertNameType__System_Security_Cryptography_X509Certificates dwType, 
					global::Internal_Cryptography_Pal_Native.CertNameFlags__System_Security_Cryptography_X509Certificates dwFlags, 
					ref global::Internal_Cryptography_Pal_Native.CertNameStrTypeAndFlags__System_Security_Cryptography_X509Certificates pvPara, 
					global::System.Text.StringBuilder pszNameString, 
					int cchNameString)
		{
			// Setup
			bool addRefed = false;
			ushort* unsafe_pszNameString = default(ushort*);
			int unsafe___value;
			try
			{
				// Marshalling
				pCertContext.DangerousAddRef(ref addRefed);
				fixed (global::Internal_Cryptography_Pal_Native.CertNameStrTypeAndFlags__System_Security_Cryptography_X509Certificates* pinned_pvPara = &(pvPara))
				{
					if (pszNameString == null)
						unsafe_pszNameString = null;
					else
					{
						unsafe_pszNameString = (ushort*)global::System.Runtime.InteropServices.McgMarshal.CoTaskMemAllocAndZeroMemory(new global::System.IntPtr(checked(pszNameString.Capacity * 2 
											+ 2)));
						if (unsafe_pszNameString == null)
							throw new global::System.OutOfMemoryException();
					}
					global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
					// Call to native method
					unsafe___value = global::__Interop.crypt32_dll_PInvokes.CertGetNameString__0(
										pCertContext.DangerousGetHandle(), 
										dwType, 
										dwFlags, 
										pinned_pvPara, 
										unsafe_pszNameString, 
										cchNameString
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
					global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
					if (pszNameString != null)
						global::System.Runtime.InteropServices.McgMarshal.UnicodeStringToStringBuilder(
											unsafe_pszNameString, 
											pszNameString
										);
				}
				if (addRefed)
					pCertContext.DangerousRelease();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				if (unsafe_pszNameString != null)
					global::System.Runtime.InteropServices.McgMarshal.SafeCoTaskMemFree(unsafe_pszNameString);
			}
		}

		// Signature, CryptFindOIDInfo__0, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00042D60] __Interop_Crypt32_CryptOidInfoKeyType__System_Security_Cryptography_X509Certificates__Interop_Crypt32_CryptOidInfoKeyType__System_Security_Cryptography_X509Certificates, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00042D60] System_Security_Cryptography_OidGroup__System_Security_Cryptography_Encoding__OidGroup__System_Security_Cryptography_Encoding, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.X509Certificates, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
			"", "Interop+Crypt32", "CryptFindOIDInfo")]
		public static global::System.IntPtr CryptFindOIDInfo__0(
					global::_.Interop_Crypt32_CryptOidInfoKeyType__System_Security_Cryptography_X509Certificates dwKeyType, 
					global::System.IntPtr pvKey, 
					global::System_Security_Cryptography.OidGroup__System_Security_Cryptography_Encoding group)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.crypt32_dll_PInvokes.CryptFindOIDInfo__0(
								dwKeyType, 
								pvKey, 
								group
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, CertGetCertificateChain, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000434A4] Internal_Cryptography_Pal_Native_SafeCertContextHandle__System_Security_Cryptography_X509Certificates____w64 int, [fwd] [in] [EETypeRva:0x000419B0] Internal_Cryptography_Pal_Native_FILETIME__System_Security_Cryptography_X509Certificates___ptrInternal_Cryptography_Pal_Native__FILETIME__System_Security_Cryptography_X509Certificates *, [fwd] [in] [EETypeRva:0x000434A4] Internal_Cryptography_Pal_Native_SafeCertStoreHandle__System_Security_Cryptography_X509Certificates____w64 int, [fwd] [in] [managedbyref] [nativebyref] [EETypeRva:0x0004314C] Internal_Cryptography_Pal_Native_CERT_CHAIN_PARA__System_Security_Cryptography_X509Certificates__Internal_Cryptography_Pal_Native__CERT_CHAIN_PARA__System_Security_Cryptography_X509Certificates, [fwd] [in] [EETypeRva:0x00042D60] Internal_Cryptography_Pal_Native_CertChainFlags__System_Security_Cryptography_X509Certificates__CertChainFlags__System_Security_Cryptography_X509Certificates, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000434A4] Microsoft_Win32_SafeHandles_SafeX509ChainHandle__System_Security_Cryptography_X509Certificates____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.X509Certificates, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
			"", "Interop+crypt32", "CertGetCertificateChain")]
		public static bool CertGetCertificateChain(
					global::System.IntPtr hChainEngine, 
					global::Internal.Cryptography.Pal.Native.SafeCertContextHandle__System_Security_Cryptography_X509Certificates pCertContext, 
					global::Internal_Cryptography_Pal_Native.FILETIME__System_Security_Cryptography_X509Certificates* pTime, 
					global::Internal.Cryptography.Pal.Native.SafeCertStoreHandle__System_Security_Cryptography_X509Certificates hStore, 
					ref global::Internal_Cryptography_Pal_Native.CERT_CHAIN_PARA__System_Security_Cryptography_X509Certificates pChainPara, 
					global::Internal_Cryptography_Pal_Native.CertChainFlags__System_Security_Cryptography_X509Certificates dwFlags, 
					global::System.IntPtr pvReserved, 
					out global::Microsoft.Win32.SafeHandles.SafeX509ChainHandle__System_Security_Cryptography_X509Certificates ppChainContext)
		{
			// Setup
			bool addRefed = false;
			bool addRefed_1 = false;
			global::System.IntPtr unsafe_ppChainContext;
			int unsafe___value;
			// Marshalling
			pCertContext.DangerousAddRef(ref addRefed);
			hStore.DangerousAddRef(ref addRefed_1);
			fixed (global::Internal_Cryptography_Pal_Native.CERT_CHAIN_PARA__System_Security_Cryptography_X509Certificates* pinned_pChainPara = &(pChainPara))
			{
				ppChainContext = new global::Microsoft.Win32.SafeHandles.SafeX509ChainHandle__System_Security_Cryptography_X509Certificates();
				unsafe_ppChainContext = ppChainContext.DangerousGetHandle();
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = global::__Interop.crypt32_dll_PInvokes.CertGetCertificateChain(
									hChainEngine, 
									pCertContext.DangerousGetHandle(), 
									((global::Internal_Cryptography_Pal_Native.FILETIME__System_Security_Cryptography_X509Certificates*)pTime), 
									hStore.DangerousGetHandle(), 
									pinned_pChainPara, 
									dwFlags, 
									pvReserved, 
									&(unsafe_ppChainContext)
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
				global::System.Runtime.InteropServices.McgMarshal.InitializeHandle(
									ppChainContext, 
									unsafe_ppChainContext
								);
			}
			if (addRefed_1)
				hStore.DangerousRelease();
			if (addRefed)
				pCertContext.DangerousRelease();
			// Return
			return unsafe___value != 0;
		}

		// Signature, CertNameToStr, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x00042D60] Internal_Cryptography_Pal_Native_CertEncodingType__System_Security_Cryptography_X509Certificates__CertEncodingType__System_Security_Cryptography_X509Certificates, [fwd] [in] [managedbyref] [nativebyref] [EETypeRva:0x0004314C] Internal_Cryptography_Pal_Native_CRYPTOAPI_BLOB__System_Security_Cryptography_X509Certificates__Internal_Cryptography_Pal_Native__CRYPTOAPI_BLOB__System_Security_Cryptography_X509Certificates, [fwd] [in] [EETypeRva:0x00042D60] Internal_Cryptography_Pal_Native_CertNameStrTypeAndFlags__System_Security_Cryptography_X509Certificates__CertNameStrTypeAndFlags__System_Security_Cryptography_X509Certificates, [fwd] [in] [out] [EETypeRva:0x00041CF4] System_Text_StringBuilder__wchar_t *, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.X509Certificates, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
			"", "Interop+crypt32", "CertNameToStr")]
		public static int CertNameToStr(
					global::Internal_Cryptography_Pal_Native.CertEncodingType__System_Security_Cryptography_X509Certificates dwCertEncodingType, 
					ref global::Internal_Cryptography_Pal_Native.CRYPTOAPI_BLOB__System_Security_Cryptography_X509Certificates pName, 
					global::Internal_Cryptography_Pal_Native.CertNameStrTypeAndFlags__System_Security_Cryptography_X509Certificates dwStrType, 
					global::System.Text.StringBuilder psz, 
					int csz)
		{
			// Setup
			ushort* unsafe_psz = default(ushort*);
			int unsafe___value;
			try
			{
				// Marshalling
				fixed (global::Internal_Cryptography_Pal_Native.CRYPTOAPI_BLOB__System_Security_Cryptography_X509Certificates* pinned_pName = &(pName))
				{
					if (psz == null)
						unsafe_psz = null;
					else
					{
						unsafe_psz = (ushort*)global::System.Runtime.InteropServices.McgMarshal.CoTaskMemAllocAndZeroMemory(new global::System.IntPtr(checked(psz.Capacity * 2 
											+ 2)));
						if (unsafe_psz == null)
							throw new global::System.OutOfMemoryException();
					}
					if (unsafe_psz != null)
						global::System.Runtime.InteropServices.McgMarshal.StringBuilderToUnicodeString(
											psz, 
											unsafe_psz
										);
					global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
					// Call to native method
					unsafe___value = global::__Interop.crypt32_dll_PInvokes.CertNameToStr(
										dwCertEncodingType, 
										pinned_pName, 
										dwStrType, 
										unsafe_psz, 
										csz
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
					global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
					if (psz != null)
						global::System.Runtime.InteropServices.McgMarshal.UnicodeStringToStringBuilder(
											unsafe_psz, 
											psz
										);
				}
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				if (unsafe_psz != null)
					global::System.Runtime.InteropServices.McgMarshal.SafeCoTaskMemFree(unsafe_psz);
			}
		}

		// Signature, CryptFormatObject, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00041C30] string__unsigned char *, [fwd] [in] [EETypeRva:0x00042A40] rg_byte__unsigned char *, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [out] [EETypeRva:0x00041CF4] System_Text_StringBuilder__wchar_t *, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.Encoding, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Internal.NativeCrypto.Cng+Interop", "CryptFormatObject")]
		public static bool CryptFormatObject(
					int dwCertEncodingType, 
					int dwFormatType, 
					int dwFormatStrType, 
					global::System.IntPtr pFormatStruct, 
					string lpszStructType, 
					byte[] pbEncoded, 
					int cbEncoded, 
					global::System.Text.StringBuilder pbFormat, 
					ref int pcbFormat)
		{
			// Setup
			byte* unsafe_lpszStructType = default(byte*);
			byte* unsafe_pbEncoded;
			ushort* unsafe_pbFormat = default(ushort*);
			int unsafe___value;
			try
			{
				// Marshalling
				unsafe_lpszStructType = global::System.Runtime.InteropServices.McgMarshal.StringToAnsiString(lpszStructType, false, false);
				fixed (byte* pinned_pbEncoded = ((pbEncoded != null 
							&& pbEncoded.Length == 0) ? new byte[1] : pbEncoded))
				{
					unsafe_pbEncoded = (byte*)pinned_pbEncoded;
					if (pbFormat == null)
						unsafe_pbFormat = null;
					else
					{
						unsafe_pbFormat = (ushort*)global::System.Runtime.InteropServices.McgMarshal.CoTaskMemAllocAndZeroMemory(new global::System.IntPtr(checked(pbFormat.Capacity * 2 
											+ 2)));
						if (unsafe_pbFormat == null)
							throw new global::System.OutOfMemoryException();
					}
					fixed (int* pinned_pcbFormat = &(pcbFormat))
					{
						global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
						// Call to native method
						unsafe___value = global::__Interop.crypt32_dll_PInvokes.CryptFormatObject(
											dwCertEncodingType, 
											dwFormatType, 
											dwFormatStrType, 
											pFormatStruct, 
											unsafe_lpszStructType, 
											unsafe_pbEncoded, 
											cbEncoded, 
											unsafe_pbFormat, 
											pinned_pcbFormat
										);
						global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
						global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
					}
					if (pbFormat != null)
						global::System.Runtime.InteropServices.McgMarshal.UnicodeStringToStringBuilder(
											unsafe_pbFormat, 
											pbFormat
										);
				}
				// Return
				return unsafe___value != 0;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.McgMarshal.SafeCoTaskMemFree(unsafe_lpszStructType);
				if (unsafe_pbFormat != null)
					global::System.Runtime.InteropServices.McgMarshal.SafeCoTaskMemFree(unsafe_pbFormat);
			}
		}

		// Signature, CryptFormatObject__0, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x00042D60] Internal_Cryptography_Pal_Native_CertEncodingType__System_Security_Cryptography_X509Certificates__CertEncodingType__System_Security_Cryptography_X509Certificates, [fwd] [in] [EETypeRva:0x00042D60] Internal_Cryptography_Pal_Native_FormatObjectType__System_Security_Cryptography_X509Certificates__FormatObjectType__System_Security_Cryptography_X509Certificates, [fwd] [in] [EETypeRva:0x00042D60] Internal_Cryptography_Pal_Native_FormatObjectStringType__System_Security_Cryptography_X509Certificates__FormatObjectStringType__System_Security_Cryptography_X509Certificates, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00042A40] rg_byte__unsigned char *, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [out] [EETypeRva:0x00041CF4] System_Text_StringBuilder__wchar_t *, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.X509Certificates, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
			"", "Interop+crypt32", "CryptFormatObject")]
		public static bool CryptFormatObject__0(
					global::Internal_Cryptography_Pal_Native.CertEncodingType__System_Security_Cryptography_X509Certificates dwCertEncodingType, 
					global::Internal_Cryptography_Pal_Native.FormatObjectType__System_Security_Cryptography_X509Certificates dwFormatType, 
					global::Internal_Cryptography_Pal_Native.FormatObjectStringType__System_Security_Cryptography_X509Certificates dwFormatStrType, 
					global::System.IntPtr pFormatStruct, 
					global::System.IntPtr lpszStructType, 
					byte[] pbEncoded, 
					int cbEncoded, 
					global::System.Text.StringBuilder pbFormat, 
					ref int pcbFormat)
		{
			// Setup
			byte* unsafe_pbEncoded;
			ushort* unsafe_pbFormat = default(ushort*);
			int unsafe___value;
			try
			{
				// Marshalling
				fixed (byte* pinned_pbEncoded = ((pbEncoded != null 
							&& pbEncoded.Length == 0) ? new byte[1] : pbEncoded))
				{
					unsafe_pbEncoded = (byte*)pinned_pbEncoded;
					if (pbFormat == null)
						unsafe_pbFormat = null;
					else
					{
						unsafe_pbFormat = (ushort*)global::System.Runtime.InteropServices.McgMarshal.CoTaskMemAllocAndZeroMemory(new global::System.IntPtr(checked(pbFormat.Capacity * 2 
											+ 2)));
						if (unsafe_pbFormat == null)
							throw new global::System.OutOfMemoryException();
					}
					fixed (int* pinned_pcbFormat = &(pcbFormat))
					{
						global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
						// Call to native method
						unsafe___value = global::__Interop.crypt32_dll_PInvokes.CryptFormatObject__0(
											dwCertEncodingType, 
											dwFormatType, 
											dwFormatStrType, 
											pFormatStruct, 
											lpszStructType, 
											unsafe_pbEncoded, 
											cbEncoded, 
											unsafe_pbFormat, 
											pinned_pcbFormat
										);
						global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
						global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
					}
					if (pbFormat != null)
						global::System.Runtime.InteropServices.McgMarshal.UnicodeStringToStringBuilder(
											unsafe_pbFormat, 
											pbFormat
										);
				}
				// Return
				return unsafe___value != 0;
			}
			finally
			{
				// Cleanup
				if (unsafe_pbFormat != null)
					global::System.Runtime.InteropServices.McgMarshal.SafeCoTaskMemFree(unsafe_pbFormat);
			}
		}

		// Signature, CryptImportPublicKeyInfoEx2, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x00042D60] Internal_Cryptography_Pal_Native_CertEncodingType__System_Security_Cryptography_X509Certificates__CertEncodingType__System_Security_Cryptography_X509Certificates, [fwd] [in] [EETypeRva:0x000419B0] Internal_Cryptography_Pal_Native_CERT_PUBLIC_KEY_INFO__System_Security_Cryptography_X509Certificates___ptrInternal_Cryptography_Pal_Native__CERT_PUBLIC_KEY_INFO__System_Security_Cryptography_X509Certificates *, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] void___ptrvoid *, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000434A4] Microsoft_Win32_SafeHandles_SafeBCryptKeyHandle__System_Security_Cryptography_X509Certificates____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.X509Certificates, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
			"", "Interop+crypt32", "CryptImportPublicKeyInfoEx2")]
		public static bool CryptImportPublicKeyInfoEx2(
					global::Internal_Cryptography_Pal_Native.CertEncodingType__System_Security_Cryptography_X509Certificates dwCertEncodingType, 
					global::Internal_Cryptography_Pal_Native.CERT_PUBLIC_KEY_INFO__System_Security_Cryptography_X509Certificates* pInfo, 
					int dwFlags, 
					void* pvAuxInfo, 
					out global::Microsoft.Win32.SafeHandles.SafeBCryptKeyHandle__System_Security_Cryptography_X509Certificates phKey)
		{
			// Setup
			global::System.IntPtr unsafe_phKey;
			int unsafe___value;
			// Marshalling
			phKey = new global::Microsoft.Win32.SafeHandles.SafeBCryptKeyHandle__System_Security_Cryptography_X509Certificates();
			unsafe_phKey = phKey.DangerousGetHandle();
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.crypt32_dll_PInvokes.CryptImportPublicKeyInfoEx2(
								dwCertEncodingType, 
								((global::Internal_Cryptography_Pal_Native.CERT_PUBLIC_KEY_INFO__System_Security_Cryptography_X509Certificates*)pInfo), 
								dwFlags, 
								((void*)pvAuxInfo), 
								&(unsafe_phKey)
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			global::System.Runtime.InteropServices.McgMarshal.InitializeHandle(
								phKey, 
								unsafe_phKey
							);
			// Return
			return unsafe___value != 0;
		}

		// Signature, CryptDecodeObject, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x00042D60] Internal_Cryptography_Pal_Native_CertEncodingType__System_Security_Cryptography_X509Certificates__CertEncodingType__System_Security_Cryptography_X509Certificates, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00042A40] rg_byte__unsigned char *, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x00042D60] Internal_Cryptography_Pal_Native_CryptDecodeObjectFlags__System_Security_Cryptography_X509Certificates__CryptDecodeObjectFlags__System_Security_Cryptography_X509Certificates, [fwd] [out] [EETypeRva:0x00042A40] rg_byte__unsigned char *, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.X509Certificates, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
			"", "Interop+crypt32", "CryptDecodeObject")]
		public static bool CryptDecodeObject(
					global::Internal_Cryptography_Pal_Native.CertEncodingType__System_Security_Cryptography_X509Certificates dwCertEncodingType, 
					global::System.IntPtr lpszStructType, 
					byte[] pbEncoded, 
					int cbEncoded, 
					global::Internal_Cryptography_Pal_Native.CryptDecodeObjectFlags__System_Security_Cryptography_X509Certificates dwFlags, 
					byte[] pvStructInfo, 
					ref int pcbStructInfo)
		{
			// Setup
			byte* unsafe_pbEncoded;
			byte* unsafe_pvStructInfo;
			int unsafe___value;
			// Marshalling
			fixed (byte* pinned_pbEncoded = ((pbEncoded != null 
						&& pbEncoded.Length == 0) ? new byte[1] : pbEncoded))
			{
				unsafe_pbEncoded = (byte*)pinned_pbEncoded;
				fixed (byte* pinned_pvStructInfo = ((pvStructInfo != null 
							&& pvStructInfo.Length == 0) ? new byte[1] : pvStructInfo))
				{
					unsafe_pvStructInfo = (byte*)pinned_pvStructInfo;
					fixed (int* pinned_pcbStructInfo = &(pcbStructInfo))
					{
						global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
						// Call to native method
						unsafe___value = global::__Interop.crypt32_dll_PInvokes.CryptDecodeObject(
											dwCertEncodingType, 
											lpszStructType, 
											unsafe_pbEncoded, 
											cbEncoded, 
											dwFlags, 
											unsafe_pvStructInfo, 
											pinned_pcbStructInfo
										);
						global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
						global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
					}
				}
			}
			// Return
			return unsafe___value != 0;
		}

		// Signature, CertFreeCertificateChain, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.X509Certificates, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
			"", "Interop+crypt32", "CertFreeCertificateChain")]
		public static void CertFreeCertificateChain(global::System.IntPtr pChainContext)
		{
			// Marshalling
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			global::__Interop.crypt32_dll_PInvokes.CertFreeCertificateChain(pChainContext);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
		}

		// Signature, CertVerifyCertificateChainPolicy, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_Win32_SafeHandles_SafeX509ChainHandle__System_Security_Cryptography_X509Certificates____w64 int, [fwd] [in] [managedbyref] [nativebyref] [EETypeRva:0x0004314C] Internal_Cryptography_Pal_Native_CERT_CHAIN_POLICY_PARA__System_Security_Cryptography_X509Certificates__Internal_Cryptography_Pal_Native__CERT_CHAIN_POLICY_PARA__System_Security_Cryptography_X509Certificates, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x0004314C] Internal_Cryptography_Pal_Native_CERT_CHAIN_POLICY_STATUS__System_Security_Cryptography_X509Certificates__Internal_Cryptography_Pal_Native__CERT_CHAIN_POLICY_STATUS__System_Security_Cryptography_X509Certificates, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.X509Certificates, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
			"", "Interop+crypt32", "CertVerifyCertificateChainPolicy")]
		public static bool CertVerifyCertificateChainPolicy(
					global::System.IntPtr pszPolicyOID, 
					global::Microsoft.Win32.SafeHandles.SafeX509ChainHandle__System_Security_Cryptography_X509Certificates pChainContext, 
					ref global::Internal_Cryptography_Pal_Native.CERT_CHAIN_POLICY_PARA__System_Security_Cryptography_X509Certificates pPolicyPara, 
					ref global::Internal_Cryptography_Pal_Native.CERT_CHAIN_POLICY_STATUS__System_Security_Cryptography_X509Certificates pPolicyStatus)
		{
			// Setup
			bool addRefed = false;
			int unsafe___value;
			// Marshalling
			pChainContext.DangerousAddRef(ref addRefed);
			fixed (global::Internal_Cryptography_Pal_Native.CERT_CHAIN_POLICY_PARA__System_Security_Cryptography_X509Certificates* pinned_pPolicyPara = &(pPolicyPara))
				fixed (global::Internal_Cryptography_Pal_Native.CERT_CHAIN_POLICY_STATUS__System_Security_Cryptography_X509Certificates* pinned_pPolicyStatus = &(pPolicyStatus))
				{
					global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
					// Call to native method
					unsafe___value = global::__Interop.crypt32_dll_PInvokes.CertVerifyCertificateChainPolicy(
										pszPolicyOID, 
										pChainContext.DangerousGetHandle(), 
										pinned_pPolicyPara, 
										pinned_pPolicyStatus
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
					global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
				}
			if (addRefed)
				pChainContext.DangerousRelease();
			// Return
			return unsafe___value != 0;
		}

		// Signature, CertAddCertificateLinkToStore, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000434A4] Internal_Cryptography_Pal_Native_SafeCertStoreHandle__System_Security_Cryptography_X509Certificates____w64 int, [fwd] [in] [EETypeRva:0x000434A4] Internal_Cryptography_Pal_Native_SafeCertContextHandle__System_Security_Cryptography_X509Certificates____w64 int, [fwd] [in] [EETypeRva:0x00042D60] Internal_Cryptography_Pal_Native_CertStoreAddDisposition__System_Security_Cryptography_X509Certificates__CertStoreAddDisposition__System_Security_Cryptography_X509Certificates, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.X509Certificates, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
			"", "Interop+crypt32", "CertAddCertificateLinkToStore")]
		public static bool CertAddCertificateLinkToStore(
					global::Internal.Cryptography.Pal.Native.SafeCertStoreHandle__System_Security_Cryptography_X509Certificates hCertStore, 
					global::Internal.Cryptography.Pal.Native.SafeCertContextHandle__System_Security_Cryptography_X509Certificates pCertContext, 
					global::Internal_Cryptography_Pal_Native.CertStoreAddDisposition__System_Security_Cryptography_X509Certificates dwAddDisposition, 
					global::System.IntPtr ppStoreContext)
		{
			// Setup
			bool addRefed = false;
			bool addRefed_1 = false;
			int unsafe___value;
			// Marshalling
			hCertStore.DangerousAddRef(ref addRefed);
			pCertContext.DangerousAddRef(ref addRefed_1);
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.crypt32_dll_PInvokes.CertAddCertificateLinkToStore(
								hCertStore.DangerousGetHandle(), 
								pCertContext.DangerousGetHandle(), 
								dwAddDisposition, 
								ppStoreContext
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			if (addRefed_1)
				pCertContext.DangerousRelease();
			if (addRefed)
				hCertStore.DangerousRelease();
			// Return
			return unsafe___value != 0;
		}

		// Signature, CertControlStore, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000434A4] Internal_Cryptography_Pal_Native_SafeCertStoreHandle__System_Security_Cryptography_X509Certificates____w64 int, [fwd] [in] [EETypeRva:0x00042D60] Internal_Cryptography_Pal_Native_CertControlStoreFlags__System_Security_Cryptography_X509Certificates__CertControlStoreFlags__System_Security_Cryptography_X509Certificates, [fwd] [in] [EETypeRva:0x00042D60] Internal_Cryptography_Pal_Native_CertControlStoreType__System_Security_Cryptography_X509Certificates__CertControlStoreType__System_Security_Cryptography_X509Certificates, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.X509Certificates, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
			"", "Interop+crypt32", "CertControlStore")]
		public static bool CertControlStore(
					global::Internal.Cryptography.Pal.Native.SafeCertStoreHandle__System_Security_Cryptography_X509Certificates hCertStore, 
					global::Internal_Cryptography_Pal_Native.CertControlStoreFlags__System_Security_Cryptography_X509Certificates dwFlags, 
					global::Internal_Cryptography_Pal_Native.CertControlStoreType__System_Security_Cryptography_X509Certificates dwControlType, 
					global::System.IntPtr pvCtrlPara)
		{
			// Setup
			bool addRefed = false;
			int unsafe___value;
			// Marshalling
			hCertStore.DangerousAddRef(ref addRefed);
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.crypt32_dll_PInvokes.CertControlStore(
								hCertStore.DangerousGetHandle(), 
								dwFlags, 
								dwControlType, 
								pvCtrlPara
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			if (addRefed)
				hCertStore.DangerousRelease();
			// Return
			return unsafe___value != 0;
		}

		// Signature, CertOpenStore, [fwd] [return] [EETypeRva:0x000434A4] Internal_Cryptography_Pal_Native_SafeCertStoreHandle__System_Security_Cryptography_X509Certificates____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00042D60] Internal_Cryptography_Pal_Native_CertEncodingType__System_Security_Cryptography_X509Certificates__CertEncodingType__System_Security_Cryptography_X509Certificates, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00042D60] Internal_Cryptography_Pal_Native_CertStoreFlags__System_Security_Cryptography_X509Certificates__CertStoreFlags__System_Security_Cryptography_X509Certificates, [fwd] [in] [EETypeRva:0x00041B44] string__wchar_t *, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.X509Certificates, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
			"", "Interop+crypt32", "CertOpenStore")]
		public static global::Internal.Cryptography.Pal.Native.SafeCertStoreHandle__System_Security_Cryptography_X509Certificates CertOpenStore(
					global::System.IntPtr lpszStoreProvider, 
					global::Internal_Cryptography_Pal_Native.CertEncodingType__System_Security_Cryptography_X509Certificates dwMsgAndCertEncodingType, 
					global::System.IntPtr hCryptProv, 
					global::Internal_Cryptography_Pal_Native.CertStoreFlags__System_Security_Cryptography_X509Certificates dwFlags, 
					string pvPara)
		{
			// Setup
			ushort* unsafe_pvPara = default(ushort*);
			global::Internal.Cryptography.Pal.Native.SafeCertStoreHandle__System_Security_Cryptography_X509Certificates __value;
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (char* pinned_pvPara = pvPara)
			{
				unsafe_pvPara = (ushort*)pinned_pvPara;
				__value = new global::Internal.Cryptography.Pal.Native.SafeCertStoreHandle__System_Security_Cryptography_X509Certificates();
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = global::__Interop.crypt32_dll_PInvokes.CertOpenStore(
									lpszStoreProvider, 
									dwMsgAndCertEncodingType, 
									hCryptProv, 
									dwFlags, 
									unsafe_pvPara
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
				global::System.Runtime.InteropServices.McgMarshal.InitializeHandle(
									__value, 
									unsafe___value
								);
			}
			// Return
			return __value;
		}

		// Signature, CryptDecodeObjectPointer, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x00042D60] Internal_Cryptography_Pal_Native_CertEncodingType__System_Security_Cryptography_X509Certificates__CertEncodingType__System_Security_Cryptography_X509Certificates, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00042A40] rg_byte__unsigned char *, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x00042D60] Internal_Cryptography_Pal_Native_CryptDecodeObjectFlags__System_Security_Cryptography_X509Certificates__CryptDecodeObjectFlags__System_Security_Cryptography_X509Certificates, [fwd] [out] [EETypeRva:0x000419B0] void___ptrvoid *, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.X509Certificates, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
			"", "Interop+crypt32", "CryptDecodeObjectPointer")]
		public static bool CryptDecodeObjectPointer(
					global::Internal_Cryptography_Pal_Native.CertEncodingType__System_Security_Cryptography_X509Certificates dwCertEncodingType, 
					global::System.IntPtr lpszStructType, 
					byte[] pbEncoded, 
					int cbEncoded, 
					global::Internal_Cryptography_Pal_Native.CryptDecodeObjectFlags__System_Security_Cryptography_X509Certificates dwFlags, 
					void* pvStructInfo, 
					ref int pcbStructInfo)
		{
			// Setup
			byte* unsafe_pbEncoded;
			int unsafe___value;
			// Marshalling
			fixed (byte* pinned_pbEncoded = ((pbEncoded != null 
						&& pbEncoded.Length == 0) ? new byte[1] : pbEncoded))
			{
				unsafe_pbEncoded = (byte*)pinned_pbEncoded;
				fixed (int* pinned_pcbStructInfo = &(pcbStructInfo))
				{
					global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
					// Call to native method
					unsafe___value = global::__Interop.crypt32_dll_PInvokes.CryptDecodeObjectPointer(
										dwCertEncodingType, 
										lpszStructType, 
										unsafe_pbEncoded, 
										cbEncoded, 
										dwFlags, 
										((void*)pvStructInfo), 
										pinned_pcbStructInfo
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
					global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
				}
			}
			// Return
			return unsafe___value != 0;
		}

		// Signature, CryptFindOIDInfo__1, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00042D60] __Interop_Crypt32_CryptOidInfoKeyType__System_Security_Cryptography_Cng__Interop_Crypt32_CryptOidInfoKeyType__System_Security_Cryptography_Cng, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00042D60] System_Security_Cryptography_OidGroup__System_Security_Cryptography_Encoding__OidGroup__System_Security_Cryptography_Encoding, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.Cng, Version=4.3.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Crypt32", "CryptFindOIDInfo")]
		public static global::System.IntPtr CryptFindOIDInfo__1(
					global::_.Interop_Crypt32_CryptOidInfoKeyType__System_Security_Cryptography_Cng dwKeyType, 
					global::System.IntPtr pvKey, 
					global::System_Security_Cryptography.OidGroup__System_Security_Cryptography_Encoding group)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.crypt32_dll_PInvokes.CryptFindOIDInfo__1(
								dwKeyType, 
								pvKey, 
								group
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, CertVerifyCertificateChainPolicy__0, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_Win32_SafeHandles_SafeX509ChainHandle__System_Security_Cryptography_X509Certificates____w64 int, [fwd] [in] [managedbyref] [nativebyref] [EETypeRva:0x0004314C] __Interop_Crypt32_CERT_CHAIN_POLICY_PARA__System_Net_Security____Interop_Crypt32_CERT_CHAIN_POLICY_PARA__System_Net_Security, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x0004314C] __Interop_Crypt32_CERT_CHAIN_POLICY_STATUS__System_Net_Security____Interop_Crypt32_CERT_CHAIN_POLICY_STATUS__System_Net_Security, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.Security, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Crypt32", "CertVerifyCertificateChainPolicy")]
		public static bool CertVerifyCertificateChainPolicy__0(
					global::System.IntPtr pszPolicyOID, 
					global::Microsoft.Win32.SafeHandles.SafeX509ChainHandle__System_Security_Cryptography_X509Certificates pChainContext, 
					ref global::_.Interop_Crypt32_CERT_CHAIN_POLICY_PARA__System_Net_Security pPolicyPara, 
					ref global::_.Interop_Crypt32_CERT_CHAIN_POLICY_STATUS__System_Net_Security pPolicyStatus)
		{
			// Setup
			bool addRefed = false;
			int unsafe___value;
			// Marshalling
			pChainContext.DangerousAddRef(ref addRefed);
			fixed (global::_.Interop_Crypt32_CERT_CHAIN_POLICY_PARA__System_Net_Security* pinned_pPolicyPara = &(pPolicyPara))
				fixed (global::_.Interop_Crypt32_CERT_CHAIN_POLICY_STATUS__System_Net_Security* pinned_pPolicyStatus = &(pPolicyStatus))
				{
					global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
					// Call to native method
					unsafe___value = global::__Interop.crypt32_dll_PInvokes.CertVerifyCertificateChainPolicy__0(
										pszPolicyOID, 
										pChainContext.DangerousGetHandle(), 
										pinned_pPolicyPara, 
										pinned_pPolicyStatus
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
					global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
				}
			if (addRefed)
				pChainContext.DangerousRelease();
			// Return
			return unsafe___value != 0;
		}

		// Signature, CertFindExtension, [fwd] [return] [EETypeRva:0x000419B0] Internal_Cryptography_Pal_Native_CERT_EXTENSION__System_Security_Cryptography_X509Certificates___ptrInternal_Cryptography_Pal_Native__CERT_EXTENSION__System_Security_Cryptography_X509Certificates *, [fwd] [in] [EETypeRva:0x00041C30] string__unsigned char *, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] Internal_Cryptography_Pal_Native_CERT_EXTENSION__System_Security_Cryptography_X509Certificates___ptrInternal_Cryptography_Pal_Native__CERT_EXTENSION__System_Security_Cryptography_X509Certificates *, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.X509Certificates, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
			"", "Interop+crypt32", "CertFindExtension")]
		public static global::Internal_Cryptography_Pal_Native.CERT_EXTENSION__System_Security_Cryptography_X509Certificates* CertFindExtension(
					string pszObjId, 
					int cExtensions, 
					global::Internal_Cryptography_Pal_Native.CERT_EXTENSION__System_Security_Cryptography_X509Certificates* rgExtensions)
		{
			// Setup
			byte* unsafe_pszObjId = default(byte*);
			global::Internal_Cryptography_Pal_Native.CERT_EXTENSION__System_Security_Cryptography_X509Certificates* unsafe___value;
			try
			{
				// Marshalling
				unsafe_pszObjId = global::System.Runtime.InteropServices.McgMarshal.StringToAnsiString(pszObjId, true, false);
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = (global::Internal_Cryptography_Pal_Native.CERT_EXTENSION__System_Security_Cryptography_X509Certificates*)global::__Interop.crypt32_dll_PInvokes.CertFindExtension(
									unsafe_pszObjId, 
									cExtensions, 
									((global::Internal_Cryptography_Pal_Native.CERT_EXTENSION__System_Security_Cryptography_X509Certificates*)rgExtensions)
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
				// Return
				return (global::Internal_Cryptography_Pal_Native.CERT_EXTENSION__System_Security_Cryptography_X509Certificates*)unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.McgMarshal.SafeCoTaskMemFree(unsafe_pszObjId);
			}
		}

		// Signature, CertGetValidUsages, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [managedbyref] [nativebyref] [EETypeRva:0x000434A4] Internal_Cryptography_Pal_Native_SafeCertContextHandle__System_Security_Cryptography_X509Certificates____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] int__int, [fwd] [out] [EETypeRva:0x000419B0] void___ptrvoid *, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.X509Certificates, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
			"", "Interop+crypt32", "CertGetValidUsages")]
		public static bool CertGetValidUsages(
					int cCerts, 
					ref global::Internal.Cryptography.Pal.Native.SafeCertContextHandle__System_Security_Cryptography_X509Certificates rghCerts, 
					out int cNumOIDs, 
					void* rghOIDs, 
					ref int pcbOIDs)
		{
			// Setup
			bool addRefed = false;
			global::System.IntPtr unsafe_rghCerts;
			int unsafe___value;
			// Marshalling
			rghCerts.DangerousAddRef(ref addRefed);
			unsafe_rghCerts = rghCerts.DangerousGetHandle();
			fixed (int* pinned_cNumOIDs = &(cNumOIDs))
				fixed (int* pinned_pcbOIDs = &(pcbOIDs))
				{
					global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
					// Call to native method
					unsafe___value = global::__Interop.crypt32_dll_PInvokes.CertGetValidUsages(
										cCerts, 
										&(unsafe_rghCerts), 
										pinned_cNumOIDs, 
										((void*)rghOIDs), 
										pinned_pcbOIDs
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
					global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
				}
			if (addRefed)
				rghCerts.DangerousRelease();
			// Return
			return unsafe___value != 0;
		}

		// Signature, CertGetIntendedKeyUsage, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x00042D60] Internal_Cryptography_Pal_Native_CertEncodingType__System_Security_Cryptography_X509Certificates__CertEncodingType__System_Security_Cryptography_X509Certificates, [fwd] [in] [EETypeRva:0x000419B0] Internal_Cryptography_Pal_Native_CERT_INFO__System_Security_Cryptography_X509Certificates___ptrInternal_Cryptography_Pal_Native__CERT_INFO__System_Security_Cryptography_X509Certificates *, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x00042D60] System_Security_Cryptography_X509Certificates_X509KeyUsageFlags__System_Security_Cryptography_X509Certificates__X509KeyUsageFlags__System_Security_Cryptography_X509Certificates, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.X509Certificates, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
			"", "Interop+crypt32", "CertGetIntendedKeyUsage")]
		public static bool CertGetIntendedKeyUsage(
					global::Internal_Cryptography_Pal_Native.CertEncodingType__System_Security_Cryptography_X509Certificates dwCertEncodingType, 
					global::Internal_Cryptography_Pal_Native.CERT_INFO__System_Security_Cryptography_X509Certificates* pCertInfo, 
					out global::System_Security_Cryptography_X509Certificates.X509KeyUsageFlags__System_Security_Cryptography_X509Certificates pbKeyUsage, 
					int cbKeyUsage)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			fixed (global::System_Security_Cryptography_X509Certificates.X509KeyUsageFlags__System_Security_Cryptography_X509Certificates* pinned_pbKeyUsage = &(pbKeyUsage))
			{
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = global::__Interop.crypt32_dll_PInvokes.CertGetIntendedKeyUsage(
									dwCertEncodingType, 
									((global::Internal_Cryptography_Pal_Native.CERT_INFO__System_Security_Cryptography_X509Certificates*)pCertInfo), 
									pinned_pbKeyUsage, 
									cbKeyUsage
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			}
			// Return
			return unsafe___value != 0;
		}

		// Signature, CertEnumCertificatesInStore__0, [fwd] [return] [EETypeRva:0x000419B0] __Interop_Crypt32_CERT_CONTEXT__System_Net_Security___ptr__Interop_Crypt32_CERT_CONTEXT__System_Net_Security *, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] __Interop_Crypt32_CERT_CONTEXT__System_Net_Security___ptr__Interop_Crypt32_CERT_CONTEXT__System_Net_Security *, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.Security, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Crypt32", "CertEnumCertificatesInStore")]
		public static global::_.Interop_Crypt32_CERT_CONTEXT__System_Net_Security* CertEnumCertificatesInStore__0(
					global::System.IntPtr hCertStore, 
					global::_.Interop_Crypt32_CERT_CONTEXT__System_Net_Security* pPrevCertContext)
		{
			// Setup
			global::_.Interop_Crypt32_CERT_CONTEXT__System_Net_Security* unsafe___value;
			// Marshalling
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = (global::_.Interop_Crypt32_CERT_CONTEXT__System_Net_Security*)global::__Interop.crypt32_dll_PInvokes.CertEnumCertificatesInStore__0(
								hCertStore, 
								((global::_.Interop_Crypt32_CERT_CONTEXT__System_Net_Security*)pPrevCertContext)
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
			return (global::_.Interop_Crypt32_CERT_CONTEXT__System_Net_Security*)unsafe___value;
		}

		// Signature, CertVerifyTimeValidity, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [in] [managedbyref] [nativebyref] [EETypeRva:0x0004314C] Internal_Cryptography_Pal_Native_FILETIME__System_Security_Cryptography_X509Certificates__Internal_Cryptography_Pal_Native__FILETIME__System_Security_Cryptography_X509Certificates, [fwd] [in] [EETypeRva:0x000419B0] Internal_Cryptography_Pal_Native_CERT_INFO__System_Security_Cryptography_X509Certificates___ptrInternal_Cryptography_Pal_Native__CERT_INFO__System_Security_Cryptography_X509Certificates *, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.X509Certificates, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
			"", "Interop+crypt32", "CertVerifyTimeValidity")]
		public static int CertVerifyTimeValidity(
					ref global::Internal_Cryptography_Pal_Native.FILETIME__System_Security_Cryptography_X509Certificates pTimeToVerify, 
					global::Internal_Cryptography_Pal_Native.CERT_INFO__System_Security_Cryptography_X509Certificates* pCertInfo)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			fixed (global::Internal_Cryptography_Pal_Native.FILETIME__System_Security_Cryptography_X509Certificates* pinned_pTimeToVerify = &(pTimeToVerify))
			{
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = global::__Interop.crypt32_dll_PInvokes.CertVerifyTimeValidity(
									pinned_pTimeToVerify, 
									((global::Internal_Cryptography_Pal_Native.CERT_INFO__System_Security_Cryptography_X509Certificates*)pCertInfo)
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			}
			// Return
			return unsafe___value;
		}

		// Signature, CertFreeCertificateContext__0, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.Security, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Crypt32", "CertFreeCertificateContext")]
		public static bool CertFreeCertificateContext__0(global::System.IntPtr pCertContext)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.crypt32_dll_PInvokes.CertFreeCertificateContext__0(pCertContext);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
			return unsafe___value != 0;
		}
	}

	/// <summary>
	/// P/Invoke class for module 'api-ms-win-core-com-l1-1-0.dll'
	/// </summary>
	public unsafe static partial class api_ms_win_core_com_l1_1_0_dll
	{
		// Signature, CoCreateInstance, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] byte___ptrunsigned char *, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] byte___ptrunsigned char *, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.StackTraceGenerator, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Internal.StackTraceGenerator.StackTraceGenerator", "CoCreateInstance")]
		public static int CoCreateInstance(
					byte* rclsid, 
					global::System.IntPtr pUnkOuter, 
					int dwClsContext, 
					byte* riid, 
					out global::System.IntPtr ppv)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_ppv = &(ppv))
			{
				// Call to native method
				unsafe___value = global::__Interop.api_ms_win_core_com_l1_1_0_dll_PInvokes.CoCreateInstance(
									((byte*)rclsid), 
									pUnkOuter, 
									dwClsContext, 
									((byte*)riid), 
									pinned_ppv
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}
	}

	/// <summary>
	/// P/Invoke class for module 'advapi32.dll'
	/// </summary>
	public unsafe static partial class advapi32_dll
	{
		// Signature, CryptAcquireContext, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] char___ptrwchar_t *, [fwd] [in] [EETypeRva:0x000419B0] char___ptrwchar_t *, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x00042D60] Internal_Cryptography_Pal_Native_CryptAcquireContextFlags__System_Security_Cryptography_X509Certificates__CryptAcquireContextFlags__System_Security_Cryptography_X509Certificates, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.X509Certificates, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
			"", "Interop+cryptoapi", "CryptAcquireContext")]
		public static bool CryptAcquireContext(
					out global::System.IntPtr psafeProvHandle, 
					char* pszContainer, 
					char* pszProvider, 
					int dwProvType, 
					global::Internal_Cryptography_Pal_Native.CryptAcquireContextFlags__System_Security_Cryptography_X509Certificates dwFlags)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_psafeProvHandle = &(psafeProvHandle))
			{
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = global::__Interop.advapi32_dll_PInvokes.CryptAcquireContext(
									pinned_psafeProvHandle, 
									((ushort*)pszContainer), 
									((ushort*)pszProvider), 
									dwProvType, 
									dwFlags
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			}
			// Return
			return unsafe___value != 0;
		}

		// Signature, RevertToSelf, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Principal.Windows, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Advapi32", "RevertToSelf")]
		public static bool RevertToSelf()
		{
			// Setup
			int unsafe___value;
			// Marshalling
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.advapi32_dll_PInvokes.RevertToSelf();
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
			return unsafe___value != 0;
		}

		// Signature, ImpersonateLoggedOnUser, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_Win32_SafeHandles_SafeAccessTokenHandle__System_Security_Principal_Windows____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Principal.Windows, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Advapi32", "ImpersonateLoggedOnUser")]
		public static bool ImpersonateLoggedOnUser(global::Microsoft.Win32.SafeHandles.SafeAccessTokenHandle__System_Security_Principal_Windows userToken)
		{
			// Setup
			bool addRefed = false;
			int unsafe___value;
			// Marshalling
			userToken.DangerousAddRef(ref addRefed);
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.advapi32_dll_PInvokes.ImpersonateLoggedOnUser(userToken.DangerousGetHandle());
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			if (addRefed)
				userToken.DangerousRelease();
			// Return
			return unsafe___value != 0;
		}

		// Signature, OpenThreadToken, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00042D60] System_Security_Principal_TokenAccessLevels__System_Security_Principal_Windows__TokenAccessLevels__System_Security_Principal_Windows, [fwd] [in] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000434A4] Microsoft_Win32_SafeHandles_SafeAccessTokenHandle__System_Security_Principal_Windows____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Principal.Windows, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Advapi32", "OpenThreadToken")]
		public static bool OpenThreadToken(
					global::System.IntPtr ThreadHandle, 
					global::System_Security_Principal.TokenAccessLevels__System_Security_Principal_Windows dwDesiredAccess, 
					bool bOpenAsSelf, 
					out global::Microsoft.Win32.SafeHandles.SafeAccessTokenHandle__System_Security_Principal_Windows phThreadToken)
		{
			// Setup
			global::System.IntPtr unsafe_phThreadToken;
			int unsafe___value;
			// Marshalling
			phThreadToken = new global::Microsoft.Win32.SafeHandles.SafeAccessTokenHandle__System_Security_Principal_Windows();
			unsafe_phThreadToken = phThreadToken.DangerousGetHandle();
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.advapi32_dll_PInvokes.OpenThreadToken(
								ThreadHandle, 
								dwDesiredAccess, 
								(bOpenAsSelf ? 1 : 0), 
								&(unsafe_phThreadToken)
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			global::System.Runtime.InteropServices.McgMarshal.InitializeHandle(
								phThreadToken, 
								unsafe_phThreadToken
							);
			// Return
			return unsafe___value != 0;
		}

		// Signature, OpenProcessToken, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00042D60] System_Security_Principal_TokenAccessLevels__System_Security_Principal_Windows__TokenAccessLevels__System_Security_Principal_Windows, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000434A4] Microsoft_Win32_SafeHandles_SafeAccessTokenHandle__System_Security_Principal_Windows____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Principal.Windows, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Advapi32", "OpenProcessToken")]
		public static bool OpenProcessToken(
					global::System.IntPtr ProcessToken, 
					global::System_Security_Principal.TokenAccessLevels__System_Security_Principal_Windows DesiredAccess, 
					out global::Microsoft.Win32.SafeHandles.SafeAccessTokenHandle__System_Security_Principal_Windows TokenHandle)
		{
			// Setup
			global::System.IntPtr unsafe_TokenHandle;
			int unsafe___value;
			// Marshalling
			TokenHandle = new global::Microsoft.Win32.SafeHandles.SafeAccessTokenHandle__System_Security_Principal_Windows();
			unsafe_TokenHandle = TokenHandle.DangerousGetHandle();
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.advapi32_dll_PInvokes.OpenProcessToken(
								ProcessToken, 
								DesiredAccess, 
								&(unsafe_TokenHandle)
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			global::System.Runtime.InteropServices.McgMarshal.InitializeHandle(
								TokenHandle, 
								unsafe_TokenHandle
							);
			// Return
			return unsafe___value != 0;
		}

		// Signature, CryptGetKeyParam, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000434A4] System_Security_Cryptography_SafeKeyHandle__System_Security_Cryptography_Csp____w64 int, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x00042A40] rg_byte__unsigned char *, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.Csp, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Internal.NativeCrypto.CapiHelper+Interop", "CryptGetKeyParam")]
		public static bool CryptGetKeyParam(
					global::System.Security.Cryptography.SafeKeyHandle__System_Security_Cryptography_Csp safeKeyHandle, 
					int dwParam, 
					byte[] pbData, 
					ref int pdwDataLen, 
					int dwFlags)
		{
			// Setup
			bool addRefed = false;
			byte* unsafe_pbData;
			int unsafe___value;
			// Marshalling
			safeKeyHandle.DangerousAddRef(ref addRefed);
			fixed (byte* pinned_pbData = ((pbData != null 
						&& pbData.Length == 0) ? new byte[1] : pbData))
			{
				unsafe_pbData = (byte*)pinned_pbData;
				fixed (int* pinned_pdwDataLen = &(pdwDataLen))
				{
					global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
					// Call to native method
					unsafe___value = global::__Interop.advapi32_dll_PInvokes.CryptGetKeyParam(
										safeKeyHandle.DangerousGetHandle(), 
										dwParam, 
										unsafe_pbData, 
										pinned_pdwDataLen, 
										dwFlags
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
					global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
				}
			}
			if (addRefed)
				safeKeyHandle.DangerousRelease();
			// Return
			return unsafe___value != 0;
		}

		// Signature, CryptGetDefaultProvider, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [out] [EETypeRva:0x00041CF4] System_Text_StringBuilder__wchar_t *, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.Csp, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Internal.NativeCrypto.CapiHelper+Interop", "CryptGetDefaultProvider")]
		public static bool CryptGetDefaultProvider(
					int dwProvType, 
					global::System.IntPtr pdwReserved, 
					int dwFlags, 
					global::System.Text.StringBuilder pszProvName, 
					ref int IntPtrProvName)
		{
			// Setup
			ushort* unsafe_pszProvName = default(ushort*);
			int unsafe___value;
			try
			{
				// Marshalling
				if (pszProvName == null)
					unsafe_pszProvName = null;
				else
				{
					unsafe_pszProvName = (ushort*)global::System.Runtime.InteropServices.McgMarshal.CoTaskMemAllocAndZeroMemory(new global::System.IntPtr(checked(pszProvName.Capacity * 2 
										+ 2)));
					if (unsafe_pszProvName == null)
						throw new global::System.OutOfMemoryException();
				}
				if (unsafe_pszProvName != null)
					global::System.Runtime.InteropServices.McgMarshal.StringBuilderToUnicodeString(
										pszProvName, 
										unsafe_pszProvName
									);
				fixed (int* pinned_IntPtrProvName = &(IntPtrProvName))
				{
					global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
					// Call to native method
					unsafe___value = global::__Interop.advapi32_dll_PInvokes.CryptGetDefaultProvider(
										dwProvType, 
										pdwReserved, 
										dwFlags, 
										unsafe_pszProvName, 
										pinned_IntPtrProvName
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
					global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
				}
				if (pszProvName != null)
					global::System.Runtime.InteropServices.McgMarshal.UnicodeStringToStringBuilder(
										unsafe_pszProvName, 
										pszProvName
									);
				// Return
				return unsafe___value != 0;
			}
			finally
			{
				// Cleanup
				if (unsafe_pszProvName != null)
					global::System.Runtime.InteropServices.McgMarshal.SafeCoTaskMemFree(unsafe_pszProvName);
			}
		}

		// Signature, CryptAcquireContext__0, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000434A4] System_Security_Cryptography_SafeProvHandle__System_Security_Cryptography_Csp____w64 int, [fwd] [in] [EETypeRva:0x00041B44] string__wchar_t *, [fwd] [in] [EETypeRva:0x00041B44] string__wchar_t *, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] uint__unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.Csp, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Internal.NativeCrypto.CapiHelper+Interop", "CryptAcquireContext")]
		public static bool CryptAcquireContext__0(
					out global::System.Security.Cryptography.SafeProvHandle__System_Security_Cryptography_Csp psafeProvHandle, 
					string pszContainer, 
					string pszProvider, 
					int dwProvType, 
					uint dwFlags)
		{
			// Setup
			global::System.IntPtr unsafe_psafeProvHandle;
			ushort* unsafe_pszContainer = default(ushort*);
			ushort* unsafe_pszProvider = default(ushort*);
			int unsafe___value;
			// Marshalling
			psafeProvHandle = new global::System.Security.Cryptography.SafeProvHandle__System_Security_Cryptography_Csp();
			unsafe_psafeProvHandle = psafeProvHandle.DangerousGetHandle();
			fixed (char* pinned_pszContainer = pszContainer)
			{
				unsafe_pszContainer = (ushort*)pinned_pszContainer;
				fixed (char* pinned_pszProvider = pszProvider)
				{
					unsafe_pszProvider = (ushort*)pinned_pszProvider;
					global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
					// Call to native method
					unsafe___value = global::__Interop.advapi32_dll_PInvokes.CryptAcquireContext__0(
										&(unsafe_psafeProvHandle), 
										unsafe_pszContainer, 
										unsafe_pszProvider, 
										dwProvType, 
										dwFlags
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
					global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
				}
			}
			global::System.Runtime.InteropServices.McgMarshal.InitializeHandle(
								psafeProvHandle, 
								unsafe_psafeProvHandle
							);
			// Return
			return unsafe___value != 0;
		}

		// Signature, _CryptGetUserKey, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000434A4] System_Security_Cryptography_SafeProvHandle__System_Security_Cryptography_Csp____w64 int, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000434A4] System_Security_Cryptography_SafeKeyHandle__System_Security_Cryptography_Csp____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.Csp, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Internal.NativeCrypto.CapiHelper+Interop", "_CryptGetUserKey")]
		public static bool _CryptGetUserKey(
					global::System.Security.Cryptography.SafeProvHandle__System_Security_Cryptography_Csp safeProvHandle, 
					int dwKeySpec, 
					out global::System.Security.Cryptography.SafeKeyHandle__System_Security_Cryptography_Csp safeKeyHandle)
		{
			// Setup
			bool addRefed = false;
			global::System.IntPtr unsafe_safeKeyHandle;
			int unsafe___value;
			// Marshalling
			safeProvHandle.DangerousAddRef(ref addRefed);
			safeKeyHandle = new global::System.Security.Cryptography.SafeKeyHandle__System_Security_Cryptography_Csp();
			unsafe_safeKeyHandle = safeKeyHandle.DangerousGetHandle();
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.advapi32_dll_PInvokes._CryptGetUserKey(
								safeProvHandle.DangerousGetHandle(), 
								dwKeySpec, 
								&(unsafe_safeKeyHandle)
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			global::System.Runtime.InteropServices.McgMarshal.InitializeHandle(
								safeKeyHandle, 
								unsafe_safeKeyHandle
							);
			if (addRefed)
				safeProvHandle.DangerousRelease();
			// Return
			return unsafe___value != 0;
		}

		// Signature, CryptGetProvParam, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000434A4] System_Runtime_InteropServices_SafeHandle____w64 int, [fwd] [in] [EETypeRva:0x00042D60] __Interop_Advapi32_CryptProvParam__System_Security_Cryptography_Csp__Interop_Advapi32_CryptProvParam__System_Security_Cryptography_Csp, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.Csp, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Advapi32", "CryptGetProvParam")]
		public static bool CryptGetProvParam(
					global::System.Runtime.InteropServices.SafeHandle safeProvHandle, 
					global::_.Interop_Advapi32_CryptProvParam__System_Security_Cryptography_Csp dwParam, 
					global::System.IntPtr pbData, 
					ref int dwDataLen, 
					int dwFlags)
		{
			// Setup
			bool addRefed = false;
			int unsafe___value;
			// Marshalling
			safeProvHandle.DangerousAddRef(ref addRefed);
			fixed (int* pinned_dwDataLen = &(dwDataLen))
			{
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = global::__Interop.advapi32_dll_PInvokes.CryptGetProvParam(
									safeProvHandle.DangerousGetHandle(), 
									dwParam, 
									pbData, 
									pinned_dwDataLen, 
									dwFlags
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			}
			if (addRefed)
				safeProvHandle.DangerousRelease();
			// Return
			return unsafe___value != 0;
		}

		// Signature, CryptDestroyKey, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.Csp, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Internal.NativeCrypto.CapiHelper+Interop", "CryptDestroyKey")]
		public static bool CryptDestroyKey(global::System.IntPtr hKey)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.advapi32_dll_PInvokes.CryptDestroyKey(hKey);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
			return unsafe___value != 0;
		}

		// Signature, LsaNtStatusToWinError, [fwd] [return] [EETypeRva:0x000419B0] uint__unsigned int, [fwd] [in] [EETypeRva:0x000419B0] uint__unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Principal.Windows, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Advapi32", "LsaNtStatusToWinError")]
		public static uint LsaNtStatusToWinError(uint status)
		{
			// Setup
			uint unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.advapi32_dll_PInvokes.LsaNtStatusToWinError(status);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, DuplicateTokenEx, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_Win32_SafeHandles_SafeAccessTokenHandle__System_Security_Principal_Windows____w64 int, [fwd] [in] [EETypeRva:0x000419B0] uint__unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] uint__unsigned int, [fwd] [in] [EETypeRva:0x000419B0] uint__unsigned int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x000434A4] Microsoft_Win32_SafeHandles_SafeAccessTokenHandle__System_Security_Principal_Windows____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Principal.Windows, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Advapi32", "DuplicateTokenEx")]
		public static bool DuplicateTokenEx(
					global::Microsoft.Win32.SafeHandles.SafeAccessTokenHandle__System_Security_Principal_Windows hExistingToken, 
					uint dwDesiredAccess, 
					global::System.IntPtr lpTokenAttributes, 
					uint ImpersonationLevel, 
					uint TokenType, 
					ref global::Microsoft.Win32.SafeHandles.SafeAccessTokenHandle__System_Security_Principal_Windows phNewToken)
		{
			// Setup
			bool addRefed = false;
			bool addRefed_1 = false;
			global::System.IntPtr unsafe_phNewToken;
			global::Microsoft.Win32.SafeHandles.SafeAccessTokenHandle__System_Security_Principal_Windows out_phNewToken;
			global::System.IntPtr prev_unsafe_phNewToken;
			int unsafe___value;
			// Marshalling
			hExistingToken.DangerousAddRef(ref addRefed);
			phNewToken.DangerousAddRef(ref addRefed_1);
			unsafe_phNewToken = phNewToken.DangerousGetHandle();
			prev_unsafe_phNewToken = unsafe_phNewToken;
			out_phNewToken = new global::Microsoft.Win32.SafeHandles.SafeAccessTokenHandle__System_Security_Principal_Windows();
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.advapi32_dll_PInvokes.DuplicateTokenEx(
								hExistingToken.DangerousGetHandle(), 
								dwDesiredAccess, 
								lpTokenAttributes, 
								ImpersonationLevel, 
								TokenType, 
								&(unsafe_phNewToken)
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			if (addRefed_1)
				phNewToken.DangerousRelease();
			if (prev_unsafe_phNewToken != unsafe_phNewToken)
			{
				global::System.Runtime.InteropServices.McgMarshal.InitializeHandle(
									out_phNewToken, 
									unsafe_phNewToken
								);
				phNewToken = out_phNewToken;
			}
			if (addRefed)
				hExistingToken.DangerousRelease();
			// Return
			return unsafe___value != 0;
		}

		// Signature, GetTokenInformation, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_Win32_SafeHandles_SafeAccessTokenHandle__System_Security_Principal_Windows____w64 int, [fwd] [in] [EETypeRva:0x000419B0] uint__unsigned int, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_Win32_SafeHandles_SafeLocalAllocHandle__System_Security_Principal_Windows____w64 int, [fwd] [in] [EETypeRva:0x000419B0] uint__unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] uint__unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Principal.Windows, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Advapi32", "GetTokenInformation")]
		public static bool GetTokenInformation(
					global::Microsoft.Win32.SafeHandles.SafeAccessTokenHandle__System_Security_Principal_Windows TokenHandle, 
					uint TokenInformationClass, 
					global::Microsoft.Win32.SafeHandles.SafeLocalAllocHandle__System_Security_Principal_Windows TokenInformation, 
					uint TokenInformationLength, 
					out uint ReturnLength)
		{
			// Setup
			bool addRefed = false;
			bool addRefed_1 = false;
			int unsafe___value;
			// Marshalling
			TokenHandle.DangerousAddRef(ref addRefed);
			TokenInformation.DangerousAddRef(ref addRefed_1);
			fixed (uint* pinned_ReturnLength = &(ReturnLength))
			{
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = global::__Interop.advapi32_dll_PInvokes.GetTokenInformation(
									TokenHandle.DangerousGetHandle(), 
									TokenInformationClass, 
									TokenInformation.DangerousGetHandle(), 
									TokenInformationLength, 
									pinned_ReturnLength
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			}
			if (addRefed_1)
				TokenInformation.DangerousRelease();
			if (addRefed)
				TokenHandle.DangerousRelease();
			// Return
			return unsafe___value != 0;
		}

		// Signature, CryptReleaseContext, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.Csp, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Internal.NativeCrypto.CapiHelper+Interop", "CryptReleaseContext")]
		public static bool CryptReleaseContext(
					global::System.IntPtr safeProvHandle, 
					int dwFlags)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.advapi32_dll_PInvokes.CryptReleaseContext(
								safeProvHandle, 
								dwFlags
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
			return unsafe___value != 0;
		}

		// Signature, _CryptImportKey, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000434A4] System_Security_Cryptography_SafeProvHandle__System_Security_Cryptography_Csp____w64 int, [fwd] [in] [EETypeRva:0x00042A40] rg_byte__unsigned char *, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000434A4] System_Security_Cryptography_SafeKeyHandle__System_Security_Cryptography_Csp____w64 int, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000434A4] System_Security_Cryptography_SafeKeyHandle__System_Security_Cryptography_Csp____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.Csp, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Internal.NativeCrypto.CapiHelper+Interop", "_CryptImportKey")]
		public static bool _CryptImportKey(
					global::System.Security.Cryptography.SafeProvHandle__System_Security_Cryptography_Csp hProv, 
					byte[] pbData, 
					int dwDataLen, 
					global::System.Security.Cryptography.SafeKeyHandle__System_Security_Cryptography_Csp hPubKey, 
					int dwFlags, 
					out global::System.Security.Cryptography.SafeKeyHandle__System_Security_Cryptography_Csp phKey)
		{
			// Setup
			bool addRefed = false;
			byte* unsafe_pbData;
			bool addRefed_1 = false;
			global::System.IntPtr unsafe_phKey;
			int unsafe___value;
			// Marshalling
			hProv.DangerousAddRef(ref addRefed);
			fixed (byte* pinned_pbData = ((pbData != null 
						&& pbData.Length == 0) ? new byte[1] : pbData))
			{
				unsafe_pbData = (byte*)pinned_pbData;
				hPubKey.DangerousAddRef(ref addRefed_1);
				phKey = new global::System.Security.Cryptography.SafeKeyHandle__System_Security_Cryptography_Csp();
				unsafe_phKey = phKey.DangerousGetHandle();
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = global::__Interop.advapi32_dll_PInvokes._CryptImportKey(
									hProv.DangerousGetHandle(), 
									unsafe_pbData, 
									dwDataLen, 
									hPubKey.DangerousGetHandle(), 
									dwFlags, 
									&(unsafe_phKey)
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
				global::System.Runtime.InteropServices.McgMarshal.InitializeHandle(
									phKey, 
									unsafe_phKey
								);
				if (addRefed_1)
					hPubKey.DangerousRelease();
			}
			if (addRefed)
				hProv.DangerousRelease();
			// Return
			return unsafe___value != 0;
		}

		// Signature, CryptSetProvParamIndirectPtr, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000434A4] System_Security_Cryptography_SafeProvHandle__System_Security_Cryptography_Csp____w64 int, [fwd] [in] [EETypeRva:0x00042D60] __Interop_Advapi32_CryptProvParam__System_Security_Cryptography_Csp__Interop_Advapi32_CryptProvParam__System_Security_Cryptography_Csp, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.Csp, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Internal.NativeCrypto.CapiHelper+Interop", "CryptSetProvParamIndirectPtr")]
		public static bool CryptSetProvParamIndirectPtr(
					global::System.Security.Cryptography.SafeProvHandle__System_Security_Cryptography_Csp safeProvHandle, 
					global::_.Interop_Advapi32_CryptProvParam__System_Security_Cryptography_Csp dwParam, 
					ref global::System.IntPtr pbData, 
					int dwFlags)
		{
			// Setup
			bool addRefed = false;
			int unsafe___value;
			// Marshalling
			safeProvHandle.DangerousAddRef(ref addRefed);
			fixed (global::System.IntPtr* pinned_pbData = &(pbData))
			{
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = global::__Interop.advapi32_dll_PInvokes.CryptSetProvParamIndirectPtr(
									safeProvHandle.DangerousGetHandle(), 
									dwParam, 
									pinned_pbData, 
									dwFlags
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			}
			if (addRefed)
				safeProvHandle.DangerousRelease();
			// Return
			return unsafe___value != 0;
		}

		// Signature, CryptSetProvParam, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000434A4] System_Runtime_InteropServices_SafeHandle____w64 int, [fwd] [in] [EETypeRva:0x00042D60] __Interop_Advapi32_CryptProvParam__System_Security_Cryptography_Csp__Interop_Advapi32_CryptProvParam__System_Security_Cryptography_Csp, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.Csp, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Advapi32", "CryptSetProvParam")]
		public static bool CryptSetProvParam(
					global::System.Runtime.InteropServices.SafeHandle safeProvHandle, 
					global::_.Interop_Advapi32_CryptProvParam__System_Security_Cryptography_Csp dwParam, 
					global::System.IntPtr pbData, 
					int dwFlags)
		{
			// Setup
			bool addRefed = false;
			int unsafe___value;
			// Marshalling
			safeProvHandle.DangerousAddRef(ref addRefed);
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.advapi32_dll_PInvokes.CryptSetProvParam(
								safeProvHandle.DangerousGetHandle(), 
								dwParam, 
								pbData, 
								dwFlags
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			if (addRefed)
				safeProvHandle.DangerousRelease();
			// Return
			return unsafe___value != 0;
		}

		// Signature, GetTokenInformation__0, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] uint__unsigned int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] uint__unsigned int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] uint__unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Principal.Windows, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Advapi32", "GetTokenInformation")]
		public static bool GetTokenInformation__0(
					global::System.IntPtr TokenHandle, 
					uint TokenInformationClass, 
					global::System.IntPtr TokenInformation, 
					uint TokenInformationLength, 
					out uint ReturnLength)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			fixed (uint* pinned_ReturnLength = &(ReturnLength))
			{
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = global::__Interop.advapi32_dll_PInvokes.GetTokenInformation__0(
									TokenHandle, 
									TokenInformationClass, 
									TokenInformation, 
									TokenInformationLength, 
									pinned_ReturnLength
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			}
			// Return
			return unsafe___value != 0;
		}

		// Signature, _CryptGenKey, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000434A4] System_Security_Cryptography_SafeProvHandle__System_Security_Cryptography_Csp____w64 int, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000434A4] System_Security_Cryptography_SafeKeyHandle__System_Security_Cryptography_Csp____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.Csp, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Internal.NativeCrypto.CapiHelper+Interop", "_CryptGenKey")]
		public static bool _CryptGenKey(
					global::System.Security.Cryptography.SafeProvHandle__System_Security_Cryptography_Csp safeProvHandle, 
					int Algid, 
					int dwFlags, 
					out global::System.Security.Cryptography.SafeKeyHandle__System_Security_Cryptography_Csp safeKeyHandle)
		{
			// Setup
			bool addRefed = false;
			global::System.IntPtr unsafe_safeKeyHandle;
			int unsafe___value;
			// Marshalling
			safeProvHandle.DangerousAddRef(ref addRefed);
			safeKeyHandle = new global::System.Security.Cryptography.SafeKeyHandle__System_Security_Cryptography_Csp();
			unsafe_safeKeyHandle = safeKeyHandle.DangerousGetHandle();
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.advapi32_dll_PInvokes._CryptGenKey(
								safeProvHandle.DangerousGetHandle(), 
								Algid, 
								dwFlags, 
								&(unsafe_safeKeyHandle)
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			global::System.Runtime.InteropServices.McgMarshal.InitializeHandle(
								safeKeyHandle, 
								unsafe_safeKeyHandle
							);
			if (addRefed)
				safeProvHandle.DangerousRelease();
			// Return
			return unsafe___value != 0;
		}

		// Signature, LsaLookupSids, [fwd] [return] [EETypeRva:0x000419B0] uint__unsigned int, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_Win32_SafeHandles_SafeLsaPolicyHandle__System_Security_Principal_Windows____w64 int, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x00042A40] rg_System_IntPtr____w64 int *, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x000434A4] Microsoft_Win32_SafeHandles_SafeLsaMemoryHandle__System_Security_Principal_Windows____w64 int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x000434A4] Microsoft_Win32_SafeHandles_SafeLsaMemoryHandle__System_Security_Principal_Windows____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Principal.Windows, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Advapi32", "LsaLookupSids")]
		public static uint LsaLookupSids(
					global::Microsoft.Win32.SafeHandles.SafeLsaPolicyHandle__System_Security_Principal_Windows handle, 
					int count, 
					global::System.IntPtr[] sids, 
					ref global::Microsoft.Win32.SafeHandles.SafeLsaMemoryHandle__System_Security_Principal_Windows referencedDomains, 
					ref global::Microsoft.Win32.SafeHandles.SafeLsaMemoryHandle__System_Security_Principal_Windows names)
		{
			// Setup
			bool addRefed = false;
			global::System.IntPtr* unsafe_sids;
			bool addRefed_1 = false;
			global::System.IntPtr unsafe_referencedDomains;
			global::Microsoft.Win32.SafeHandles.SafeLsaMemoryHandle__System_Security_Principal_Windows out_referencedDomains;
			global::System.IntPtr prev_unsafe_referencedDomains;
			bool addRefed_2 = false;
			global::System.IntPtr unsafe_names;
			global::Microsoft.Win32.SafeHandles.SafeLsaMemoryHandle__System_Security_Principal_Windows out_names;
			global::System.IntPtr prev_unsafe_names;
			uint unsafe___value;
			// Marshalling
			handle.DangerousAddRef(ref addRefed);
			fixed (global::System.IntPtr* pinned_sids = ((sids != null 
						&& sids.Length == 0) ? new global::System.IntPtr[1] : sids))
			{
				unsafe_sids = (global::System.IntPtr*)pinned_sids;
				referencedDomains.DangerousAddRef(ref addRefed_1);
				unsafe_referencedDomains = referencedDomains.DangerousGetHandle();
				prev_unsafe_referencedDomains = unsafe_referencedDomains;
				out_referencedDomains = new global::Microsoft.Win32.SafeHandles.SafeLsaMemoryHandle__System_Security_Principal_Windows();
				names.DangerousAddRef(ref addRefed_2);
				unsafe_names = names.DangerousGetHandle();
				prev_unsafe_names = unsafe_names;
				out_names = new global::Microsoft.Win32.SafeHandles.SafeLsaMemoryHandle__System_Security_Principal_Windows();
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = global::__Interop.advapi32_dll_PInvokes.LsaLookupSids(
									handle.DangerousGetHandle(), 
									count, 
									unsafe_sids, 
									&(unsafe_referencedDomains), 
									&(unsafe_names)
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
				if (addRefed_2)
					names.DangerousRelease();
				if (prev_unsafe_names != unsafe_names)
				{
					global::System.Runtime.InteropServices.McgMarshal.InitializeHandle(
										out_names, 
										unsafe_names
									);
					names = out_names;
				}
				if (addRefed_1)
					referencedDomains.DangerousRelease();
				if (prev_unsafe_referencedDomains != unsafe_referencedDomains)
				{
					global::System.Runtime.InteropServices.McgMarshal.InitializeHandle(
										out_referencedDomains, 
										unsafe_referencedDomains
									);
					referencedDomains = out_referencedDomains;
				}
			}
			if (addRefed)
				handle.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, LsaLookupNames2, [fwd] [return] [EETypeRva:0x000419B0] uint__unsigned int, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_Win32_SafeHandles_SafeLsaPolicyHandle__System_Security_Principal_Windows____w64 int, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000424E8] rg___Interop_UNICODE_STRING__System_Security_Principal_Windows____Interop_UNICODE_STRING__System_Security_Principal_Windows *, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x000434A4] Microsoft_Win32_SafeHandles_SafeLsaMemoryHandle__System_Security_Principal_Windows____w64 int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x000434A4] Microsoft_Win32_SafeHandles_SafeLsaMemoryHandle__System_Security_Principal_Windows____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Principal.Windows, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Advapi32", "LsaLookupNames2")]
		public static uint LsaLookupNames2(
					global::Microsoft.Win32.SafeHandles.SafeLsaPolicyHandle__System_Security_Principal_Windows handle, 
					int flags, 
					int count, 
					global::_.Interop_UNICODE_STRING__System_Security_Principal_Windows[] names, 
					ref global::Microsoft.Win32.SafeHandles.SafeLsaMemoryHandle__System_Security_Principal_Windows referencedDomains, 
					ref global::Microsoft.Win32.SafeHandles.SafeLsaMemoryHandle__System_Security_Principal_Windows sids)
		{
			// Setup
			bool addRefed = false;
			global::_.Interop_UNICODE_STRING__System_Security_Principal_Windows__Impl.UnsafeType* unsafe_names = default(global::_.Interop_UNICODE_STRING__System_Security_Principal_Windows__Impl.UnsafeType*);
			bool addRefed_1 = false;
			global::System.IntPtr unsafe_referencedDomains;
			global::Microsoft.Win32.SafeHandles.SafeLsaMemoryHandle__System_Security_Principal_Windows out_referencedDomains;
			global::System.IntPtr prev_unsafe_referencedDomains;
			bool addRefed_2 = false;
			global::System.IntPtr unsafe_sids;
			global::Microsoft.Win32.SafeHandles.SafeLsaMemoryHandle__System_Security_Principal_Windows out_sids;
			global::System.IntPtr prev_unsafe_sids;
			uint unsafe___value;
			try
			{
				// Marshalling
				handle.DangerousAddRef(ref addRefed);
				if (names == null)
					unsafe_names = null;
				else
				{
					if (names != null)
						unsafe_names = (global::_.Interop_UNICODE_STRING__System_Security_Principal_Windows__Impl.UnsafeType*)global::System.Runtime.InteropServices.McgMarshal.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(names.Length * sizeof(global::_.Interop_UNICODE_STRING__System_Security_Principal_Windows__Impl.UnsafeType))));
					if (names != null)
						for (uint mcgIdx = 0; (mcgIdx < names.Length); mcgIdx++)
						{
							// [fwd] [in] [optional] [EETypeRva:0x000421C0] __Interop_UNICODE_STRING__System_Security_Principal_Windows____Interop_UNICODE_STRING__System_Security_Principal_Windows names
							global::_.Interop_UNICODE_STRING__System_Security_Principal_Windows__Impl.Marshal__SafeToUnsafe(
												ref names[mcgIdx], 
												out unsafe_names[mcgIdx]
											);
						}
				}
				referencedDomains.DangerousAddRef(ref addRefed_1);
				unsafe_referencedDomains = referencedDomains.DangerousGetHandle();
				prev_unsafe_referencedDomains = unsafe_referencedDomains;
				out_referencedDomains = new global::Microsoft.Win32.SafeHandles.SafeLsaMemoryHandle__System_Security_Principal_Windows();
				sids.DangerousAddRef(ref addRefed_2);
				unsafe_sids = sids.DangerousGetHandle();
				prev_unsafe_sids = unsafe_sids;
				out_sids = new global::Microsoft.Win32.SafeHandles.SafeLsaMemoryHandle__System_Security_Principal_Windows();
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = global::__Interop.advapi32_dll_PInvokes.LsaLookupNames2(
									handle.DangerousGetHandle(), 
									flags, 
									count, 
									unsafe_names, 
									&(unsafe_referencedDomains), 
									&(unsafe_sids)
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
				if (addRefed_2)
					sids.DangerousRelease();
				if (prev_unsafe_sids != unsafe_sids)
				{
					global::System.Runtime.InteropServices.McgMarshal.InitializeHandle(
										out_sids, 
										unsafe_sids
									);
					sids = out_sids;
				}
				if (addRefed_1)
					referencedDomains.DangerousRelease();
				if (prev_unsafe_referencedDomains != unsafe_referencedDomains)
				{
					global::System.Runtime.InteropServices.McgMarshal.InitializeHandle(
										out_referencedDomains, 
										unsafe_referencedDomains
									);
					referencedDomains = out_referencedDomains;
				}
				if (addRefed)
					handle.DangerousRelease();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				if (unsafe_names != null)
					for (uint mcgIdx_1 = 0; (mcgIdx_1 < names.Length); mcgIdx_1++)
					{
						// [fwd] [in] [out] [optional] [EETypeRva:0x000421C0] __Interop_UNICODE_STRING__System_Security_Principal_Windows____Interop_UNICODE_STRING__System_Security_Principal_Windows names
						global::_.Interop_UNICODE_STRING__System_Security_Principal_Windows__Impl.Cleanup__Unsafe(ref unsafe_names[mcgIdx_1]);
					}
				global::System.Runtime.InteropServices.McgMarshal.SafeCoTaskMemFree(unsafe_names);
			}
		}

		// Signature, LsaOpenPolicy, [fwd] [return] [EETypeRva:0x000419B0] uint__unsigned int, [fwd] [in] [EETypeRva:0x00041B44] string__wchar_t *, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x0004314C] __Interop_LSA_OBJECT_ATTRIBUTES__System_Security_Principal_Windows____Interop_LSA_OBJECT_ATTRIBUTES__System_Security_Principal_Windows, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000434A4] Microsoft_Win32_SafeHandles_SafeLsaPolicyHandle__System_Security_Principal_Windows____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Principal.Windows, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Advapi32", "LsaOpenPolicy")]
		public static uint LsaOpenPolicy(
					string systemName, 
					ref global::_.Interop_LSA_OBJECT_ATTRIBUTES__System_Security_Principal_Windows attributes, 
					int accessMask, 
					out global::Microsoft.Win32.SafeHandles.SafeLsaPolicyHandle__System_Security_Principal_Windows handle)
		{
			// Setup
			ushort* unsafe_systemName = default(ushort*);
			global::System.IntPtr unsafe_handle;
			uint unsafe___value;
			// Marshalling
			fixed (char* pinned_systemName = systemName)
			{
				unsafe_systemName = (ushort*)pinned_systemName;
				fixed (global::_.Interop_LSA_OBJECT_ATTRIBUTES__System_Security_Principal_Windows* pinned_attributes = &(attributes))
				{
					handle = new global::Microsoft.Win32.SafeHandles.SafeLsaPolicyHandle__System_Security_Principal_Windows();
					unsafe_handle = handle.DangerousGetHandle();
					global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
					// Call to native method
					unsafe___value = global::__Interop.advapi32_dll_PInvokes.LsaOpenPolicy(
										unsafe_systemName, 
										pinned_attributes, 
										accessMask, 
										&(unsafe_handle)
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
					global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
					global::System.Runtime.InteropServices.McgMarshal.InitializeHandle(
										handle, 
										unsafe_handle
									);
				}
			}
			// Return
			return unsafe___value;
		}

		// Signature, LsaClose, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Principal.Windows, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Advapi32", "LsaClose")]
		public static int LsaClose(global::System.IntPtr handle)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.advapi32_dll_PInvokes.LsaClose(handle);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
			return unsafe___value;
		}

		// Signature, LsaFreeMemory, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Principal.Windows, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Advapi32", "LsaFreeMemory")]
		public static int LsaFreeMemory(global::System.IntPtr handle)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.advapi32_dll_PInvokes.LsaFreeMemory(handle);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
			return unsafe___value;
		}
	}

	/// <summary>
	/// P/Invoke class for module 'ws2_32.dll'
	/// </summary>
	public unsafe static partial class ws2_32_dll
	{
		// Signature, WSAGetOverlappedResult, [fwd] [return] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [in] [EETypeRva:0x000434A4] System_Net_Sockets_SafeCloseSocket__System_Net_Sockets____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_Threading_NativeOverlapped__System_Private_CoreLib___ptrSystem_Threading__NativeOverlapped__System_Private_CoreLib *, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] uint__unsigned int, [fwd] [in] [EETypeRva:0x00040848] bool__System.Boolean, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x00042D60] System_Net_Sockets_SocketFlags__System_Net_Sockets__SocketFlags__System_Net_Sockets, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.Sockets, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Winsock", "WSAGetOverlappedResult")]
		public static bool WSAGetOverlappedResult(
					global::System.Net.Sockets.SafeCloseSocket__System_Net_Sockets socketHandle, 
					global::System_Threading.NativeOverlapped__System_Private_CoreLib* overlapped, 
					out uint bytesTransferred, 
					bool wait, 
					out global::System_Net_Sockets.SocketFlags__System_Net_Sockets socketFlags)
		{
			// Setup
			bool addRefed = false;
			int unsafe___value;
			// Marshalling
			socketHandle.DangerousAddRef(ref addRefed);
			fixed (uint* pinned_bytesTransferred = &(bytesTransferred))
				fixed (global::System_Net_Sockets.SocketFlags__System_Net_Sockets* pinned_socketFlags = &(socketFlags))
				{
					global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
					// Call to native method
					unsafe___value = global::__Interop.ws2_32_dll_PInvokes.WSAGetOverlappedResult(
										socketHandle.DangerousGetHandle(), 
										((global::System_Threading.NativeOverlapped__System_Private_CoreLib*)overlapped), 
										pinned_bytesTransferred, 
										(wait ? 1 : 0), 
										pinned_socketFlags
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
					global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
				}
			if (addRefed)
				socketHandle.DangerousRelease();
			// Return
			return unsafe___value != 0;
		}

		// Signature, setsockopt, [fwd] [return] [EETypeRva:0x00042D60] System_Net_Sockets_SocketError__System_Net_Primitives__SocketError__System_Net_Primitives, [fwd] [in] [EETypeRva:0x000434A4] System_Net_Sockets_SafeCloseSocket__System_Net_Sockets____w64 int, [fwd] [in] [EETypeRva:0x00042D60] System_Net_Sockets_SocketOptionLevel__System_Net_Sockets__SocketOptionLevel__System_Net_Sockets, [fwd] [in] [EETypeRva:0x00042D60] System_Net_Sockets_SocketOptionName__System_Net_Sockets__SocketOptionName__System_Net_Sockets, [fwd] [in] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.Sockets, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Winsock", "setsockopt")]
		public static global::System_Net_Sockets.SocketError__System_Net_Primitives setsockopt(
					global::System.Net.Sockets.SafeCloseSocket__System_Net_Sockets socketHandle, 
					global::System_Net_Sockets.SocketOptionLevel__System_Net_Sockets optionLevel, 
					global::System_Net_Sockets.SocketOptionName__System_Net_Sockets optionName, 
					ref global::System.IntPtr pointer, 
					int optionLength)
		{
			// Setup
			bool addRefed = false;
			global::System_Net_Sockets.SocketError__System_Net_Primitives unsafe___value;
			// Marshalling
			socketHandle.DangerousAddRef(ref addRefed);
			fixed (global::System.IntPtr* pinned_pointer = &(pointer))
			{
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = global::__Interop.ws2_32_dll_PInvokes.setsockopt(
									socketHandle.DangerousGetHandle(), 
									optionLevel, 
									optionName, 
									pinned_pointer, 
									optionLength
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			}
			if (addRefed)
				socketHandle.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, setsockopt__0, [fwd] [return] [EETypeRva:0x00042D60] System_Net_Sockets_SocketError__System_Net_Primitives__SocketError__System_Net_Primitives, [fwd] [in] [EETypeRva:0x000434A4] System_Net_Sockets_SafeCloseSocket__System_Net_Sockets____w64 int, [fwd] [in] [EETypeRva:0x00042D60] System_Net_Sockets_SocketOptionLevel__System_Net_Sockets__SocketOptionLevel__System_Net_Sockets, [fwd] [in] [EETypeRva:0x00042D60] System_Net_Sockets_SocketOptionName__System_Net_Sockets__SocketOptionName__System_Net_Sockets, [fwd] [in] [EETypeRva:0x00042A40] rg_byte__unsigned char *, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.Sockets, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Winsock", "setsockopt")]
		public static global::System_Net_Sockets.SocketError__System_Net_Primitives setsockopt__0(
					global::System.Net.Sockets.SafeCloseSocket__System_Net_Sockets socketHandle, 
					global::System_Net_Sockets.SocketOptionLevel__System_Net_Sockets optionLevel, 
					global::System_Net_Sockets.SocketOptionName__System_Net_Sockets optionName, 
					byte[] optionValue, 
					int optionLength)
		{
			// Setup
			bool addRefed = false;
			byte* unsafe_optionValue;
			global::System_Net_Sockets.SocketError__System_Net_Primitives unsafe___value;
			// Marshalling
			socketHandle.DangerousAddRef(ref addRefed);
			fixed (byte* pinned_optionValue = ((optionValue != null 
						&& optionValue.Length == 0) ? new byte[1] : optionValue))
			{
				unsafe_optionValue = (byte*)pinned_optionValue;
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = global::__Interop.ws2_32_dll_PInvokes.setsockopt__0(
									socketHandle.DangerousGetHandle(), 
									optionLevel, 
									optionName, 
									unsafe_optionValue, 
									optionLength
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			}
			if (addRefed)
				socketHandle.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, getsockname, [fwd] [return] [EETypeRva:0x00042D60] System_Net_Sockets_SocketError__System_Net_Primitives__SocketError__System_Net_Primitives, [fwd] [in] [EETypeRva:0x000434A4] System_Net_Sockets_SafeCloseSocket__System_Net_Sockets____w64 int, [fwd] [out] [EETypeRva:0x00042A40] rg_byte__unsigned char *, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.Sockets, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Winsock", "getsockname")]
		public static global::System_Net_Sockets.SocketError__System_Net_Primitives getsockname(
					global::System.Net.Sockets.SafeCloseSocket__System_Net_Sockets socketHandle, 
					byte[] socketAddress, 
					ref int socketAddressSize)
		{
			// Setup
			bool addRefed = false;
			byte* unsafe_socketAddress;
			global::System_Net_Sockets.SocketError__System_Net_Primitives unsafe___value;
			// Marshalling
			socketHandle.DangerousAddRef(ref addRefed);
			fixed (byte* pinned_socketAddress = ((socketAddress != null 
						&& socketAddress.Length == 0) ? new byte[1] : socketAddress))
			{
				unsafe_socketAddress = (byte*)pinned_socketAddress;
				fixed (int* pinned_socketAddressSize = &(socketAddressSize))
				{
					global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
					// Call to native method
					unsafe___value = global::__Interop.ws2_32_dll_PInvokes.getsockname(
										socketHandle.DangerousGetHandle(), 
										unsafe_socketAddress, 
										pinned_socketAddressSize
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
					global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
				}
			}
			if (addRefed)
				socketHandle.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, getpeername, [fwd] [return] [EETypeRva:0x00042D60] System_Net_Sockets_SocketError__System_Net_Primitives__SocketError__System_Net_Primitives, [fwd] [in] [EETypeRva:0x000434A4] System_Net_Sockets_SafeCloseSocket__System_Net_Sockets____w64 int, [fwd] [out] [EETypeRva:0x00042A40] rg_byte__unsigned char *, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.Sockets, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Winsock", "getpeername")]
		public static global::System_Net_Sockets.SocketError__System_Net_Primitives getpeername(
					global::System.Net.Sockets.SafeCloseSocket__System_Net_Sockets socketHandle, 
					byte[] socketAddress, 
					ref int socketAddressSize)
		{
			// Setup
			bool addRefed = false;
			byte* unsafe_socketAddress;
			global::System_Net_Sockets.SocketError__System_Net_Primitives unsafe___value;
			// Marshalling
			socketHandle.DangerousAddRef(ref addRefed);
			fixed (byte* pinned_socketAddress = ((socketAddress != null 
						&& socketAddress.Length == 0) ? new byte[1] : socketAddress))
			{
				unsafe_socketAddress = (byte*)pinned_socketAddress;
				fixed (int* pinned_socketAddressSize = &(socketAddressSize))
				{
					global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
					// Call to native method
					unsafe___value = global::__Interop.ws2_32_dll_PInvokes.getpeername(
										socketHandle.DangerousGetHandle(), 
										unsafe_socketAddress, 
										pinned_socketAddressSize
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
					global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
				}
			}
			if (addRefed)
				socketHandle.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, WSAStartup, [fwd] [return] [EETypeRva:0x00042D60] System_Net_Sockets_SocketError__System_Net_Primitives__SocketError__System_Net_Primitives, [fwd] [in] [EETypeRva:0x000419B0] short__short, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000421C0] __Interop_Winsock_WSAData__System_Net_NameResolution____Interop_Winsock_WSAData__System_Net_NameResolution, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.NameResolution, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Winsock", "WSAStartup")]
		public static global::System_Net_Sockets.SocketError__System_Net_Primitives WSAStartup(
					short wVersionRequested, 
					out global::_.Interop_Winsock_WSAData__System_Net_NameResolution lpWSAData)
		{
			// Setup
			global::_.Interop_Winsock_WSAData__System_Net_NameResolution__Impl.UnsafeType unsafe_lpWSAData = default(global::_.Interop_Winsock_WSAData__System_Net_NameResolution__Impl.UnsafeType);
			global::System_Net_Sockets.SocketError__System_Net_Primitives unsafe___value;
			// Marshalling
			unsafe_lpWSAData = default(global::_.Interop_Winsock_WSAData__System_Net_NameResolution__Impl.UnsafeType);
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.ws2_32_dll_PInvokes.WSAStartup(
								wVersionRequested, 
								&(unsafe_lpWSAData)
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			global::_.Interop_Winsock_WSAData__System_Net_NameResolution__Impl.Marshal__UnsafeToSafe(
								ref unsafe_lpWSAData, 
								out lpWSAData
							);
			// Return
			return unsafe___value;
		}

		// Signature, select, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [out] [EETypeRva:0x00042A40] rg_System_IntPtr____w64 int *, [fwd] [in] [out] [EETypeRva:0x00042A40] rg_System_IntPtr____w64 int *, [fwd] [in] [out] [EETypeRva:0x00042A40] rg_System_IntPtr____w64 int *, [fwd] [in] [managedbyref] [nativebyref] [EETypeRva:0x0004314C] __Interop_Winsock_TimeValue__System_Net_Sockets____Interop_Winsock_TimeValue__System_Net_Sockets, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.Sockets, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Winsock", "select")]
		public static int select(
					int ignoredParameter, 
					global::System.IntPtr[] readfds, 
					global::System.IntPtr[] writefds, 
					global::System.IntPtr[] exceptfds, 
					ref global::_.Interop_Winsock_TimeValue__System_Net_Sockets timeout)
		{
			// Setup
			global::System.IntPtr* unsafe_readfds;
			global::System.IntPtr* unsafe_writefds;
			global::System.IntPtr* unsafe_exceptfds;
			int unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_readfds = ((readfds != null 
						&& readfds.Length == 0) ? new global::System.IntPtr[1] : readfds))
			{
				unsafe_readfds = (global::System.IntPtr*)pinned_readfds;
				fixed (global::System.IntPtr* pinned_writefds = ((writefds != null 
							&& writefds.Length == 0) ? new global::System.IntPtr[1] : writefds))
				{
					unsafe_writefds = (global::System.IntPtr*)pinned_writefds;
					fixed (global::System.IntPtr* pinned_exceptfds = ((exceptfds != null 
								&& exceptfds.Length == 0) ? new global::System.IntPtr[1] : exceptfds))
					{
						unsafe_exceptfds = (global::System.IntPtr*)pinned_exceptfds;
						fixed (global::_.Interop_Winsock_TimeValue__System_Net_Sockets* pinned_timeout = &(timeout))
						{
							global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
							// Call to native method
							unsafe___value = global::__Interop.ws2_32_dll_PInvokes.select(
												ignoredParameter, 
												unsafe_readfds, 
												unsafe_writefds, 
												unsafe_exceptfds, 
												pinned_timeout
											);
							global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
							global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
						}
					}
				}
			}
			// Return
			return unsafe___value;
		}

		// Signature, select__0, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [out] [EETypeRva:0x00042A40] rg_System_IntPtr____w64 int *, [fwd] [in] [out] [EETypeRva:0x00042A40] rg_System_IntPtr____w64 int *, [fwd] [in] [out] [EETypeRva:0x00042A40] rg_System_IntPtr____w64 int *, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.Sockets, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Winsock", "select")]
		public static int select__0(
					int ignoredParameter, 
					global::System.IntPtr[] readfds, 
					global::System.IntPtr[] writefds, 
					global::System.IntPtr[] exceptfds, 
					global::System.IntPtr nullTimeout)
		{
			// Setup
			global::System.IntPtr* unsafe_readfds;
			global::System.IntPtr* unsafe_writefds;
			global::System.IntPtr* unsafe_exceptfds;
			int unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_readfds = ((readfds != null 
						&& readfds.Length == 0) ? new global::System.IntPtr[1] : readfds))
			{
				unsafe_readfds = (global::System.IntPtr*)pinned_readfds;
				fixed (global::System.IntPtr* pinned_writefds = ((writefds != null 
							&& writefds.Length == 0) ? new global::System.IntPtr[1] : writefds))
				{
					unsafe_writefds = (global::System.IntPtr*)pinned_writefds;
					fixed (global::System.IntPtr* pinned_exceptfds = ((exceptfds != null 
								&& exceptfds.Length == 0) ? new global::System.IntPtr[1] : exceptfds))
					{
						unsafe_exceptfds = (global::System.IntPtr*)pinned_exceptfds;
						global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
						// Call to native method
						unsafe___value = global::__Interop.ws2_32_dll_PInvokes.select__0(
											ignoredParameter, 
											unsafe_readfds, 
											unsafe_writefds, 
											unsafe_exceptfds, 
											nullTimeout
										);
						global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
						global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
					}
				}
			}
			// Return
			return unsafe___value;
		}

		// Signature, ioctlsocket, [fwd] [return] [EETypeRva:0x00042D60] System_Net_Sockets_SocketError__System_Net_Primitives__SocketError__System_Net_Primitives, [fwd] [in] [EETypeRva:0x000434A4] System_Net_Sockets_SafeCloseSocket__System_Net_Sockets____w64 int, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.Sockets, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Winsock", "ioctlsocket")]
		public static global::System_Net_Sockets.SocketError__System_Net_Primitives ioctlsocket(
					global::System.Net.Sockets.SafeCloseSocket__System_Net_Sockets socketHandle, 
					int cmd, 
					ref int argp)
		{
			// Setup
			bool addRefed = false;
			global::System_Net_Sockets.SocketError__System_Net_Primitives unsafe___value;
			// Marshalling
			socketHandle.DangerousAddRef(ref addRefed);
			fixed (int* pinned_argp = &(argp))
			{
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = global::__Interop.ws2_32_dll_PInvokes.ioctlsocket(
									socketHandle.DangerousGetHandle(), 
									cmd, 
									pinned_argp
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			}
			if (addRefed)
				socketHandle.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, shutdown, [fwd] [return] [EETypeRva:0x00042D60] System_Net_Sockets_SocketError__System_Net_Primitives__SocketError__System_Net_Primitives, [fwd] [in] [EETypeRva:0x000434A4] System_Net_Sockets_SafeCloseSocket__System_Net_Sockets____w64 int, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.Sockets, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Winsock", "shutdown")]
		public static global::System_Net_Sockets.SocketError__System_Net_Primitives shutdown(
					global::System.Net.Sockets.SafeCloseSocket__System_Net_Sockets socketHandle, 
					int how)
		{
			// Setup
			bool addRefed = false;
			global::System_Net_Sockets.SocketError__System_Net_Primitives unsafe___value;
			// Marshalling
			socketHandle.DangerousAddRef(ref addRefed);
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.ws2_32_dll_PInvokes.shutdown(
								socketHandle.DangerousGetHandle(), 
								how
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			if (addRefed)
				socketHandle.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, setsockopt__1, [fwd] [return] [EETypeRva:0x00042D60] System_Net_Sockets_SocketError__System_Net_Primitives__SocketError__System_Net_Primitives, [fwd] [in] [EETypeRva:0x000434A4] System_Net_Sockets_SafeCloseSocket__System_Net_Sockets____w64 int, [fwd] [in] [EETypeRva:0x00042D60] System_Net_Sockets_SocketOptionLevel__System_Net_Sockets__SocketOptionLevel__System_Net_Sockets, [fwd] [in] [EETypeRva:0x00042D60] System_Net_Sockets_SocketOptionName__System_Net_Sockets__SocketOptionName__System_Net_Sockets, [fwd] [in] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.Sockets, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Winsock", "setsockopt")]
		public static global::System_Net_Sockets.SocketError__System_Net_Primitives setsockopt__1(
					global::System.Net.Sockets.SafeCloseSocket__System_Net_Sockets socketHandle, 
					global::System_Net_Sockets.SocketOptionLevel__System_Net_Sockets optionLevel, 
					global::System_Net_Sockets.SocketOptionName__System_Net_Sockets optionName, 
					ref int optionValue, 
					int optionLength)
		{
			// Setup
			bool addRefed = false;
			global::System_Net_Sockets.SocketError__System_Net_Primitives unsafe___value;
			// Marshalling
			socketHandle.DangerousAddRef(ref addRefed);
			fixed (int* pinned_optionValue = &(optionValue))
			{
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = global::__Interop.ws2_32_dll_PInvokes.setsockopt__1(
									socketHandle.DangerousGetHandle(), 
									optionLevel, 
									optionName, 
									pinned_optionValue, 
									optionLength
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			}
			if (addRefed)
				socketHandle.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, recv, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] byte___ptrunsigned char *, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x00042D60] System_Net_Sockets_SocketFlags__System_Net_Sockets__SocketFlags__System_Net_Sockets, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.Sockets, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Winsock", "recv")]
		public static int recv(
					global::System.IntPtr socketHandle, 
					byte* pinnedBuffer, 
					int len, 
					global::System_Net_Sockets.SocketFlags__System_Net_Sockets socketFlags)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.ws2_32_dll_PInvokes.recv(
								socketHandle, 
								((byte*)pinnedBuffer), 
								len, 
								socketFlags
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
			return unsafe___value;
		}

		// Signature, WSAIoctl, [fwd] [return] [EETypeRva:0x00042D60] System_Net_Sockets_SocketError__System_Net_Primitives__SocketError__System_Net_Primitives, [fwd] [in] [EETypeRva:0x000434A4] System_Net_Sockets_SafeCloseSocket__System_Net_Sockets____w64 int, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_Guid__System.Guid, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.Sockets, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Winsock", "WSAIoctl")]
		public static global::System_Net_Sockets.SocketError__System_Net_Primitives WSAIoctl(
					global::System.Net.Sockets.SafeCloseSocket__System_Net_Sockets socketHandle, 
					int ioControlCode, 
					ref global::System.Guid guid, 
					int guidSize, 
					out global::System.IntPtr funcPtr, 
					int funcPtrSize, 
					out int bytesTransferred, 
					global::System.IntPtr shouldBeNull, 
					global::System.IntPtr shouldBeNull2)
		{
			// Setup
			bool addRefed = false;
			global::System_Net_Sockets.SocketError__System_Net_Primitives unsafe___value;
			// Marshalling
			socketHandle.DangerousAddRef(ref addRefed);
			fixed (global::System.Guid* pinned_guid = &(guid))
				fixed (global::System.IntPtr* pinned_funcPtr = &(funcPtr))
					fixed (int* pinned_bytesTransferred = &(bytesTransferred))
					{
						global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
						// Call to native method
						unsafe___value = global::__Interop.ws2_32_dll_PInvokes.WSAIoctl(
											socketHandle.DangerousGetHandle(), 
											ioControlCode, 
											pinned_guid, 
											guidSize, 
											pinned_funcPtr, 
											funcPtrSize, 
											pinned_bytesTransferred, 
											shouldBeNull, 
											shouldBeNull2
										);
						global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
						global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
					}
			if (addRefed)
				socketHandle.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, GetAddrInfoW, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x00041B44] string__wchar_t *, [fwd] [in] [EETypeRva:0x00041B44] string__wchar_t *, [fwd] [in] [managedbyref] [nativebyref] [EETypeRva:0x0004314C] System_Net_Sockets_AddressInfo__System_Net_NameResolution__System_Net_Sockets__AddressInfo__System_Net_NameResolution, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000434A4] System_Net_Sockets_SafeFreeAddrInfo__System_Net_NameResolution____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.NameResolution, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Winsock", "GetAddrInfoW")]
		public static int GetAddrInfoW(
					string nodename, 
					string servicename, 
					ref global::System_Net_Sockets.AddressInfo__System_Net_NameResolution hints, 
					out global::System.Net.Sockets.SafeFreeAddrInfo__System_Net_NameResolution handle)
		{
			// Setup
			ushort* unsafe_nodename = default(ushort*);
			ushort* unsafe_servicename = default(ushort*);
			global::System.IntPtr unsafe_handle;
			int unsafe___value;
			// Marshalling
			fixed (char* pinned_nodename = nodename)
			{
				unsafe_nodename = (ushort*)pinned_nodename;
				fixed (char* pinned_servicename = servicename)
				{
					unsafe_servicename = (ushort*)pinned_servicename;
					fixed (global::System_Net_Sockets.AddressInfo__System_Net_NameResolution* pinned_hints = &(hints))
					{
						handle = new global::System.Net.Sockets.SafeFreeAddrInfo__System_Net_NameResolution();
						unsafe_handle = handle.DangerousGetHandle();
						global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
						// Call to native method
						unsafe___value = global::__Interop.ws2_32_dll_PInvokes.GetAddrInfoW(
											unsafe_nodename, 
											unsafe_servicename, 
											pinned_hints, 
											&(unsafe_handle)
										);
						global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
						global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
						global::System.Runtime.InteropServices.McgMarshal.InitializeHandle(
											handle, 
											unsafe_handle
										);
					}
				}
			}
			// Return
			return unsafe___value;
		}

		// Signature, WSASocketW, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00042D60] System_Net_Sockets_AddressFamily__System_Net_Primitives__AddressFamily__System_Net_Primitives, [fwd] [in] [EETypeRva:0x00042D60] System_Net_Sockets_SocketType__System_Net_Sockets__SocketType__System_Net_Sockets, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.Sockets, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Winsock", "WSASocketW")]
		public static global::System.IntPtr WSASocketW(
					global::System_Net_Sockets.AddressFamily__System_Net_Primitives addressFamily, 
					global::System_Net_Sockets.SocketType__System_Net_Sockets socketType, 
					int protocolType, 
					global::System.IntPtr protocolInfo, 
					int group, 
					int flags)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.ws2_32_dll_PInvokes.WSASocketW(
								addressFamily, 
								socketType, 
								protocolType, 
								protocolInfo, 
								group, 
								flags
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
			return unsafe___value;
		}

		// Signature, closesocket, [fwd] [return] [EETypeRva:0x00042D60] System_Net_Sockets_SocketError__System_Net_Primitives__SocketError__System_Net_Primitives, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.Sockets, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Winsock", "closesocket")]
		public static global::System_Net_Sockets.SocketError__System_Net_Primitives closesocket(global::System.IntPtr socketHandle)
		{
			// Setup
			global::System_Net_Sockets.SocketError__System_Net_Primitives unsafe___value;
			// Marshalling
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.ws2_32_dll_PInvokes.closesocket(socketHandle);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
			return unsafe___value;
		}

		// Signature, WSASocketW__0, [fwd] [return] [EETypeRva:0x000434A4] System_Net_Sockets_SafeCloseSocket_InnerSafeCloseSocket__System_Net_Sockets____w64 int, [fwd] [in] [EETypeRva:0x00042D60] System_Net_Sockets_AddressFamily__System_Net_Primitives__AddressFamily__System_Net_Primitives, [fwd] [in] [EETypeRva:0x00042D60] System_Net_Sockets_SocketType__System_Net_Sockets__SocketType__System_Net_Sockets, [fwd] [in] [EETypeRva:0x00042D60] System_Net_Sockets_ProtocolType__System_Net_Sockets__ProtocolType__System_Net_Sockets, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] uint__unsigned int, [fwd] [in] [EETypeRva:0x00042D60] __Interop_Winsock_SocketConstructorFlags__System_Net_Sockets__Interop_Winsock_SocketConstructorFlags__System_Net_Sockets, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.Sockets, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Winsock", "WSASocketW")]
		public static global::System.Net.Sockets.SafeCloseSocket_InnerSafeCloseSocket__System_Net_Sockets WSASocketW__0(
					global::System_Net_Sockets.AddressFamily__System_Net_Primitives addressFamily, 
					global::System_Net_Sockets.SocketType__System_Net_Sockets socketType, 
					global::System_Net_Sockets.ProtocolType__System_Net_Sockets protocolType, 
					global::System.IntPtr protocolInfo, 
					uint group, 
					global::_.Interop_Winsock_SocketConstructorFlags__System_Net_Sockets flags)
		{
			// Setup
			global::System.Net.Sockets.SafeCloseSocket_InnerSafeCloseSocket__System_Net_Sockets __value;
			global::System.IntPtr unsafe___value;
			// Marshalling
			__value = new global::System.Net.Sockets.SafeCloseSocket_InnerSafeCloseSocket__System_Net_Sockets();
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.ws2_32_dll_PInvokes.WSASocketW__0(
								addressFamily, 
								socketType, 
								protocolType, 
								protocolInfo, 
								group, 
								flags
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			global::System.Runtime.InteropServices.McgMarshal.InitializeHandle(
								__value, 
								unsafe___value
							);
			// Return
			return __value;
		}

		// Signature, WSAConnect, [fwd] [return] [EETypeRva:0x00042D60] System_Net_Sockets_SocketError__System_Net_Primitives__SocketError__System_Net_Primitives, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00042A40] rg_byte__unsigned char *, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.Sockets, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Winsock", "WSAConnect")]
		public static global::System_Net_Sockets.SocketError__System_Net_Primitives WSAConnect(
					global::System.IntPtr socketHandle, 
					byte[] socketAddress, 
					int socketAddressSize, 
					global::System.IntPtr inBuffer, 
					global::System.IntPtr outBuffer, 
					global::System.IntPtr sQOS, 
					global::System.IntPtr gQOS)
		{
			// Setup
			byte* unsafe_socketAddress;
			global::System_Net_Sockets.SocketError__System_Net_Primitives unsafe___value;
			// Marshalling
			fixed (byte* pinned_socketAddress = ((socketAddress != null 
						&& socketAddress.Length == 0) ? new byte[1] : socketAddress))
			{
				unsafe_socketAddress = (byte*)pinned_socketAddress;
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = global::__Interop.ws2_32_dll_PInvokes.WSAConnect(
									socketHandle, 
									unsafe_socketAddress, 
									socketAddressSize, 
									inBuffer, 
									outBuffer, 
									sQOS, 
									gQOS
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			}
			// Return
			return unsafe___value;
		}

		// Signature, listen, [fwd] [return] [EETypeRva:0x00042D60] System_Net_Sockets_SocketError__System_Net_Primitives__SocketError__System_Net_Primitives, [fwd] [in] [EETypeRva:0x000434A4] System_Net_Sockets_SafeCloseSocket__System_Net_Sockets____w64 int, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.Sockets, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Winsock", "listen")]
		public static global::System_Net_Sockets.SocketError__System_Net_Primitives listen(
					global::System.Net.Sockets.SafeCloseSocket__System_Net_Sockets socketHandle, 
					int backlog)
		{
			// Setup
			bool addRefed = false;
			global::System_Net_Sockets.SocketError__System_Net_Primitives unsafe___value;
			// Marshalling
			socketHandle.DangerousAddRef(ref addRefed);
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.ws2_32_dll_PInvokes.listen(
								socketHandle.DangerousGetHandle(), 
								backlog
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			if (addRefed)
				socketHandle.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, bind, [fwd] [return] [EETypeRva:0x00042D60] System_Net_Sockets_SocketError__System_Net_Primitives__SocketError__System_Net_Primitives, [fwd] [in] [EETypeRva:0x000434A4] System_Net_Sockets_SafeCloseSocket__System_Net_Sockets____w64 int, [fwd] [in] [EETypeRva:0x00042A40] rg_byte__unsigned char *, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.Sockets, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Winsock", "bind")]
		public static global::System_Net_Sockets.SocketError__System_Net_Primitives bind(
					global::System.Net.Sockets.SafeCloseSocket__System_Net_Sockets socketHandle, 
					byte[] socketAddress, 
					int socketAddressSize)
		{
			// Setup
			bool addRefed = false;
			byte* unsafe_socketAddress;
			global::System_Net_Sockets.SocketError__System_Net_Primitives unsafe___value;
			// Marshalling
			socketHandle.DangerousAddRef(ref addRefed);
			fixed (byte* pinned_socketAddress = ((socketAddress != null 
						&& socketAddress.Length == 0) ? new byte[1] : socketAddress))
			{
				unsafe_socketAddress = (byte*)pinned_socketAddress;
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = global::__Interop.ws2_32_dll_PInvokes.bind(
									socketHandle.DangerousGetHandle(), 
									unsafe_socketAddress, 
									socketAddressSize
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			}
			if (addRefed)
				socketHandle.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, getsockopt, [fwd] [return] [EETypeRva:0x00042D60] System_Net_Sockets_SocketError__System_Net_Primitives__SocketError__System_Net_Primitives, [fwd] [in] [EETypeRva:0x000434A4] System_Net_Sockets_SafeCloseSocket__System_Net_Sockets____w64 int, [fwd] [in] [EETypeRva:0x00042D60] System_Net_Sockets_SocketOptionLevel__System_Net_Sockets__SocketOptionLevel__System_Net_Sockets, [fwd] [in] [EETypeRva:0x00042D60] System_Net_Sockets_SocketOptionName__System_Net_Sockets__SocketOptionName__System_Net_Sockets, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] int__int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.Sockets, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Winsock", "getsockopt")]
		public static global::System_Net_Sockets.SocketError__System_Net_Primitives getsockopt(
					global::System.Net.Sockets.SafeCloseSocket__System_Net_Sockets socketHandle, 
					global::System_Net_Sockets.SocketOptionLevel__System_Net_Sockets optionLevel, 
					global::System_Net_Sockets.SocketOptionName__System_Net_Sockets optionName, 
					out int optionValue, 
					ref int optionLength)
		{
			// Setup
			bool addRefed = false;
			global::System_Net_Sockets.SocketError__System_Net_Primitives unsafe___value;
			// Marshalling
			socketHandle.DangerousAddRef(ref addRefed);
			fixed (int* pinned_optionValue = &(optionValue))
				fixed (int* pinned_optionLength = &(optionLength))
				{
					global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
					// Call to native method
					unsafe___value = global::__Interop.ws2_32_dll_PInvokes.getsockopt(
										socketHandle.DangerousGetHandle(), 
										optionLevel, 
										optionName, 
										pinned_optionValue, 
										pinned_optionLength
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
					global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
				}
			if (addRefed)
				socketHandle.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, send, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] byte___ptrunsigned char *, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x00042D60] System_Net_Sockets_SocketFlags__System_Net_Sockets__SocketFlags__System_Net_Sockets, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.Sockets, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Winsock", "send")]
		public static int send(
					global::System.IntPtr socketHandle, 
					byte* pinnedBuffer, 
					int len, 
					global::System_Net_Sockets.SocketFlags__System_Net_Sockets socketFlags)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.ws2_32_dll_PInvokes.send(
								socketHandle, 
								((byte*)pinnedBuffer), 
								len, 
								socketFlags
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
			return unsafe___value;
		}

		// Signature, freeaddrinfo, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.NameResolution, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Winsock", "freeaddrinfo")]
		public static void freeaddrinfo(global::System.IntPtr info)
		{
			// Marshalling
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			global::__Interop.ws2_32_dll_PInvokes.freeaddrinfo(info);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
		}

		// Signature, FreeAddrInfoExW, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_Net_Sockets_AddressInfoEx__System_Net_NameResolution___ptrSystem_Net_Sockets__AddressInfoEx__System_Net_NameResolution *, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.NameResolution, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Winsock", "FreeAddrInfoExW")]
		public static void FreeAddrInfoExW(global::System_Net_Sockets.AddressInfoEx__System_Net_NameResolution* pAddrInfo)
		{
			// Marshalling
			// Call to native method
			global::__Interop.ws2_32_dll_PInvokes.FreeAddrInfoExW(((global::System_Net_Sockets.AddressInfoEx__System_Net_NameResolution*)pAddrInfo));
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}

		// Signature, WSASocketW__1, [fwd] [return] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00042D60] System_Net_Sockets_AddressFamily__System_Net_Primitives__AddressFamily__System_Net_Primitives, [fwd] [in] [EETypeRva:0x00042D60] System_Net_Internals_SocketType__System_Net_NameResolution__SocketType__System_Net_NameResolution, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.NameResolution, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Winsock", "WSASocketW")]
		public static global::System.IntPtr WSASocketW__1(
					global::System_Net_Sockets.AddressFamily__System_Net_Primitives addressFamily, 
					global::System_Net_Internals.SocketType__System_Net_NameResolution socketType, 
					int protocolType, 
					global::System.IntPtr protocolInfo, 
					int group, 
					int flags)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.ws2_32_dll_PInvokes.WSASocketW__1(
								addressFamily, 
								socketType, 
								protocolType, 
								protocolInfo, 
								group, 
								flags
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
			return unsafe___value;
		}

		// Signature, closesocket__0, [fwd] [return] [EETypeRva:0x00042D60] System_Net_Sockets_SocketError__System_Net_Primitives__SocketError__System_Net_Primitives, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.NameResolution, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Winsock", "closesocket")]
		public static global::System_Net_Sockets.SocketError__System_Net_Primitives closesocket__0(global::System.IntPtr socketHandle)
		{
			// Setup
			global::System_Net_Sockets.SocketError__System_Net_Primitives unsafe___value;
			// Marshalling
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.ws2_32_dll_PInvokes.closesocket__0(socketHandle);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
			return unsafe___value;
		}

		// Signature, gethostname, [fwd] [return] [EETypeRva:0x00042D60] System_Net_Sockets_SocketError__System_Net_Primitives__SocketError__System_Net_Primitives, [fwd] [out] [EETypeRva:0x00041CF4] System_Text_StringBuilder__unsigned char *, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.NameResolution, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Winsock", "gethostname")]
		public static global::System_Net_Sockets.SocketError__System_Net_Primitives gethostname(
					global::System.Text.StringBuilder hostName, 
					int bufferLength)
		{
			// Setup
			byte* unsafe_hostName = default(byte*);
			global::System_Net_Sockets.SocketError__System_Net_Primitives unsafe___value;
			try
			{
				// Marshalling
				if (hostName == null)
					unsafe_hostName = null;
				else
				{
					unsafe_hostName = (byte*)global::System.Runtime.InteropServices.McgMarshal.CoTaskMemAllocAndZeroMemory(new global::System.IntPtr(checked(hostName.Capacity * global::System.Runtime.InteropServices.Marshal.SystemMaxDBCSCharSize 
										+ 2)));
					if (unsafe_hostName == null)
						throw new global::System.OutOfMemoryException();
				}
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = global::__Interop.ws2_32_dll_PInvokes.gethostname(
									unsafe_hostName, 
									bufferLength
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
				if (hostName != null)
					global::System.Runtime.InteropServices.McgMarshal.AnsiStringToStringBuilder(
										unsafe_hostName, 
										hostName
									);
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				if (unsafe_hostName != null)
					global::System.Runtime.InteropServices.McgMarshal.SafeCoTaskMemFree(unsafe_hostName);
			}
		}

		// Signature, getsockopt__0, [fwd] [return] [EETypeRva:0x00042D60] System_Net_Sockets_SocketError__System_Net_Primitives__SocketError__System_Net_Primitives, [fwd] [in] [EETypeRva:0x000434A4] System_Net_Sockets_SafeCloseSocket__System_Net_Sockets____w64 int, [fwd] [in] [EETypeRva:0x00042D60] System_Net_Sockets_SocketOptionLevel__System_Net_Sockets__SocketOptionLevel__System_Net_Sockets, [fwd] [in] [EETypeRva:0x00042D60] System_Net_Sockets_SocketOptionName__System_Net_Sockets__SocketOptionName__System_Net_Sockets, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x0004314C] __Interop_Winsock_Linger__System_Net_Sockets____Interop_Winsock_Linger__System_Net_Sockets, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.Sockets, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Winsock", "getsockopt")]
		public static global::System_Net_Sockets.SocketError__System_Net_Primitives getsockopt__0(
					global::System.Net.Sockets.SafeCloseSocket__System_Net_Sockets socketHandle, 
					global::System_Net_Sockets.SocketOptionLevel__System_Net_Sockets optionLevel, 
					global::System_Net_Sockets.SocketOptionName__System_Net_Sockets optionName, 
					out global::_.Interop_Winsock_Linger__System_Net_Sockets optionValue, 
					ref int optionLength)
		{
			// Setup
			bool addRefed = false;
			global::System_Net_Sockets.SocketError__System_Net_Primitives unsafe___value;
			// Marshalling
			socketHandle.DangerousAddRef(ref addRefed);
			fixed (global::_.Interop_Winsock_Linger__System_Net_Sockets* pinned_optionValue = &(optionValue))
				fixed (int* pinned_optionLength = &(optionLength))
				{
					global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
					// Call to native method
					unsafe___value = global::__Interop.ws2_32_dll_PInvokes.getsockopt__0(
										socketHandle.DangerousGetHandle(), 
										optionLevel, 
										optionName, 
										pinned_optionValue, 
										pinned_optionLength
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
					global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
				}
			if (addRefed)
				socketHandle.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, getsockopt__1, [fwd] [return] [EETypeRva:0x00042D60] System_Net_Sockets_SocketError__System_Net_Primitives__SocketError__System_Net_Primitives, [fwd] [in] [EETypeRva:0x000434A4] System_Net_Sockets_SafeCloseSocket__System_Net_Sockets____w64 int, [fwd] [in] [EETypeRva:0x00042D60] System_Net_Sockets_SocketOptionLevel__System_Net_Sockets__SocketOptionLevel__System_Net_Sockets, [fwd] [in] [EETypeRva:0x00042D60] System_Net_Sockets_SocketOptionName__System_Net_Sockets__SocketOptionName__System_Net_Sockets, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x0004314C] __Interop_Winsock_IPMulticastRequest__System_Net_Sockets____Interop_Winsock_IPMulticastRequest__System_Net_Sockets, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.Sockets, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Winsock", "getsockopt")]
		public static global::System_Net_Sockets.SocketError__System_Net_Primitives getsockopt__1(
					global::System.Net.Sockets.SafeCloseSocket__System_Net_Sockets socketHandle, 
					global::System_Net_Sockets.SocketOptionLevel__System_Net_Sockets optionLevel, 
					global::System_Net_Sockets.SocketOptionName__System_Net_Sockets optionName, 
					out global::_.Interop_Winsock_IPMulticastRequest__System_Net_Sockets optionValue, 
					ref int optionLength)
		{
			// Setup
			bool addRefed = false;
			global::System_Net_Sockets.SocketError__System_Net_Primitives unsafe___value;
			// Marshalling
			socketHandle.DangerousAddRef(ref addRefed);
			fixed (global::_.Interop_Winsock_IPMulticastRequest__System_Net_Sockets* pinned_optionValue = &(optionValue))
				fixed (int* pinned_optionLength = &(optionLength))
				{
					global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
					// Call to native method
					unsafe___value = global::__Interop.ws2_32_dll_PInvokes.getsockopt__1(
										socketHandle.DangerousGetHandle(), 
										optionLevel, 
										optionName, 
										pinned_optionValue, 
										pinned_optionLength
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
					global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
				}
			if (addRefed)
				socketHandle.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, getsockopt__2, [fwd] [return] [EETypeRva:0x00042D60] System_Net_Sockets_SocketError__System_Net_Primitives__SocketError__System_Net_Primitives, [fwd] [in] [EETypeRva:0x000434A4] System_Net_Sockets_SafeCloseSocket__System_Net_Sockets____w64 int, [fwd] [in] [EETypeRva:0x00042D60] System_Net_Sockets_SocketOptionLevel__System_Net_Sockets__SocketOptionLevel__System_Net_Sockets, [fwd] [in] [EETypeRva:0x00042D60] System_Net_Sockets_SocketOptionName__System_Net_Sockets__SocketOptionName__System_Net_Sockets, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000421C0] __Interop_Winsock_IPv6MulticastRequest__System_Net_Sockets____Interop_Winsock_IPv6MulticastRequest__System_Net_Sockets, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.Sockets, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Winsock", "getsockopt")]
		public static global::System_Net_Sockets.SocketError__System_Net_Primitives getsockopt__2(
					global::System.Net.Sockets.SafeCloseSocket__System_Net_Sockets socketHandle, 
					global::System_Net_Sockets.SocketOptionLevel__System_Net_Sockets optionLevel, 
					global::System_Net_Sockets.SocketOptionName__System_Net_Sockets optionName, 
					out global::_.Interop_Winsock_IPv6MulticastRequest__System_Net_Sockets optionValue, 
					ref int optionLength)
		{
			// Setup
			bool addRefed = false;
			global::_.Interop_Winsock_IPv6MulticastRequest__System_Net_Sockets__Impl.UnsafeType unsafe_optionValue = default(global::_.Interop_Winsock_IPv6MulticastRequest__System_Net_Sockets__Impl.UnsafeType);
			global::System_Net_Sockets.SocketError__System_Net_Primitives unsafe___value;
			// Marshalling
			socketHandle.DangerousAddRef(ref addRefed);
			unsafe_optionValue = default(global::_.Interop_Winsock_IPv6MulticastRequest__System_Net_Sockets__Impl.UnsafeType);
			fixed (int* pinned_optionLength = &(optionLength))
			{
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = global::__Interop.ws2_32_dll_PInvokes.getsockopt__2(
									socketHandle.DangerousGetHandle(), 
									optionLevel, 
									optionName, 
									&(unsafe_optionValue), 
									pinned_optionLength
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			}
			global::_.Interop_Winsock_IPv6MulticastRequest__System_Net_Sockets__Impl.Marshal__UnsafeToSafe(
								ref unsafe_optionValue, 
								out optionValue
							);
			if (addRefed)
				socketHandle.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, ioctlsocket__0, [fwd] [return] [EETypeRva:0x00042D60] System_Net_Sockets_SocketError__System_Net_Primitives__SocketError__System_Net_Primitives, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.Sockets, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Winsock", "ioctlsocket")]
		public static global::System_Net_Sockets.SocketError__System_Net_Primitives ioctlsocket__0(
					global::System.IntPtr handle, 
					int cmd, 
					ref int argp)
		{
			// Setup
			global::System_Net_Sockets.SocketError__System_Net_Primitives unsafe___value;
			// Marshalling
			fixed (int* pinned_argp = &(argp))
			{
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = global::__Interop.ws2_32_dll_PInvokes.ioctlsocket__0(
									handle, 
									cmd, 
									pinned_argp
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			}
			// Return
			return unsafe___value;
		}

		// Signature, setsockopt__2, [fwd] [return] [EETypeRva:0x00042D60] System_Net_Sockets_SocketError__System_Net_Primitives__SocketError__System_Net_Primitives, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00042D60] System_Net_Sockets_SocketOptionLevel__System_Net_Sockets__SocketOptionLevel__System_Net_Sockets, [fwd] [in] [EETypeRva:0x00042D60] System_Net_Sockets_SocketOptionName__System_Net_Sockets__SocketOptionName__System_Net_Sockets, [fwd] [in] [managedbyref] [nativebyref] [EETypeRva:0x0004314C] __Interop_Winsock_Linger__System_Net_Sockets____Interop_Winsock_Linger__System_Net_Sockets, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.Sockets, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Winsock", "setsockopt")]
		public static global::System_Net_Sockets.SocketError__System_Net_Primitives setsockopt__2(
					global::System.IntPtr handle, 
					global::System_Net_Sockets.SocketOptionLevel__System_Net_Sockets optionLevel, 
					global::System_Net_Sockets.SocketOptionName__System_Net_Sockets optionName, 
					ref global::_.Interop_Winsock_Linger__System_Net_Sockets linger, 
					int optionLength)
		{
			// Setup
			global::System_Net_Sockets.SocketError__System_Net_Primitives unsafe___value;
			// Marshalling
			fixed (global::_.Interop_Winsock_Linger__System_Net_Sockets* pinned_linger = &(linger))
			{
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = global::__Interop.ws2_32_dll_PInvokes.setsockopt__2(
									handle, 
									optionLevel, 
									optionName, 
									pinned_linger, 
									optionLength
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			}
			// Return
			return unsafe___value;
		}

		// Signature, accept, [fwd] [return] [EETypeRva:0x000434A4] System_Net_Sockets_SafeCloseSocket_InnerSafeCloseSocket__System_Net_Sockets____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [EETypeRva:0x00042A40] rg_byte__unsigned char *, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.Sockets, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Winsock", "accept")]
		public static global::System.Net.Sockets.SafeCloseSocket_InnerSafeCloseSocket__System_Net_Sockets accept(
					global::System.IntPtr socketHandle, 
					byte[] socketAddress, 
					ref int socketAddressSize)
		{
			// Setup
			byte* unsafe_socketAddress;
			global::System.Net.Sockets.SafeCloseSocket_InnerSafeCloseSocket__System_Net_Sockets __value;
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (byte* pinned_socketAddress = ((socketAddress != null 
						&& socketAddress.Length == 0) ? new byte[1] : socketAddress))
			{
				unsafe_socketAddress = (byte*)pinned_socketAddress;
				fixed (int* pinned_socketAddressSize = &(socketAddressSize))
				{
					__value = new global::System.Net.Sockets.SafeCloseSocket_InnerSafeCloseSocket__System_Net_Sockets();
					global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
					// Call to native method
					unsafe___value = global::__Interop.ws2_32_dll_PInvokes.accept(
										socketHandle, 
										unsafe_socketAddress, 
										pinned_socketAddressSize
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
					global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
					global::System.Runtime.InteropServices.McgMarshal.InitializeHandle(
										__value, 
										unsafe___value
									);
				}
			}
			// Return
			return __value;
		}

		// Signature, GetAddrInfoExW, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x00041B44] string__wchar_t *, [fwd] [in] [EETypeRva:0x00041B44] string__wchar_t *, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [managedbyref] [nativebyref] [EETypeRva:0x0004314C] System_Net_Sockets_AddressInfoEx__System_Net_NameResolution__System_Net_Sockets__AddressInfoEx__System_Net_NameResolution, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_Net_Sockets_AddressInfoEx__System_Net_NameResolution___ptrSystem_Net_Sockets__AddressInfoEx__System_Net_NameResolution *, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [managedbyref] [nativebyref] [EETypeRva:0x0004314C] System_Threading_NativeOverlapped__System_Private_CoreLib__System_Threading__NativeOverlapped__System_Private_CoreLib, [fwd] [in] [EETypeRva:0x00041EA8] Interop_Winsock_LPLOOKUPSERVICE_COMPLETION_ROUTINE__System_Net_NameResolution____Interop_Winsock_LPLOOKUPSERVICE_COMPLETION_ROUTINE__System_Net_NameResolution, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.NameResolution, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Winsock", "GetAddrInfoExW")]
		public static int GetAddrInfoExW(
					string pName, 
					string pServiceName, 
					int dwNamespace, 
					global::System.IntPtr lpNspId, 
					ref global::System_Net_Sockets.AddressInfoEx__System_Net_NameResolution pHints, 
					out global::System_Net_Sockets.AddressInfoEx__System_Net_NameResolution* ppResult, 
					global::System.IntPtr timeout, 
					ref global::System_Threading.NativeOverlapped__System_Private_CoreLib lpOverlapped, 
					global::Interop_Winsock_LPLOOKUPSERVICE_COMPLETION_ROUTINE__System_Net_NameResolution lpCompletionRoutine, 
					out global::System.IntPtr lpNameHandle)
		{
			// Setup
			ushort* unsafe_pName = default(ushort*);
			ushort* unsafe_pServiceName = default(ushort*);
			void* unsafe_lpCompletionRoutine = default(void*);
			int unsafe___value;
			try
			{
				// Marshalling
				fixed (char* pinned_pName = pName)
				{
					unsafe_pName = (ushort*)pinned_pName;
					fixed (char* pinned_pServiceName = pServiceName)
					{
						unsafe_pServiceName = (ushort*)pinned_pServiceName;
						fixed (global::System_Net_Sockets.AddressInfoEx__System_Net_NameResolution* pinned_pHints = &(pHints))
							fixed (global::System_Net_Sockets.AddressInfoEx__System_Net_NameResolution** pinned_ppResult = &(ppResult))
								fixed (global::System_Threading.NativeOverlapped__System_Private_CoreLib* pinned_lpOverlapped = &(lpOverlapped))
								{
									unsafe_lpCompletionRoutine = (void*)global::System.Runtime.InteropServices.McgMarshal.GetStubForPInvokeDelegate(
														global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("Interop+Winsock+LPLOOKUPSERVICE_COMPLETION_ROUTINE,System.Net.NameResolution, Version=4.1.1.0, Culture=neutral, " +
																"PublicKeyToken=b03f5f7f11d50a3a"), 
														lpCompletionRoutine
													);
									fixed (global::System.IntPtr* pinned_lpNameHandle = &(lpNameHandle))
									{
										global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
										// Call to native method
										unsafe___value = global::__Interop.ws2_32_dll_PInvokes.GetAddrInfoExW(
															unsafe_pName, 
															unsafe_pServiceName, 
															dwNamespace, 
															lpNspId, 
															pinned_pHints, 
															pinned_ppResult, 
															timeout, 
															pinned_lpOverlapped, 
															unsafe_lpCompletionRoutine, 
															pinned_lpNameHandle
														);
										global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
										global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
									}
								}
					}
				}
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(lpCompletionRoutine);
			}
		}

		// Signature, WSARecv, [fwd] [return] [EETypeRva:0x00042D60] System_Net_Sockets_SocketError__System_Net_Primitives__SocketError__System_Net_Primitives, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_Net_Sockets_WSABuffer__System_Net_Sockets___ptrSystem_Net_Sockets__WSABuffer__System_Net_Sockets *, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] int__int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00042D60] System_Net_Sockets_SocketFlags__System_Net_Sockets__SocketFlags__System_Net_Sockets, [fwd] [in] [EETypeRva:0x000419B0] System_Threading_NativeOverlapped__System_Private_CoreLib___ptrSystem_Threading__NativeOverlapped__System_Private_CoreLib *, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.Sockets, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Winsock", "WSARecv")]
		public static global::System_Net_Sockets.SocketError__System_Net_Primitives WSARecv(
					global::System.IntPtr socketHandle, 
					global::System_Net_Sockets.WSABuffer__System_Net_Sockets* buffer, 
					int bufferCount, 
					out int bytesTransferred, 
					ref global::System_Net_Sockets.SocketFlags__System_Net_Sockets socketFlags, 
					global::System_Threading.NativeOverlapped__System_Private_CoreLib* overlapped, 
					global::System.IntPtr completionRoutine)
		{
			// Setup
			global::System_Net_Sockets.SocketError__System_Net_Primitives unsafe___value;
			// Marshalling
			fixed (int* pinned_bytesTransferred = &(bytesTransferred))
				fixed (global::System_Net_Sockets.SocketFlags__System_Net_Sockets* pinned_socketFlags = &(socketFlags))
				{
					global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
					// Call to native method
					unsafe___value = global::__Interop.ws2_32_dll_PInvokes.WSARecv(
										socketHandle, 
										((global::System_Net_Sockets.WSABuffer__System_Net_Sockets*)buffer), 
										bufferCount, 
										pinned_bytesTransferred, 
										pinned_socketFlags, 
										((global::System_Threading.NativeOverlapped__System_Private_CoreLib*)overlapped), 
										completionRoutine
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
					global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
				}
			// Return
			return unsafe___value;
		}

		// Signature, WSASend, [fwd] [return] [EETypeRva:0x00042D60] System_Net_Sockets_SocketError__System_Net_Primitives__SocketError__System_Net_Primitives, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_Net_Sockets_WSABuffer__System_Net_Sockets___ptrSystem_Net_Sockets__WSABuffer__System_Net_Sockets *, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x00042D60] System_Net_Sockets_SocketFlags__System_Net_Sockets__SocketFlags__System_Net_Sockets, [fwd] [in] [EETypeRva:0x000419B0] System_Threading_NativeOverlapped__System_Private_CoreLib___ptrSystem_Threading__NativeOverlapped__System_Private_CoreLib *, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.Sockets, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Winsock", "WSASend")]
		public static global::System_Net_Sockets.SocketError__System_Net_Primitives WSASend(
					global::System.IntPtr socketHandle, 
					global::System_Net_Sockets.WSABuffer__System_Net_Sockets* buffers, 
					int bufferCount, 
					out int bytesTransferred, 
					global::System_Net_Sockets.SocketFlags__System_Net_Sockets socketFlags, 
					global::System_Threading.NativeOverlapped__System_Private_CoreLib* overlapped, 
					global::System.IntPtr completionRoutine)
		{
			// Setup
			global::System_Net_Sockets.SocketError__System_Net_Primitives unsafe___value;
			// Marshalling
			fixed (int* pinned_bytesTransferred = &(bytesTransferred))
			{
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = global::__Interop.ws2_32_dll_PInvokes.WSASend(
									socketHandle, 
									((global::System_Net_Sockets.WSABuffer__System_Net_Sockets*)buffers), 
									bufferCount, 
									pinned_bytesTransferred, 
									socketFlags, 
									((global::System_Threading.NativeOverlapped__System_Private_CoreLib*)overlapped), 
									completionRoutine
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			}
			// Return
			return unsafe___value;
		}

		// Signature, GetNameInfoW, [fwd] [return] [EETypeRva:0x00042D60] System_Net_Sockets_SocketError__System_Net_Primitives__SocketError__System_Net_Primitives, [fwd] [in] [EETypeRva:0x00042A40] rg_byte__unsigned char *, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [out] [EETypeRva:0x00041CF4] System_Text_StringBuilder__wchar_t *, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [out] [EETypeRva:0x00041CF4] System_Text_StringBuilder__wchar_t *, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.NameResolution, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+Winsock", "GetNameInfoW")]
		public static global::System_Net_Sockets.SocketError__System_Net_Primitives GetNameInfoW(
					byte[] sa, 
					int salen, 
					global::System.Text.StringBuilder host, 
					int hostlen, 
					global::System.Text.StringBuilder serv, 
					int servlen, 
					int flags)
		{
			// Setup
			byte* unsafe_sa;
			ushort* unsafe_host = default(ushort*);
			ushort* unsafe_serv = default(ushort*);
			global::System_Net_Sockets.SocketError__System_Net_Primitives unsafe___value;
			try
			{
				// Marshalling
				fixed (byte* pinned_sa = ((sa != null 
							&& sa.Length == 0) ? new byte[1] : sa))
				{
					unsafe_sa = (byte*)pinned_sa;
					if (host == null)
						unsafe_host = null;
					else
					{
						unsafe_host = (ushort*)global::System.Runtime.InteropServices.McgMarshal.CoTaskMemAllocAndZeroMemory(new global::System.IntPtr(checked(host.Capacity * 2 
											+ 2)));
						if (unsafe_host == null)
							throw new global::System.OutOfMemoryException();
					}
					if (serv == null)
						unsafe_serv = null;
					else
					{
						unsafe_serv = (ushort*)global::System.Runtime.InteropServices.McgMarshal.CoTaskMemAllocAndZeroMemory(new global::System.IntPtr(checked(serv.Capacity * 2 
											+ 2)));
						if (unsafe_serv == null)
							throw new global::System.OutOfMemoryException();
					}
					global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
					// Call to native method
					unsafe___value = global::__Interop.ws2_32_dll_PInvokes.GetNameInfoW(
										unsafe_sa, 
										salen, 
										unsafe_host, 
										hostlen, 
										unsafe_serv, 
										servlen, 
										flags
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
					global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
					if (serv != null)
						global::System.Runtime.InteropServices.McgMarshal.UnicodeStringToStringBuilder(
											unsafe_serv, 
											serv
										);
					if (host != null)
						global::System.Runtime.InteropServices.McgMarshal.UnicodeStringToStringBuilder(
											unsafe_host, 
											host
										);
				}
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				if (unsafe_host != null)
					global::System.Runtime.InteropServices.McgMarshal.SafeCoTaskMemFree(unsafe_host);
				if (unsafe_serv != null)
					global::System.Runtime.InteropServices.McgMarshal.SafeCoTaskMemFree(unsafe_serv);
			}
		}
	}

	/// <summary>
	/// P/Invoke class for module 'OleAut32'
	/// </summary>
	public unsafe static partial class OleAut32
	{
		// Signature, SysFreeString, [fwd] [return] [EETypeRva:0x00041F6C] void__void, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.StackTraceGenerator, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Internal.LightweightInterop.MarshalExtensions", "SysFreeString")]
		public static void SysFreeString(global::System.IntPtr bstr)
		{
			// Marshalling
			// Call to native method
			global::__Interop.OleAut32_PInvokes.SysFreeString(bstr);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
		}
	}

	/// <summary>
	/// P/Invoke class for module 'ncrypt.dll'
	/// </summary>
	public unsafe static partial class ncrypt_dll
	{
		// Signature, NCryptOpenKey, [fwd] [return] [EETypeRva:0x00042D60] __Interop_NCrypt_ErrorCode__System_Security_Cryptography_Cng__Interop_NCrypt_ErrorCode__System_Security_Cryptography_Cng, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_Win32_SafeHandles_SafeNCryptProviderHandle__System_Security_Cryptography_Cng____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000434A4] Microsoft_Win32_SafeHandles_SafeNCryptKeyHandle__System_Security_Cryptography_Cng____w64 int, [fwd] [in] [EETypeRva:0x00041B44] string__wchar_t *, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x00042D60] System_Security_Cryptography_CngKeyOpenOptions__System_Security_Cryptography_Cng__CngKeyOpenOptions__System_Security_Cryptography_Cng, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.Cng, Version=4.3.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+NCrypt", "NCryptOpenKey")]
		public static global::_.Interop_NCrypt_ErrorCode__System_Security_Cryptography_Cng NCryptOpenKey(
					global::Microsoft.Win32.SafeHandles.SafeNCryptProviderHandle__System_Security_Cryptography_Cng hProvider, 
					out global::Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle__System_Security_Cryptography_Cng phKey, 
					string pszKeyName, 
					int dwLegacyKeySpec, 
					global::System_Security_Cryptography.CngKeyOpenOptions__System_Security_Cryptography_Cng dwFlags)
		{
			// Setup
			bool addRefed = false;
			global::System.IntPtr unsafe_phKey;
			ushort* unsafe_pszKeyName = default(ushort*);
			global::_.Interop_NCrypt_ErrorCode__System_Security_Cryptography_Cng unsafe___value;
			// Marshalling
			hProvider.DangerousAddRef(ref addRefed);
			phKey = new global::Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle__System_Security_Cryptography_Cng();
			unsafe_phKey = phKey.DangerousGetHandle();
			fixed (char* pinned_pszKeyName = pszKeyName)
			{
				unsafe_pszKeyName = (ushort*)pinned_pszKeyName;
				// Call to native method
				unsafe___value = global::__Interop.ncrypt_dll_PInvokes.NCryptOpenKey(
									hProvider.DangerousGetHandle(), 
									&(unsafe_phKey), 
									unsafe_pszKeyName, 
									dwLegacyKeySpec, 
									dwFlags
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			global::System.Runtime.InteropServices.McgMarshal.InitializeHandle(
								phKey, 
								unsafe_phKey
							);
			if (addRefed)
				hProvider.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, NCryptDeleteKey, [fwd] [return] [EETypeRva:0x00042D60] __Interop_NCrypt_ErrorCode__System_Security_Cryptography_Cng__Interop_NCrypt_ErrorCode__System_Security_Cryptography_Cng, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_Win32_SafeHandles_SafeNCryptKeyHandle__System_Security_Cryptography_Cng____w64 int, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.Cng, Version=4.3.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+NCrypt", "NCryptDeleteKey")]
		public static global::_.Interop_NCrypt_ErrorCode__System_Security_Cryptography_Cng NCryptDeleteKey(
					global::Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle__System_Security_Cryptography_Cng hKey, 
					int dwFlags)
		{
			// Setup
			bool addRefed = false;
			global::_.Interop_NCrypt_ErrorCode__System_Security_Cryptography_Cng unsafe___value;
			// Marshalling
			hKey.DangerousAddRef(ref addRefed);
			// Call to native method
			unsafe___value = global::__Interop.ncrypt_dll_PInvokes.NCryptDeleteKey(
								hKey.DangerousGetHandle(), 
								dwFlags
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			if (addRefed)
				hKey.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, NCryptOpenStorageProvider, [fwd] [return] [EETypeRva:0x00042D60] __Interop_NCrypt_ErrorCode__System_Security_Cryptography_Cng__Interop_NCrypt_ErrorCode__System_Security_Cryptography_Cng, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000434A4] Microsoft_Win32_SafeHandles_SafeNCryptProviderHandle__System_Security_Cryptography_Cng____w64 int, [fwd] [in] [EETypeRva:0x00041B44] string__wchar_t *, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.Cng, Version=4.3.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+NCrypt", "NCryptOpenStorageProvider")]
		public static global::_.Interop_NCrypt_ErrorCode__System_Security_Cryptography_Cng NCryptOpenStorageProvider(
					out global::Microsoft.Win32.SafeHandles.SafeNCryptProviderHandle__System_Security_Cryptography_Cng phProvider, 
					string pszProviderName, 
					int dwFlags)
		{
			// Setup
			global::System.IntPtr unsafe_phProvider;
			ushort* unsafe_pszProviderName = default(ushort*);
			global::_.Interop_NCrypt_ErrorCode__System_Security_Cryptography_Cng unsafe___value;
			// Marshalling
			phProvider = new global::Microsoft.Win32.SafeHandles.SafeNCryptProviderHandle__System_Security_Cryptography_Cng();
			unsafe_phProvider = phProvider.DangerousGetHandle();
			fixed (char* pinned_pszProviderName = pszProviderName)
			{
				unsafe_pszProviderName = (ushort*)pinned_pszProviderName;
				// Call to native method
				unsafe___value = global::__Interop.ncrypt_dll_PInvokes.NCryptOpenStorageProvider(
									&(unsafe_phProvider), 
									unsafe_pszProviderName, 
									dwFlags
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			global::System.Runtime.InteropServices.McgMarshal.InitializeHandle(
								phProvider, 
								unsafe_phProvider
							);
			// Return
			return unsafe___value;
		}

		// Signature, NCryptFreeObject, [fwd] [return] [EETypeRva:0x00042D60] __Interop_NCrypt_ErrorCode__System_Security_Cryptography_Cng__Interop_NCrypt_ErrorCode__System_Security_Cryptography_Cng, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.Cng, Version=4.3.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+NCrypt", "NCryptFreeObject")]
		public static global::_.Interop_NCrypt_ErrorCode__System_Security_Cryptography_Cng NCryptFreeObject(global::System.IntPtr hObject)
		{
			// Setup
			global::_.Interop_NCrypt_ErrorCode__System_Security_Cryptography_Cng unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.ncrypt_dll_PInvokes.NCryptFreeObject(hObject);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, NCryptImportKey, [fwd] [return] [EETypeRva:0x00042D60] __Interop_NCrypt_ErrorCode__System_Security_Cryptography_Cng__Interop_NCrypt_ErrorCode__System_Security_Cryptography_Cng, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_Win32_SafeHandles_SafeNCryptProviderHandle__System_Security_Cryptography_Cng____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00041B44] string__wchar_t *, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000434A4] Microsoft_Win32_SafeHandles_SafeNCryptKeyHandle__System_Security_Cryptography_Cng____w64 int, [fwd] [in] [EETypeRva:0x00042A40] rg_byte__unsigned char *, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.Cng, Version=4.3.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+NCrypt", "NCryptImportKey")]
		public static global::_.Interop_NCrypt_ErrorCode__System_Security_Cryptography_Cng NCryptImportKey(
					global::Microsoft.Win32.SafeHandles.SafeNCryptProviderHandle__System_Security_Cryptography_Cng hProvider, 
					global::System.IntPtr hImportKey, 
					string pszBlobType, 
					global::System.IntPtr pParameterList, 
					out global::Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle__System_Security_Cryptography_Cng phKey, 
					byte[] pbData, 
					int cbData, 
					int dwFlags)
		{
			// Setup
			bool addRefed = false;
			ushort* unsafe_pszBlobType = default(ushort*);
			global::System.IntPtr unsafe_phKey;
			byte* unsafe_pbData;
			global::_.Interop_NCrypt_ErrorCode__System_Security_Cryptography_Cng unsafe___value;
			// Marshalling
			hProvider.DangerousAddRef(ref addRefed);
			fixed (char* pinned_pszBlobType = pszBlobType)
			{
				unsafe_pszBlobType = (ushort*)pinned_pszBlobType;
				phKey = new global::Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle__System_Security_Cryptography_Cng();
				unsafe_phKey = phKey.DangerousGetHandle();
				fixed (byte* pinned_pbData = ((pbData != null 
							&& pbData.Length == 0) ? new byte[1] : pbData))
				{
					unsafe_pbData = (byte*)pinned_pbData;
					// Call to native method
					unsafe___value = global::__Interop.ncrypt_dll_PInvokes.NCryptImportKey(
										hProvider.DangerousGetHandle(), 
										hImportKey, 
										unsafe_pszBlobType, 
										pParameterList, 
										&(unsafe_phKey), 
										unsafe_pbData, 
										cbData, 
										dwFlags
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				}
				global::System.Runtime.InteropServices.McgMarshal.InitializeHandle(
									phKey, 
									unsafe_phKey
								);
			}
			if (addRefed)
				hProvider.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, NCryptGetProperty, [fwd] [return] [EETypeRva:0x00042D60] __Interop_NCrypt_ErrorCode__System_Security_Cryptography_Cng__Interop_NCrypt_ErrorCode__System_Security_Cryptography_Cng, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_Win32_SafeHandles_SafeNCryptHandle__System_Security_Cryptography_Cng____w64 int, [fwd] [in] [EETypeRva:0x00041B44] string__wchar_t *, [fwd] [out] [EETypeRva:0x000419B0] void___ptrvoid *, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x00042D60] System_Security_Cryptography_CngPropertyOptions__System_Security_Cryptography_Cng__CngPropertyOptions__System_Security_Cryptography_Cng, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.Cng, Version=4.3.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+NCrypt", "NCryptGetProperty")]
		public static global::_.Interop_NCrypt_ErrorCode__System_Security_Cryptography_Cng NCryptGetProperty(
					global::Microsoft.Win32.SafeHandles.SafeNCryptHandle__System_Security_Cryptography_Cng hObject, 
					string pszProperty, 
					void* pbOutput, 
					int cbOutput, 
					out int pcbResult, 
					global::System_Security_Cryptography.CngPropertyOptions__System_Security_Cryptography_Cng dwFlags)
		{
			// Setup
			bool addRefed = false;
			ushort* unsafe_pszProperty = default(ushort*);
			global::_.Interop_NCrypt_ErrorCode__System_Security_Cryptography_Cng unsafe___value;
			// Marshalling
			hObject.DangerousAddRef(ref addRefed);
			fixed (char* pinned_pszProperty = pszProperty)
			{
				unsafe_pszProperty = (ushort*)pinned_pszProperty;
				fixed (int* pinned_pcbResult = &(pcbResult))
				{
					// Call to native method
					unsafe___value = global::__Interop.ncrypt_dll_PInvokes.NCryptGetProperty(
										hObject.DangerousGetHandle(), 
										unsafe_pszProperty, 
										((void*)pbOutput), 
										cbOutput, 
										pinned_pcbResult, 
										dwFlags
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				}
			}
			if (addRefed)
				hObject.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, NCryptSetProperty, [fwd] [return] [EETypeRva:0x00042D60] __Interop_NCrypt_ErrorCode__System_Security_Cryptography_Cng__Interop_NCrypt_ErrorCode__System_Security_Cryptography_Cng, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_Win32_SafeHandles_SafeNCryptHandle__System_Security_Cryptography_Cng____w64 int, [fwd] [in] [EETypeRva:0x00041B44] string__wchar_t *, [fwd] [in] [EETypeRva:0x000419B0] void___ptrvoid *, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x00042D60] System_Security_Cryptography_CngPropertyOptions__System_Security_Cryptography_Cng__CngPropertyOptions__System_Security_Cryptography_Cng, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.Cng, Version=4.3.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+NCrypt", "NCryptSetProperty")]
		public static global::_.Interop_NCrypt_ErrorCode__System_Security_Cryptography_Cng NCryptSetProperty(
					global::Microsoft.Win32.SafeHandles.SafeNCryptHandle__System_Security_Cryptography_Cng hObject, 
					string pszProperty, 
					void* pbInput, 
					int cbInput, 
					global::System_Security_Cryptography.CngPropertyOptions__System_Security_Cryptography_Cng dwFlags)
		{
			// Setup
			bool addRefed = false;
			ushort* unsafe_pszProperty = default(ushort*);
			global::_.Interop_NCrypt_ErrorCode__System_Security_Cryptography_Cng unsafe___value;
			// Marshalling
			hObject.DangerousAddRef(ref addRefed);
			fixed (char* pinned_pszProperty = pszProperty)
			{
				unsafe_pszProperty = (ushort*)pinned_pszProperty;
				// Call to native method
				unsafe___value = global::__Interop.ncrypt_dll_PInvokes.NCryptSetProperty(
									hObject.DangerousGetHandle(), 
									unsafe_pszProperty, 
									((void*)pbInput), 
									cbInput, 
									dwFlags
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			if (addRefed)
				hObject.DangerousRelease();
			// Return
			return unsafe___value;
		}
	}

	/// <summary>
	/// P/Invoke class for module 'api-ms-win-core-winrt-robuffer-l1-1-0.dll'
	/// </summary>
	public unsafe static partial class api_ms_win_core_winrt_robuffer_l1_1_0_dll
	{
		// Signature, RoGetBufferMarshaler, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x00043660] System_Runtime_InteropServices_IMarshal__System_Runtime_WindowsRuntime__System_Runtime_InteropServices__IMarshal__System_Runtime_WindowsRuntime *, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Runtime.WindowsRuntime, Version=4.0.14.0, Culture=neutral, PublicKeyToken=b77a5c561934e089", "Interop+mincore", "RoGetBufferMarshaler")]
		public static int RoGetBufferMarshaler(out global::System_Runtime_InteropServices.IMarshal__System_Runtime_WindowsRuntime bufferMarshalerPtr)
		{
			// Setup
			void* unsafe_bufferMarshalerPtr = default(void*);
			int unsafe___value;
			try
			{
				// Marshalling
				unsafe_bufferMarshalerPtr = null;
				// Call to native method
				unsafe___value = global::__Interop.api_ms_win_core_winrt_robuffer_l1_1_0_dll_PInvokes.RoGetBufferMarshaler(&(unsafe_bufferMarshalerPtr));
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				bufferMarshalerPtr = (global::System_Runtime_InteropServices.IMarshal__System_Runtime_WindowsRuntime)global::System.Runtime.InteropServices.McgMarshal.ComInterfaceToObject(
									((global::System.IntPtr)unsafe_bufferMarshalerPtr), 
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("System.Runtime.InteropServices.IMarshal,System.Runtime.WindowsRuntime, Version=4.0.14.0, Culture=neutral, Public" +
											"KeyToken=b77a5c561934e089")
								);
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.McgMarshal.ComSafeRelease(new global::System.IntPtr(((void*)unsafe_bufferMarshalerPtr)));
			}
		}
	}

	/// <summary>
	/// P/Invoke class for module 'BCrypt.dll'
	/// </summary>
	public unsafe static partial class BCrypt_dll
	{
		// Signature, BCryptGenRandom, [fwd] [return] [EETypeRva:0x00042D60] __Interop_BCrypt_NTSTATUS__System_Security_Cryptography_Algorithms__Interop_BCrypt_NTSTATUS__System_Security_Cryptography_Algorithms, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] byte__unsigned char, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.Algorithms, Version=4.3.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+BCrypt", "BCryptGenRandom")]
		public static global::_.Interop_BCrypt_NTSTATUS__System_Security_Cryptography_Algorithms BCryptGenRandom(
					global::System.IntPtr hAlgorithm, 
					ref byte pbBuffer, 
					int cbBuffer, 
					int dwFlags)
		{
			// Setup
			global::_.Interop_BCrypt_NTSTATUS__System_Security_Cryptography_Algorithms unsafe___value;
			// Marshalling
			fixed (byte* pinned_pbBuffer = &(pbBuffer))
			{
				// Call to native method
				unsafe___value = global::__Interop.BCrypt_dll_PInvokes.BCryptGenRandom(
									hAlgorithm, 
									pinned_pbBuffer, 
									cbBuffer, 
									dwFlags
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, BCryptExportKey, [fwd] [return] [EETypeRva:0x00042D60] __Interop_BCrypt_NTSTATUS__System_Security_Cryptography_X509Certificates__Interop_BCrypt_NTSTATUS__System_Security_Cryptography_X509Certificates, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_Win32_SafeHandles_SafeBCryptKeyHandle__System_Security_Cryptography_X509Certificates____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x00041B44] string__wchar_t *, [fwd] [out] [EETypeRva:0x00042A40] rg_byte__unsigned char *, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.X509Certificates, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
			"", "Interop+BCrypt", "BCryptExportKey")]
		public static global::_.Interop_BCrypt_NTSTATUS__System_Security_Cryptography_X509Certificates BCryptExportKey(
					global::Microsoft.Win32.SafeHandles.SafeBCryptKeyHandle__System_Security_Cryptography_X509Certificates hKey, 
					global::System.IntPtr hExportKey, 
					string pszBlobType, 
					byte[] pbOutput, 
					int cbOutput, 
					out int pcbResult, 
					int dwFlags)
		{
			// Setup
			bool addRefed = false;
			ushort* unsafe_pszBlobType = default(ushort*);
			byte* unsafe_pbOutput;
			global::_.Interop_BCrypt_NTSTATUS__System_Security_Cryptography_X509Certificates unsafe___value;
			// Marshalling
			hKey.DangerousAddRef(ref addRefed);
			fixed (char* pinned_pszBlobType = pszBlobType)
			{
				unsafe_pszBlobType = (ushort*)pinned_pszBlobType;
				fixed (byte* pinned_pbOutput = ((pbOutput != null 
							&& pbOutput.Length == 0) ? new byte[1] : pbOutput))
				{
					unsafe_pbOutput = (byte*)pinned_pbOutput;
					fixed (int* pinned_pcbResult = &(pcbResult))
					{
						// Call to native method
						unsafe___value = global::__Interop.BCrypt_dll_PInvokes.BCryptExportKey(
											hKey.DangerousGetHandle(), 
											hExportKey, 
											unsafe_pszBlobType, 
											unsafe_pbOutput, 
											cbOutput, 
											pinned_pcbResult, 
											dwFlags
										);
						global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
					}
				}
			}
			if (addRefed)
				hKey.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, BCryptGetProperty, [fwd] [return] [EETypeRva:0x00042D60] __Interop_BCrypt_NTSTATUS__System_Security_Cryptography_X509Certificates__Interop_BCrypt_NTSTATUS__System_Security_Cryptography_X509Certificates, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_Win32_SafeHandles_SafeBCryptHandle__System_Security_Cryptography_X509Certificates____w64 int, [fwd] [in] [EETypeRva:0x00041B44] string__wchar_t *, [fwd] [in] [EETypeRva:0x000419B0] void___ptrvoid *, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.X509Certificates, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
			"", "Interop+BCrypt", "BCryptGetProperty")]
		public static global::_.Interop_BCrypt_NTSTATUS__System_Security_Cryptography_X509Certificates BCryptGetProperty(
					global::Microsoft.Win32.SafeHandles.SafeBCryptHandle__System_Security_Cryptography_X509Certificates hObject, 
					string pszProperty, 
					void* pbOutput, 
					int cbOutput, 
					out int pcbResult, 
					int dwFlags)
		{
			// Setup
			bool addRefed = false;
			ushort* unsafe_pszProperty = default(ushort*);
			global::_.Interop_BCrypt_NTSTATUS__System_Security_Cryptography_X509Certificates unsafe___value;
			// Marshalling
			hObject.DangerousAddRef(ref addRefed);
			fixed (char* pinned_pszProperty = pszProperty)
			{
				unsafe_pszProperty = (ushort*)pinned_pszProperty;
				fixed (int* pinned_pcbResult = &(pcbResult))
				{
					// Call to native method
					unsafe___value = global::__Interop.BCrypt_dll_PInvokes.BCryptGetProperty(
										hObject.DangerousGetHandle(), 
										unsafe_pszProperty, 
										((void*)pbOutput), 
										cbOutput, 
										pinned_pcbResult, 
										dwFlags
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				}
			}
			if (addRefed)
				hObject.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, BCryptDestroyKey, [fwd] [return] [EETypeRva:0x00042D60] __Interop_BCrypt_NTSTATUS__System_Security_Cryptography_X509Certificates__Interop_BCrypt_NTSTATUS__System_Security_Cryptography_X509Certificates, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.X509Certificates, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
			"", "Interop+BCrypt", "BCryptDestroyKey")]
		public static global::_.Interop_BCrypt_NTSTATUS__System_Security_Cryptography_X509Certificates BCryptDestroyKey(global::System.IntPtr hKey)
		{
			// Setup
			global::_.Interop_BCrypt_NTSTATUS__System_Security_Cryptography_X509Certificates unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.BCrypt_dll_PInvokes.BCryptDestroyKey(hKey);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, BCryptCreateHash, [fwd] [return] [EETypeRva:0x00042D60] __Interop_BCrypt_NTSTATUS__System_Security_Cryptography_Algorithms__Interop_BCrypt_NTSTATUS__System_Security_Cryptography_Algorithms, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_Win32_SafeHandles_SafeBCryptAlgorithmHandle__System_Security_Cryptography_Algorithms____w64 int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000434A4] Microsoft_Win32_SafeHandles_SafeBCryptHashHandle__System_Security_Cryptography_Algorithms____w64 int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [out] [EETypeRva:0x00042A40] rg_byte__unsigned char *, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x00042D60] __Interop_BCrypt_BCryptCreateHashFlags__System_Security_Cryptography_Algorithms__Interop_BCrypt_BCryptCreateHashFlags__System_Security_Cryptography_Algorithms, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.Algorithms, Version=4.3.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+BCrypt", "BCryptCreateHash")]
		public static global::_.Interop_BCrypt_NTSTATUS__System_Security_Cryptography_Algorithms BCryptCreateHash(
					global::Microsoft.Win32.SafeHandles.SafeBCryptAlgorithmHandle__System_Security_Cryptography_Algorithms hAlgorithm, 
					out global::Microsoft.Win32.SafeHandles.SafeBCryptHashHandle__System_Security_Cryptography_Algorithms phHash, 
					global::System.IntPtr pbHashObject, 
					int cbHashObject, 
					byte[] pbSecret, 
					int cbSecret, 
					global::_.Interop_BCrypt_BCryptCreateHashFlags__System_Security_Cryptography_Algorithms dwFlags)
		{
			// Setup
			bool addRefed = false;
			global::System.IntPtr unsafe_phHash;
			byte* unsafe_pbSecret;
			global::_.Interop_BCrypt_NTSTATUS__System_Security_Cryptography_Algorithms unsafe___value;
			// Marshalling
			hAlgorithm.DangerousAddRef(ref addRefed);
			phHash = new global::Microsoft.Win32.SafeHandles.SafeBCryptHashHandle__System_Security_Cryptography_Algorithms();
			unsafe_phHash = phHash.DangerousGetHandle();
			fixed (byte* pinned_pbSecret = ((pbSecret != null 
						&& pbSecret.Length == 0) ? new byte[1] : pbSecret))
			{
				unsafe_pbSecret = (byte*)pinned_pbSecret;
				// Call to native method
				unsafe___value = global::__Interop.BCrypt_dll_PInvokes.BCryptCreateHash(
									hAlgorithm.DangerousGetHandle(), 
									&(unsafe_phHash), 
									pbHashObject, 
									cbHashObject, 
									unsafe_pbSecret, 
									cbSecret, 
									dwFlags
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			global::System.Runtime.InteropServices.McgMarshal.InitializeHandle(
								phHash, 
								unsafe_phHash
							);
			if (addRefed)
				hAlgorithm.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, BCryptGetProperty__0, [fwd] [return] [EETypeRva:0x00042D60] __Interop_BCrypt_NTSTATUS__System_Security_Cryptography_Algorithms__Interop_BCrypt_NTSTATUS__System_Security_Cryptography_Algorithms, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_Win32_SafeHandles_SafeBCryptHandle__System_Security_Cryptography_Algorithms____w64 int, [fwd] [in] [EETypeRva:0x00041B44] string__wchar_t *, [fwd] [in] [EETypeRva:0x000419B0] void___ptrvoid *, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.Algorithms, Version=4.3.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+BCrypt", "BCryptGetProperty")]
		public static global::_.Interop_BCrypt_NTSTATUS__System_Security_Cryptography_Algorithms BCryptGetProperty__0(
					global::Microsoft.Win32.SafeHandles.SafeBCryptHandle__System_Security_Cryptography_Algorithms hObject, 
					string pszProperty, 
					void* pbOutput, 
					int cbOutput, 
					out int pcbResult, 
					int dwFlags)
		{
			// Setup
			bool addRefed = false;
			ushort* unsafe_pszProperty = default(ushort*);
			global::_.Interop_BCrypt_NTSTATUS__System_Security_Cryptography_Algorithms unsafe___value;
			// Marshalling
			hObject.DangerousAddRef(ref addRefed);
			fixed (char* pinned_pszProperty = pszProperty)
			{
				unsafe_pszProperty = (ushort*)pinned_pszProperty;
				fixed (int* pinned_pcbResult = &(pcbResult))
				{
					// Call to native method
					unsafe___value = global::__Interop.BCrypt_dll_PInvokes.BCryptGetProperty__0(
										hObject.DangerousGetHandle(), 
										unsafe_pszProperty, 
										((void*)pbOutput), 
										cbOutput, 
										pinned_pcbResult, 
										dwFlags
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				}
			}
			if (addRefed)
				hObject.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, BCryptOpenAlgorithmProvider, [fwd] [return] [EETypeRva:0x00042D60] __Interop_BCrypt_NTSTATUS__System_Security_Cryptography_Algorithms__Interop_BCrypt_NTSTATUS__System_Security_Cryptography_Algorithms, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000434A4] Microsoft_Win32_SafeHandles_SafeBCryptAlgorithmHandle__System_Security_Cryptography_Algorithms____w64 int, [fwd] [in] [EETypeRva:0x00041B44] string__wchar_t *, [fwd] [in] [EETypeRva:0x00041B44] string__wchar_t *, [fwd] [in] [EETypeRva:0x00042D60] __Interop_BCrypt_BCryptOpenAlgorithmProviderFlags__System_Security_Cryptography_Algorithms__Interop_BCrypt_BCryptOpenAlgorithmProviderFlags__System_Security_Cryptography_Algorithms, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.Algorithms, Version=4.3.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+BCrypt", "BCryptOpenAlgorithmProvider")]
		public static global::_.Interop_BCrypt_NTSTATUS__System_Security_Cryptography_Algorithms BCryptOpenAlgorithmProvider(
					out global::Microsoft.Win32.SafeHandles.SafeBCryptAlgorithmHandle__System_Security_Cryptography_Algorithms phAlgorithm, 
					string pszAlgId, 
					string pszImplementation, 
					global::_.Interop_BCrypt_BCryptOpenAlgorithmProviderFlags__System_Security_Cryptography_Algorithms dwFlags)
		{
			// Setup
			global::System.IntPtr unsafe_phAlgorithm;
			ushort* unsafe_pszAlgId = default(ushort*);
			ushort* unsafe_pszImplementation = default(ushort*);
			global::_.Interop_BCrypt_NTSTATUS__System_Security_Cryptography_Algorithms unsafe___value;
			// Marshalling
			phAlgorithm = new global::Microsoft.Win32.SafeHandles.SafeBCryptAlgorithmHandle__System_Security_Cryptography_Algorithms();
			unsafe_phAlgorithm = phAlgorithm.DangerousGetHandle();
			fixed (char* pinned_pszAlgId = pszAlgId)
			{
				unsafe_pszAlgId = (ushort*)pinned_pszAlgId;
				fixed (char* pinned_pszImplementation = pszImplementation)
				{
					unsafe_pszImplementation = (ushort*)pinned_pszImplementation;
					// Call to native method
					unsafe___value = global::__Interop.BCrypt_dll_PInvokes.BCryptOpenAlgorithmProvider(
										&(unsafe_phAlgorithm), 
										unsafe_pszAlgId, 
										unsafe_pszImplementation, 
										dwFlags
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				}
			}
			global::System.Runtime.InteropServices.McgMarshal.InitializeHandle(
								phAlgorithm, 
								unsafe_phAlgorithm
							);
			// Return
			return unsafe___value;
		}

		// Signature, BCryptCloseAlgorithmProvider, [fwd] [return] [EETypeRva:0x00042D60] __Interop_BCrypt_NTSTATUS__System_Security_Cryptography_Algorithms__Interop_BCrypt_NTSTATUS__System_Security_Cryptography_Algorithms, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, [fwd] [in] [EETypeRva:0x000419B0] int__int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.Algorithms, Version=4.3.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+BCrypt", "BCryptCloseAlgorithmProvider")]
		public static global::_.Interop_BCrypt_NTSTATUS__System_Security_Cryptography_Algorithms BCryptCloseAlgorithmProvider(
					global::System.IntPtr hAlgorithm, 
					int dwFlags)
		{
			// Setup
			global::_.Interop_BCrypt_NTSTATUS__System_Security_Cryptography_Algorithms unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.BCrypt_dll_PInvokes.BCryptCloseAlgorithmProvider(
								hAlgorithm, 
								dwFlags
							);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}

		// Signature, BCryptDestroyHash, [fwd] [return] [EETypeRva:0x00042D60] __Interop_BCrypt_NTSTATUS__System_Security_Cryptography_Algorithms__Interop_BCrypt_NTSTATUS__System_Security_Cryptography_Algorithms, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Cryptography.Algorithms, Version=4.3.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+BCrypt", "BCryptDestroyHash")]
		public static global::_.Interop_BCrypt_NTSTATUS__System_Security_Cryptography_Algorithms BCryptDestroyHash(global::System.IntPtr hHash)
		{
			// Setup
			global::_.Interop_BCrypt_NTSTATUS__System_Security_Cryptography_Algorithms unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.BCrypt_dll_PInvokes.BCryptDestroyHash(hHash);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			// Return
			return unsafe___value;
		}
	}

	/// <summary>
	/// P/Invoke class for module 'sspicli.dll'
	/// </summary>
	public unsafe static partial class sspicli_dll
	{
		// Signature, LsaGetLogonSessionData, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x0004314C] __Interop_LUID__System_Security_Principal_Windows____Interop_LUID__System_Security_Principal_Windows, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x000434A4] Microsoft_Win32_SafeHandles_SafeLsaReturnBufferHandle__System_Security_Principal_Windows____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Principal.Windows, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+SspiCli", "LsaGetLogonSessionData")]
		public static int LsaGetLogonSessionData(
					ref global::_.Interop_LUID__System_Security_Principal_Windows LogonId, 
					ref global::Microsoft.Win32.SafeHandles.SafeLsaReturnBufferHandle__System_Security_Principal_Windows ppLogonSessionData)
		{
			// Setup
			bool addRefed = false;
			global::System.IntPtr unsafe_ppLogonSessionData;
			global::Microsoft.Win32.SafeHandles.SafeLsaReturnBufferHandle__System_Security_Principal_Windows out_ppLogonSessionData;
			global::System.IntPtr prev_unsafe_ppLogonSessionData;
			int unsafe___value;
			// Marshalling
			fixed (global::_.Interop_LUID__System_Security_Principal_Windows* pinned_LogonId = &(LogonId))
			{
				ppLogonSessionData.DangerousAddRef(ref addRefed);
				unsafe_ppLogonSessionData = ppLogonSessionData.DangerousGetHandle();
				prev_unsafe_ppLogonSessionData = unsafe_ppLogonSessionData;
				out_ppLogonSessionData = new global::Microsoft.Win32.SafeHandles.SafeLsaReturnBufferHandle__System_Security_Principal_Windows();
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = global::__Interop.sspicli_dll_PInvokes.LsaGetLogonSessionData(
									pinned_LogonId, 
									&(unsafe_ppLogonSessionData)
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
				if (addRefed)
					ppLogonSessionData.DangerousRelease();
				if (prev_unsafe_ppLogonSessionData != unsafe_ppLogonSessionData)
				{
					global::System.Runtime.InteropServices.McgMarshal.InitializeHandle(
										out_ppLogonSessionData, 
										unsafe_ppLogonSessionData
									);
					ppLogonSessionData = out_ppLogonSessionData;
				}
			}
			// Return
			return unsafe___value;
		}

		// Signature, LsaFreeReturnBuffer, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Security.Principal.Windows, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+SspiCli", "LsaFreeReturnBuffer")]
		public static int LsaFreeReturnBuffer(global::System.IntPtr handle)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.sspicli_dll_PInvokes.LsaFreeReturnBuffer(handle);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
			return unsafe___value;
		}

		// Signature, EncryptMessage, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x0004314C] __Interop_SspiCli_CredHandle__System_Net_Security____Interop_SspiCli_CredHandle__System_Net_Security, [fwd] [in] [EETypeRva:0x000419B0] uint__unsigned int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x0004314C] __Interop_SspiCli_SecBufferDesc__System_Net_Security____Interop_SspiCli_SecBufferDesc__System_Net_Security, [fwd] [in] [EETypeRva:0x000419B0] uint__unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.Security, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+SspiCli", "EncryptMessage")]
		public static int EncryptMessage(
					ref global::_.Interop_SspiCli_CredHandle__System_Net_Security contextHandle, 
					uint qualityOfProtection, 
					ref global::_.Interop_SspiCli_SecBufferDesc__System_Net_Security inputOutput, 
					uint sequenceNumber)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			fixed (global::_.Interop_SspiCli_CredHandle__System_Net_Security* pinned_contextHandle = &(contextHandle))
				fixed (global::_.Interop_SspiCli_SecBufferDesc__System_Net_Security* pinned_inputOutput = &(inputOutput))
				{
					global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
					// Call to native method
					unsafe___value = global::__Interop.sspicli_dll_PInvokes.EncryptMessage(
										pinned_contextHandle, 
										qualityOfProtection, 
										pinned_inputOutput, 
										sequenceNumber
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
					global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
				}
			// Return
			return unsafe___value;
		}

		// Signature, DecryptMessage, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [in] [managedbyref] [nativebyref] [EETypeRva:0x0004314C] __Interop_SspiCli_CredHandle__System_Net_Security____Interop_SspiCli_CredHandle__System_Net_Security, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x0004314C] __Interop_SspiCli_SecBufferDesc__System_Net_Security____Interop_SspiCli_SecBufferDesc__System_Net_Security, [fwd] [in] [EETypeRva:0x000419B0] uint__unsigned int, [fwd] [in] [EETypeRva:0x000419B0] uint___ptrunsigned int *, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.Security, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+SspiCli", "DecryptMessage")]
		public static int DecryptMessage(
					ref global::_.Interop_SspiCli_CredHandle__System_Net_Security contextHandle, 
					ref global::_.Interop_SspiCli_SecBufferDesc__System_Net_Security inputOutput, 
					uint sequenceNumber, 
					uint* qualityOfProtection)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			fixed (global::_.Interop_SspiCli_CredHandle__System_Net_Security* pinned_contextHandle = &(contextHandle))
				fixed (global::_.Interop_SspiCli_SecBufferDesc__System_Net_Security* pinned_inputOutput = &(inputOutput))
				{
					global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
					// Call to native method
					unsafe___value = global::__Interop.sspicli_dll_PInvokes.DecryptMessage(
										pinned_contextHandle, 
										pinned_inputOutput, 
										sequenceNumber, 
										((uint*)qualityOfProtection)
									);
					global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
					global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
				}
			// Return
			return unsafe___value;
		}

		// Signature, EnumerateSecurityPackagesW, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] int__int, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000434A4] System_Net_Security_SafeFreeContextBuffer_SECURITY__System_Net_Security____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.Security, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+SspiCli", "EnumerateSecurityPackagesW")]
		public static int EnumerateSecurityPackagesW(
					out int pkgnum, 
					out global::System.Net.Security.SafeFreeContextBuffer_SECURITY__System_Net_Security handle)
		{
			// Setup
			global::System.IntPtr unsafe_handle;
			int unsafe___value;
			// Marshalling
			fixed (int* pinned_pkgnum = &(pkgnum))
			{
				handle = new global::System.Net.Security.SafeFreeContextBuffer_SECURITY__System_Net_Security();
				unsafe_handle = handle.DangerousGetHandle();
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = global::__Interop.sspicli_dll_PInvokes.EnumerateSecurityPackagesW(
									pinned_pkgnum, 
									&(unsafe_handle)
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
				global::System.Runtime.InteropServices.McgMarshal.InitializeHandle(
									handle, 
									unsafe_handle
								);
			}
			// Return
			return unsafe___value;
		}

		// Signature, QueryContextAttributesW, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x0004314C] __Interop_SspiCli_CredHandle__System_Net_Security____Interop_SspiCli_CredHandle__System_Net_Security, [fwd] [in] [EETypeRva:0x00042D60] __Interop_SspiCli_ContextAttribute__System_Net_Security__Interop_SspiCli_ContextAttribute__System_Net_Security, [fwd] [in] [EETypeRva:0x000419B0] void___ptrvoid *, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.Security, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+SspiCli", "QueryContextAttributesW")]
		public static int QueryContextAttributesW(
					ref global::_.Interop_SspiCli_CredHandle__System_Net_Security contextHandle, 
					global::_.Interop_SspiCli_ContextAttribute__System_Net_Security attribute, 
					void* buffer)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			fixed (global::_.Interop_SspiCli_CredHandle__System_Net_Security* pinned_contextHandle = &(contextHandle))
			{
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = global::__Interop.sspicli_dll_PInvokes.QueryContextAttributesW(
									pinned_contextHandle, 
									attribute, 
									((void*)buffer)
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			}
			// Return
			return unsafe___value;
		}

		// Signature, ApplyControlToken, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] void___ptrvoid *, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x0004314C] __Interop_SspiCli_SecBufferDesc__System_Net_Security____Interop_SspiCli_SecBufferDesc__System_Net_Security, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.Security, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+SspiCli", "ApplyControlToken")]
		public static int ApplyControlToken(
					void* inContextPtr, 
					ref global::_.Interop_SspiCli_SecBufferDesc__System_Net_Security inputBuffers)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			fixed (global::_.Interop_SspiCli_SecBufferDesc__System_Net_Security* pinned_inputBuffers = &(inputBuffers))
			{
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = global::__Interop.sspicli_dll_PInvokes.ApplyControlToken(
									((void*)inContextPtr), 
									pinned_inputBuffers
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			}
			// Return
			return unsafe___value;
		}

		// Signature, FreeContextBuffer, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.Security, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+SspiCli", "FreeContextBuffer")]
		public static int FreeContextBuffer(global::System.IntPtr contextBuffer)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
			// Call to native method
			unsafe___value = global::__Interop.sspicli_dll_PInvokes.FreeContextBuffer(contextBuffer);
			global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
			return unsafe___value;
		}

		// Signature, AcceptSecurityContext, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x0004314C] __Interop_SspiCli_CredHandle__System_Net_Security____Interop_SspiCli_CredHandle__System_Net_Security, [fwd] [in] [EETypeRva:0x000419B0] void___ptrvoid *, [fwd] [in] [EETypeRva:0x000419B0] __Interop_SspiCli_SecBufferDesc__System_Net_Security___ptr__Interop_SspiCli_SecBufferDesc__System_Net_Security *, [fwd] [in] [EETypeRva:0x00042D60] __Interop_SspiCli_ContextFlags__System_Net_Security__Interop_SspiCli_ContextFlags__System_Net_Security, [fwd] [in] [EETypeRva:0x00042D60] __Interop_SspiCli_Endianness__System_Net_Security__Interop_SspiCli_Endianness__System_Net_Security, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x0004314C] __Interop_SspiCli_CredHandle__System_Net_Security____Interop_SspiCli_CredHandle__System_Net_Security, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x0004314C] __Interop_SspiCli_SecBufferDesc__System_Net_Security____Interop_SspiCli_SecBufferDesc__System_Net_Security, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00042D60] __Interop_SspiCli_ContextFlags__System_Net_Security__Interop_SspiCli_ContextFlags__System_Net_Security, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] long____int64, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.Security, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+SspiCli", "AcceptSecurityContext")]
		public static int AcceptSecurityContext(
					ref global::_.Interop_SspiCli_CredHandle__System_Net_Security credentialHandle, 
					void* inContextPtr, 
					global::_.Interop_SspiCli_SecBufferDesc__System_Net_Security* inputBuffer, 
					global::_.Interop_SspiCli_ContextFlags__System_Net_Security inFlags, 
					global::_.Interop_SspiCli_Endianness__System_Net_Security endianness, 
					ref global::_.Interop_SspiCli_CredHandle__System_Net_Security outContextPtr, 
					ref global::_.Interop_SspiCli_SecBufferDesc__System_Net_Security outputBuffer, 
					ref global::_.Interop_SspiCli_ContextFlags__System_Net_Security attributes, 
					out long timeStamp)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			fixed (global::_.Interop_SspiCli_CredHandle__System_Net_Security* pinned_credentialHandle = &(credentialHandle))
				fixed (global::_.Interop_SspiCli_CredHandle__System_Net_Security* pinned_outContextPtr = &(outContextPtr))
					fixed (global::_.Interop_SspiCli_SecBufferDesc__System_Net_Security* pinned_outputBuffer = &(outputBuffer))
						fixed (global::_.Interop_SspiCli_ContextFlags__System_Net_Security* pinned_attributes = &(attributes))
							fixed (long* pinned_timeStamp = &(timeStamp))
							{
								global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
								// Call to native method
								unsafe___value = global::__Interop.sspicli_dll_PInvokes.AcceptSecurityContext(
													pinned_credentialHandle, 
													((void*)inContextPtr), 
													((global::_.Interop_SspiCli_SecBufferDesc__System_Net_Security*)inputBuffer), 
													inFlags, 
													endianness, 
													pinned_outContextPtr, 
													pinned_outputBuffer, 
													pinned_attributes, 
													pinned_timeStamp
												);
								global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
								global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
							}
			// Return
			return unsafe___value;
		}

		// Signature, DeleteSecurityContext, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x0004314C] __Interop_SspiCli_CredHandle__System_Net_Security____Interop_SspiCli_CredHandle__System_Net_Security, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.Security, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+SspiCli", "DeleteSecurityContext")]
		public static int DeleteSecurityContext(ref global::_.Interop_SspiCli_CredHandle__System_Net_Security handlePtr)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			fixed (global::_.Interop_SspiCli_CredHandle__System_Net_Security* pinned_handlePtr = &(handlePtr))
			{
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = global::__Interop.sspicli_dll_PInvokes.DeleteSecurityContext(pinned_handlePtr);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			}
			// Return
			return unsafe___value;
		}

		// Signature, InitializeSecurityContextW, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x0004314C] __Interop_SspiCli_CredHandle__System_Net_Security____Interop_SspiCli_CredHandle__System_Net_Security, [fwd] [in] [EETypeRva:0x000419B0] void___ptrvoid *, [fwd] [in] [EETypeRva:0x000419B0] byte___ptrunsigned char *, [fwd] [in] [EETypeRva:0x00042D60] __Interop_SspiCli_ContextFlags__System_Net_Security__Interop_SspiCli_ContextFlags__System_Net_Security, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x00042D60] __Interop_SspiCli_Endianness__System_Net_Security__Interop_SspiCli_Endianness__System_Net_Security, [fwd] [in] [EETypeRva:0x000419B0] __Interop_SspiCli_SecBufferDesc__System_Net_Security___ptr__Interop_SspiCli_SecBufferDesc__System_Net_Security *, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x0004314C] __Interop_SspiCli_CredHandle__System_Net_Security____Interop_SspiCli_CredHandle__System_Net_Security, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x0004314C] __Interop_SspiCli_SecBufferDesc__System_Net_Security____Interop_SspiCli_SecBufferDesc__System_Net_Security, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x00042D60] __Interop_SspiCli_ContextFlags__System_Net_Security__Interop_SspiCli_ContextFlags__System_Net_Security, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] long____int64, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.Security, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+SspiCli", "InitializeSecurityContextW")]
		public static int InitializeSecurityContextW(
					ref global::_.Interop_SspiCli_CredHandle__System_Net_Security credentialHandle, 
					void* inContextPtr, 
					byte* targetName, 
					global::_.Interop_SspiCli_ContextFlags__System_Net_Security inFlags, 
					int reservedI, 
					global::_.Interop_SspiCli_Endianness__System_Net_Security endianness, 
					global::_.Interop_SspiCli_SecBufferDesc__System_Net_Security* inputBuffer, 
					int reservedII, 
					ref global::_.Interop_SspiCli_CredHandle__System_Net_Security outContextPtr, 
					ref global::_.Interop_SspiCli_SecBufferDesc__System_Net_Security outputBuffer, 
					ref global::_.Interop_SspiCli_ContextFlags__System_Net_Security attributes, 
					out long timeStamp)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			fixed (global::_.Interop_SspiCli_CredHandle__System_Net_Security* pinned_credentialHandle = &(credentialHandle))
				fixed (global::_.Interop_SspiCli_CredHandle__System_Net_Security* pinned_outContextPtr = &(outContextPtr))
					fixed (global::_.Interop_SspiCli_SecBufferDesc__System_Net_Security* pinned_outputBuffer = &(outputBuffer))
						fixed (global::_.Interop_SspiCli_ContextFlags__System_Net_Security* pinned_attributes = &(attributes))
							fixed (long* pinned_timeStamp = &(timeStamp))
							{
								global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
								// Call to native method
								unsafe___value = global::__Interop.sspicli_dll_PInvokes.InitializeSecurityContextW(
													pinned_credentialHandle, 
													((void*)inContextPtr), 
													((byte*)targetName), 
													inFlags, 
													reservedI, 
													endianness, 
													((global::_.Interop_SspiCli_SecBufferDesc__System_Net_Security*)inputBuffer), 
													reservedII, 
													pinned_outContextPtr, 
													pinned_outputBuffer, 
													pinned_attributes, 
													pinned_timeStamp
												);
								global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
								global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
							}
			// Return
			return unsafe___value;
		}

		// Signature, AcquireCredentialsHandleW, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x00041B44] string__wchar_t *, [fwd] [in] [EETypeRva:0x00041B44] string__wchar_t *, [fwd] [in] [EETypeRva:0x000419B0] int__int, [fwd] [in] [EETypeRva:0x000419B0] void___ptrvoid *, [fwd] [in] [managedbyref] [nativebyref] [EETypeRva:0x0004314C] __Interop_SspiCli_SCHANNEL_CRED__System_Net_Security____Interop_SspiCli_SCHANNEL_CRED__System_Net_Security, [fwd] [in] [EETypeRva:0x000419B0] void___ptrvoid *, [fwd] [in] [EETypeRva:0x000419B0] void___ptrvoid *, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x0004314C] __Interop_SspiCli_CredHandle__System_Net_Security____Interop_SspiCli_CredHandle__System_Net_Security, [fwd] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] long____int64, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.Security, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+SspiCli", "AcquireCredentialsHandleW")]
		public static int AcquireCredentialsHandleW(
					string principal, 
					string moduleName, 
					int usage, 
					void* logonID, 
					ref global::_.Interop_SspiCli_SCHANNEL_CRED__System_Net_Security authData, 
					void* keyCallback, 
					void* keyArgument, 
					ref global::_.Interop_SspiCli_CredHandle__System_Net_Security handlePtr, 
					out long timeStamp)
		{
			// Setup
			ushort* unsafe_principal = default(ushort*);
			ushort* unsafe_moduleName = default(ushort*);
			int unsafe___value;
			// Marshalling
			fixed (char* pinned_principal = principal)
			{
				unsafe_principal = (ushort*)pinned_principal;
				fixed (char* pinned_moduleName = moduleName)
				{
					unsafe_moduleName = (ushort*)pinned_moduleName;
					fixed (global::_.Interop_SspiCli_SCHANNEL_CRED__System_Net_Security* pinned_authData = &(authData))
						fixed (global::_.Interop_SspiCli_CredHandle__System_Net_Security* pinned_handlePtr = &(handlePtr))
							fixed (long* pinned_timeStamp = &(timeStamp))
							{
								global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
								// Call to native method
								unsafe___value = global::__Interop.sspicli_dll_PInvokes.AcquireCredentialsHandleW(
													unsafe_principal, 
													unsafe_moduleName, 
													usage, 
													((void*)logonID), 
													pinned_authData, 
													((void*)keyCallback), 
													((void*)keyArgument), 
													pinned_handlePtr, 
													pinned_timeStamp
												);
								global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
								global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
							}
				}
			}
			// Return
			return unsafe___value;
		}

		// Signature, FreeCredentialsHandle, [fwd] [return] [EETypeRva:0x000419B0] int__int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x0004314C] __Interop_SspiCli_CredHandle__System_Net_Security____Interop_SspiCli_CredHandle__System_Net_Security, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.Security, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+SspiCli", "FreeCredentialsHandle")]
		public static int FreeCredentialsHandle(ref global::_.Interop_SspiCli_CredHandle__System_Net_Security handlePtr)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			fixed (global::_.Interop_SspiCli_CredHandle__System_Net_Security* pinned_handlePtr = &(handlePtr))
			{
				global::System.Runtime.InteropServices.McgMarshal.ClearLastWin32Error();
				// Call to native method
				unsafe___value = global::__Interop.sspicli_dll_PInvokes.FreeCredentialsHandle(pinned_handlePtr);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			}
			// Return
			return unsafe___value;
		}
	}

	/// <summary>
	/// P/Invoke class for module 'iphlpapi.dll'
	/// </summary>
	public unsafe static partial class iphlpapi_dll
	{
		// Signature, GetNetworkParams, [fwd] [return] [EETypeRva:0x000419B0] uint__unsigned int, [fwd] [in] [EETypeRva:0x000434A4] Microsoft_Win32_SafeHandles_SafeLocalAllocHandle__System_Net_Primitives____w64 int, [fwd] [in] [out] [managedbyref] [nativebyref] [EETypeRva:0x000419B0] uint__unsigned int, 
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.Primitives, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+IpHlpApi", "GetNetworkParams")]
		public static uint GetNetworkParams(
					global::Microsoft.Win32.SafeHandles.SafeLocalAllocHandle__System_Net_Primitives pFixedInfo, 
					ref uint pOutBufLen)
		{
			// Setup
			bool addRefed = false;
			uint unsafe___value;
			// Marshalling
			pFixedInfo.DangerousAddRef(ref addRefed);
			fixed (uint* pinned_pOutBufLen = &(pOutBufLen))
			{
				// Call to native method
				unsafe___value = global::__Interop.iphlpapi_dll_PInvokes.GetNetworkParams(
									pFixedInfo.DangerousGetHandle(), 
									pinned_pOutBufLen
								);
				global::System.Diagnostics.DebugAnnotations.PreviousCallContainsDebuggerStepInCode();
			}
			if (addRefed)
				pFixedInfo.DangerousRelease();
			// Return
			return unsafe___value;
		}
	}

	public unsafe static partial class kernel32_dll_PInvokes
	{
		[global::System.Runtime.InteropServices.DllImport("kernel32.dll", EntryPoint="SetDllDirectoryW", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int SetDllDirectory(ushort* lpPathName);

		[global::System.Runtime.InteropServices.DllImport("kernel32.dll", EntryPoint="CreateDirectoryW", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int CreateDirectoryPrivate(
					ushort* path, 
					global::_.Interop_Kernel32_SECURITY_ATTRIBUTES__System_IO_FileSystem* lpSecurityAttributes);

		[global::System.Runtime.InteropServices.DllImport("kernel32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int SetThreadErrorMode(
					uint dwNewMode, 
					uint* lpOldMode);

		[global::System.Runtime.InteropServices.DllImport("kernel32.dll", EntryPoint="GetFileAttributesExW", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int GetFileAttributesExPrivate(
					ushort* name, 
					global::_.Interop_Kernel32_GET_FILEEX_INFO_LEVELS__System_IO_FileSystem fileInfoLevel, 
					global::_.Interop_Kernel32_WIN32_FILE_ATTRIBUTE_DATA__System_IO_FileSystem* lpFileInformation);

		[global::System.Runtime.InteropServices.DllImport("kernel32.dll", EntryPoint="FindFirstFileExW", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System.IntPtr FindFirstFileExPrivate(
					ushort* lpFileName, 
					global::_.Interop_Kernel32_FINDEX_INFO_LEVELS__System_IO_FileSystem fInfoLevelId, 
					global::_.Interop_Kernel32_WIN32_FIND_DATA__System_IO_FileSystem* lpFindFileData, 
					global::_.Interop_Kernel32_FINDEX_SEARCH_OPS__System_IO_FileSystem fSearchOp, 
					global::System.IntPtr lpSearchFilter, 
					int dwAdditionalFlags);

		[global::System.Runtime.InteropServices.DllImport("kernel32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int CloseHandle(global::System.IntPtr handle);

		[global::System.Runtime.InteropServices.DllImport("kernel32.dll", EntryPoint="DeleteFileW", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int DeleteFilePrivate(ushort* path);

		[global::System.Runtime.InteropServices.DllImport("kernel32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int GetCPInfoExW(
					uint CodePage, 
					uint dwFlags, 
					global::_.Interop_Kernel32_CPINFOEXW__System_Text_Encoding_CodePages* lpCPInfoEx);

		[global::System.Runtime.InteropServices.DllImport("kernel32.dll", EntryPoint="FindNextFileW", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int FindNextFile(
					global::System.IntPtr hndFindFile, 
					global::_.Interop_Kernel32_WIN32_FIND_DATA__System_IO_FileSystem* lpFindFileData);

		[global::System.Runtime.InteropServices.DllImport("kernel32.dll", EntryPoint="CopyFileExW", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int CopyFileExPrivate(
					ushort* src, 
					ushort* dst, 
					global::System.IntPtr progressRoutine, 
					global::System.IntPtr progressData, 
					int* cancel, 
					int flags);

		[global::System.Runtime.InteropServices.DllImport("kernel32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System.IntPtr CreateFile2(
					ushort* lpFileName, 
					int dwDesiredAccess, 
					global::System_IO.FileShare__System_Private_CoreLib dwShareMode, 
					global::System_IO.FileMode__System_Private_CoreLib dwCreationDisposition, 
					global::_.Interop_Kernel32_CREATEFILE2_EXTENDED_PARAMETERS__System_IO_FileSystem* parameters);

		[global::System.Runtime.InteropServices.DllImport("kernel32.dll", EntryPoint="RemoveDirectoryW", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int RemoveDirectoryPrivate(ushort* path);

		[global::System.Runtime.InteropServices.DllImport("kernel32.dll", EntryPoint="DeleteVolumeMountPointW", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int DeleteVolumeMountPointPrivate(ushort* mountPoint);

		[global::System.Runtime.InteropServices.DllImport("kernel32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int FindClose(global::System.IntPtr hFindFile);

		[global::System.Runtime.InteropServices.DllImport("kernel32.dll", EntryPoint="FormatMessageW", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int FormatMessage(
					int dwFlags, 
					global::System.IntPtr lpSource, 
					uint dwMessageId, 
					int dwLanguageId, 
					ushort* lpBuffer, 
					int nSize, 
					global::System.IntPtr* arguments);

		[global::System.Runtime.InteropServices.DllImport("kernel32.dll", EntryPoint="FormatMessageW", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int FormatMessage__0(
					int dwFlags, 
					global::System.IntPtr lpSource, 
					uint dwMessageId, 
					int dwLanguageId, 
					ushort* lpBuffer, 
					int nSize, 
					global::System.IntPtr* arguments);

		[global::System.Runtime.InteropServices.DllImport("kernel32.dll", EntryPoint="FormatMessageW", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int FormatMessage__1(
					int dwFlags, 
					global::System.IntPtr lpSource, 
					uint dwMessageId, 
					int dwLanguageId, 
					ushort* lpBuffer, 
					int nSize, 
					global::System.IntPtr* arguments);

		[global::System.Runtime.InteropServices.DllImport("kernel32.dll", EntryPoint="FormatMessageW", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int FormatMessage__2(
					int dwFlags, 
					global::System.IntPtr lpSource, 
					uint dwMessageId, 
					int dwLanguageId, 
					ushort* lpBuffer, 
					int nSize, 
					global::System.IntPtr* arguments);

		[global::System.Runtime.InteropServices.DllImport("kernel32.dll", EntryPoint="FormatMessageW", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int FormatMessage__3(
					int dwFlags, 
					global::System.IntPtr lpSource, 
					uint dwMessageId, 
					int dwLanguageId, 
					ushort* lpBuffer, 
					int nSize, 
					global::System.IntPtr* arguments);

		[global::System.Runtime.InteropServices.DllImport("kernel32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System.IntPtr GetCurrentThread();

		[global::System.Runtime.InteropServices.DllImport("kernel32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System.IntPtr GetCurrentProcess();

		[global::System.Runtime.InteropServices.DllImport("kernel32.dll", EntryPoint="CloseHandle", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int CloseHandle__0(global::System.IntPtr handle);

		[global::System.Runtime.InteropServices.DllImport("kernel32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int CheckTokenMembershipEx(
					global::System.IntPtr TokenHandle, 
					byte* SidToCheck, 
					uint Flags, 
					int* IsMember);

		[global::System.Runtime.InteropServices.DllImport("kernel32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System.IntPtr LocalAlloc(
					int uFlags, 
					global::System.UIntPtr sizetdwBytes);

		[global::System.Runtime.InteropServices.DllImport("kernel32.dll", EntryPoint="LocalAlloc", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System.IntPtr LocalAlloc__0(
					int uFlags, 
					global::System.UIntPtr sizetdwBytes);

		[global::System.Runtime.InteropServices.DllImport("kernel32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System.IntPtr LocalFree(global::System.IntPtr handle);

		[global::System.Runtime.InteropServices.DllImport("kernel32.dll", EntryPoint="FormatMessageW", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int FormatMessage__4(
					int dwFlags, 
					global::System.IntPtr lpSource, 
					uint dwMessageId, 
					int dwLanguageId, 
					ushort* lpBuffer, 
					int nSize, 
					global::System.IntPtr* arguments);

		[global::System.Runtime.InteropServices.DllImport("kernel32.dll", EntryPoint="LocalFree", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System.IntPtr LocalFree__0(global::System.IntPtr handle);

		[global::System.Runtime.InteropServices.DllImport("kernel32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int DuplicateHandle(
					global::System.IntPtr hSourceProcessHandle, 
					global::System.IntPtr hSourceHandle, 
					global::System.IntPtr hTargetProcessHandle, 
					global::System.IntPtr* lpTargetHandle, 
					uint dwDesiredAccess, 
					int bInheritHandle, 
					uint dwOptions);

		[global::System.Runtime.InteropServices.DllImport("kernel32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int SetFileCompletionNotificationModes(
					global::System.IntPtr handle, 
					global::_.Interop_Kernel32_FileCompletionNotificationModes__System_Net_Sockets flags);
	}

	public unsafe static partial class Magick_Native_Q16_x64_dll_PInvokes
	{
		public static global::System.IntPtr MagickColor_Create()
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickColor_Create\' from this method. Please look for this" +
					" method in build warnings for more details. ");
		}

		public static void MagickColor_Dispose(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickColor_Dispose\' from this method. Please look for thi" +
					"s method in build warnings for more details. ");
		}

		public static ulong MagickColor_Count_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickColor_Count_Get\' from this method. Please look for t" +
					"his method in build warnings for more details. ");
		}

		public static ushort MagickColor_Red_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickColor_Red_Get\' from this method. Please look for thi" +
					"s method in build warnings for more details. ");
		}

		public static void MagickColor_Red_Set(
					global::System.IntPtr instance, 
					ushort value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickColor_Red_Set\' from this method. Please look for thi" +
					"s method in build warnings for more details. ");
		}

		public static ushort MagickColor_Green_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickColor_Green_Get\' from this method. Please look for t" +
					"his method in build warnings for more details. ");
		}

		public static void MagickColor_Green_Set(
					global::System.IntPtr instance, 
					ushort value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickColor_Green_Set\' from this method. Please look for t" +
					"his method in build warnings for more details. ");
		}

		public static ushort MagickColor_Blue_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickColor_Blue_Get\' from this method. Please look for th" +
					"is method in build warnings for more details. ");
		}

		public static void MagickColor_Blue_Set(
					global::System.IntPtr instance, 
					ushort value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickColor_Blue_Set\' from this method. Please look for th" +
					"is method in build warnings for more details. ");
		}

		public static ushort MagickColor_Alpha_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickColor_Alpha_Get\' from this method. Please look for t" +
					"his method in build warnings for more details. ");
		}

		public static void MagickColor_Alpha_Set(
					global::System.IntPtr instance, 
					ushort value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickColor_Alpha_Set\' from this method. Please look for t" +
					"his method in build warnings for more details. ");
		}

		public static ushort MagickColor_Black_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickColor_Black_Get\' from this method. Please look for t" +
					"his method in build warnings for more details. ");
		}

		public static void MagickColor_Black_Set(
					global::System.IntPtr instance, 
					ushort value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickColor_Black_Set\' from this method. Please look for t" +
					"his method in build warnings for more details. ");
		}

		public static int MagickColor_IsCMYK_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickColor_IsCMYK_Get\' from this method. Please look for " +
					"this method in build warnings for more details. ");
		}

		public static void MagickColor_IsCMYK_Set(
					global::System.IntPtr instance, 
					int value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickColor_IsCMYK_Set\' from this method. Please look for " +
					"this method in build warnings for more details. ");
		}

		public static int MagickColor_FuzzyEquals(
					global::System.IntPtr Instance, 
					global::System.IntPtr other, 
					ushort fuzz)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickColor_FuzzyEquals\' from this method. Please look for" +
					" this method in build warnings for more details. ");
		}

		public static int MagickColor_Initialize(
					global::System.IntPtr Instance, 
					global::System.IntPtr value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickColor_Initialize\' from this method. Please look for " +
					"this method in build warnings for more details. ");
		}

		public static void MagickColorCollection_DisposeList(global::System.IntPtr list)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickColorCollection_DisposeList\' from this method. Pleas" +
					"e look for this method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickColorCollection_GetInstance(
					global::System.IntPtr list, 
					global::System.UIntPtr index)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickColorCollection_GetInstance\' from this method. Pleas" +
					"e look for this method in build warnings for more details. ");
		}

		public static global::System.IntPtr DrawingWand_Create(
					global::System.IntPtr image, 
					global::System.IntPtr settings)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!DrawingWand_Create\' from this method. Please look for this" +
					" method in build warnings for more details. ");
		}

		public static void DrawingWand_Dispose(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!DrawingWand_Dispose\' from this method. Please look for thi" +
					"s method in build warnings for more details. ");
		}

		public static void DrawingWand_Affine(
					global::System.IntPtr Instance, 
					double scaleX, 
					double scaleY, 
					double shearX, 
					double shearY, 
					double translateX, 
					double translateY, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!DrawingWand_Affine\' from this method. Please look for this" +
					" method in build warnings for more details. ");
		}

		public static void DrawingWand_Alpha(
					global::System.IntPtr Instance, 
					double x, 
					double y, 
					global::System.UIntPtr paintMethod, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!DrawingWand_Alpha\' from this method. Please look for this " +
					"method in build warnings for more details. ");
		}

		public static void DrawingWand_Arc(
					global::System.IntPtr Instance, 
					double startX, 
					double startY, 
					double endX, 
					double endY, 
					double startDegrees, 
					double endDegrees, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!DrawingWand_Arc\' from this method. Please look for this me" +
					"thod in build warnings for more details. ");
		}

		public static void DrawingWand_Bezier(
					global::System.IntPtr Instance, 
					global::System.IntPtr coordinates, 
					global::System.UIntPtr length, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!DrawingWand_Bezier\' from this method. Please look for this" +
					" method in build warnings for more details. ");
		}

		public static void DrawingWand_BorderColor(
					global::System.IntPtr Instance, 
					global::System.IntPtr value, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!DrawingWand_BorderColor\' from this method. Please look for" +
					" this method in build warnings for more details. ");
		}

		public static void DrawingWand_Circle(
					global::System.IntPtr Instance, 
					double originX, 
					double originY, 
					double perimeterX, 
					double perimeterY, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!DrawingWand_Circle\' from this method. Please look for this" +
					" method in build warnings for more details. ");
		}

		public static void DrawingWand_ClipPath(
					global::System.IntPtr Instance, 
					global::System.IntPtr value, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!DrawingWand_ClipPath\' from this method. Please look for th" +
					"is method in build warnings for more details. ");
		}

		public static void DrawingWand_ClipRule(
					global::System.IntPtr Instance, 
					global::System.UIntPtr value, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!DrawingWand_ClipRule\' from this method. Please look for th" +
					"is method in build warnings for more details. ");
		}

		public static void DrawingWand_ClipUnits(
					global::System.IntPtr Instance, 
					global::System.UIntPtr value, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!DrawingWand_ClipUnits\' from this method. Please look for t" +
					"his method in build warnings for more details. ");
		}

		public static void DrawingWand_Color(
					global::System.IntPtr Instance, 
					double x, 
					double y, 
					global::System.UIntPtr paintMethod, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!DrawingWand_Color\' from this method. Please look for this " +
					"method in build warnings for more details. ");
		}

		public static void DrawingWand_Composite(
					global::System.IntPtr Instance, 
					double x, 
					double y, 
					double width, 
					double height, 
					global::System.UIntPtr compositeOperator, 
					global::System.IntPtr image, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!DrawingWand_Composite\' from this method. Please look for t" +
					"his method in build warnings for more details. ");
		}

		public static void DrawingWand_Density(
					global::System.IntPtr Instance, 
					global::System.IntPtr value, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!DrawingWand_Density\' from this method. Please look for thi" +
					"s method in build warnings for more details. ");
		}

		public static void DrawingWand_Ellipse(
					global::System.IntPtr Instance, 
					double originX, 
					double originY, 
					double radiusX, 
					double radiusY, 
					double startDegrees, 
					double endDegrees, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!DrawingWand_Ellipse\' from this method. Please look for thi" +
					"s method in build warnings for more details. ");
		}

		public static void DrawingWand_FillColor(
					global::System.IntPtr Instance, 
					global::System.IntPtr value, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!DrawingWand_FillColor\' from this method. Please look for t" +
					"his method in build warnings for more details. ");
		}

		public static void DrawingWand_FillOpacity(
					global::System.IntPtr Instance, 
					double value, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!DrawingWand_FillOpacity\' from this method. Please look for" +
					" this method in build warnings for more details. ");
		}

		public static void DrawingWand_FillPatternUrl(
					global::System.IntPtr Instance, 
					global::System.IntPtr url, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!DrawingWand_FillPatternUrl\' from this method. Please look " +
					"for this method in build warnings for more details. ");
		}

		public static void DrawingWand_FillRule(
					global::System.IntPtr Instance, 
					global::System.UIntPtr value, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!DrawingWand_FillRule\' from this method. Please look for th" +
					"is method in build warnings for more details. ");
		}

		public static void DrawingWand_Font(
					global::System.IntPtr Instance, 
					global::System.IntPtr fontName, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!DrawingWand_Font\' from this method. Please look for this m" +
					"ethod in build warnings for more details. ");
		}

		public static void DrawingWand_FontFamily(
					global::System.IntPtr Instance, 
					global::System.IntPtr family, 
					global::System.UIntPtr style, 
					global::System.UIntPtr weight, 
					global::System.UIntPtr stretch, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!DrawingWand_FontFamily\' from this method. Please look for " +
					"this method in build warnings for more details. ");
		}

		public static void DrawingWand_FontPointSize(
					global::System.IntPtr Instance, 
					double value, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!DrawingWand_FontPointSize\' from this method. Please look f" +
					"or this method in build warnings for more details. ");
		}

		public static global::System.IntPtr DrawingWand_FontTypeMetrics(
					global::System.IntPtr Instance, 
					global::System.IntPtr text, 
					int ignoreNewLines, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!DrawingWand_FontTypeMetrics\' from this method. Please look" +
					" for this method in build warnings for more details. ");
		}

		public static void DrawingWand_Gravity(
					global::System.IntPtr Instance, 
					global::System.UIntPtr value, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!DrawingWand_Gravity\' from this method. Please look for thi" +
					"s method in build warnings for more details. ");
		}

		public static void DrawingWand_Line(
					global::System.IntPtr Instance, 
					double startX, 
					double startY, 
					double endX, 
					double endY, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!DrawingWand_Line\' from this method. Please look for this m" +
					"ethod in build warnings for more details. ");
		}

		public static void DrawingWand_PathArcAbs(
					global::System.IntPtr Instance, 
					double x, 
					double y, 
					double radiusX, 
					double radiusY, 
					double rotationX, 
					int useLargeArc, 
					int useSweep, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!DrawingWand_PathArcAbs\' from this method. Please look for " +
					"this method in build warnings for more details. ");
		}

		public static void DrawingWand_PathArcRel(
					global::System.IntPtr Instance, 
					double x, 
					double y, 
					double radiusX, 
					double radiusY, 
					double rotationX, 
					int useLargeArc, 
					int useSweep, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!DrawingWand_PathArcRel\' from this method. Please look for " +
					"this method in build warnings for more details. ");
		}

		public static void DrawingWand_Render(
					global::System.IntPtr Instance, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!DrawingWand_Render\' from this method. Please look for this" +
					" method in build warnings for more details. ");
		}

		public static void DrawingWand_Text(
					global::System.IntPtr Instance, 
					double x, 
					double y, 
					global::System.IntPtr text, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!DrawingWand_Text\' from this method. Please look for this m" +
					"ethod in build warnings for more details. ");
		}

		public static void DrawingWand_PathClose(
					global::System.IntPtr Instance, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!DrawingWand_PathClose\' from this method. Please look for t" +
					"his method in build warnings for more details. ");
		}

		public static void DrawingWand_PathCurveToAbs(
					global::System.IntPtr Instance, 
					double x1, 
					double y1, 
					double x2, 
					double y2, 
					double x, 
					double y, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!DrawingWand_PathCurveToAbs\' from this method. Please look " +
					"for this method in build warnings for more details. ");
		}

		public static void DrawingWand_PathCurveToRel(
					global::System.IntPtr Instance, 
					double x1, 
					double y1, 
					double x2, 
					double y2, 
					double x, 
					double y, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!DrawingWand_PathCurveToRel\' from this method. Please look " +
					"for this method in build warnings for more details. ");
		}

		public static void DrawingWand_PathFinish(
					global::System.IntPtr Instance, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!DrawingWand_PathFinish\' from this method. Please look for " +
					"this method in build warnings for more details. ");
		}

		public static void DrawingWand_PathLineToAbs(
					global::System.IntPtr Instance, 
					double x, 
					double y, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!DrawingWand_PathLineToAbs\' from this method. Please look f" +
					"or this method in build warnings for more details. ");
		}

		public static void DrawingWand_PathLineToRel(
					global::System.IntPtr Instance, 
					double x, 
					double y, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!DrawingWand_PathLineToRel\' from this method. Please look f" +
					"or this method in build warnings for more details. ");
		}

		public static void DrawingWand_PathLineToHorizontalAbs(
					global::System.IntPtr Instance, 
					double x, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!DrawingWand_PathLineToHorizontalAbs\' from this method. Ple" +
					"ase look for this method in build warnings for more details. ");
		}

		public static void DrawingWand_PathLineToHorizontalRel(
					global::System.IntPtr Instance, 
					double x, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!DrawingWand_PathLineToHorizontalRel\' from this method. Ple" +
					"ase look for this method in build warnings for more details. ");
		}

		public static void DrawingWand_PathLineToVerticalAbs(
					global::System.IntPtr Instance, 
					double y, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!DrawingWand_PathLineToVerticalAbs\' from this method. Pleas" +
					"e look for this method in build warnings for more details. ");
		}

		public static void DrawingWand_PathLineToVerticalRel(
					global::System.IntPtr Instance, 
					double y, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!DrawingWand_PathLineToVerticalRel\' from this method. Pleas" +
					"e look for this method in build warnings for more details. ");
		}

		public static void DrawingWand_PathMoveToAbs(
					global::System.IntPtr Instance, 
					double x, 
					double y, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!DrawingWand_PathMoveToAbs\' from this method. Please look f" +
					"or this method in build warnings for more details. ");
		}

		public static void DrawingWand_PathMoveToRel(
					global::System.IntPtr Instance, 
					double x, 
					double y, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!DrawingWand_PathMoveToRel\' from this method. Please look f" +
					"or this method in build warnings for more details. ");
		}

		public static void DrawingWand_PathQuadraticCurveToAbs(
					global::System.IntPtr Instance, 
					double x1, 
					double y1, 
					double x, 
					double y, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!DrawingWand_PathQuadraticCurveToAbs\' from this method. Ple" +
					"ase look for this method in build warnings for more details. ");
		}

		public static void DrawingWand_PathQuadraticCurveToRel(
					global::System.IntPtr Instance, 
					double x1, 
					double y1, 
					double x, 
					double y, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!DrawingWand_PathQuadraticCurveToRel\' from this method. Ple" +
					"ase look for this method in build warnings for more details. ");
		}

		public static void DrawingWand_PathSmoothCurveToAbs(
					global::System.IntPtr Instance, 
					double x2, 
					double y2, 
					double x, 
					double y, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!DrawingWand_PathSmoothCurveToAbs\' from this method. Please" +
					" look for this method in build warnings for more details. ");
		}

		public static void DrawingWand_PathSmoothCurveToRel(
					global::System.IntPtr Instance, 
					double x2, 
					double y2, 
					double x, 
					double y, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!DrawingWand_PathSmoothCurveToRel\' from this method. Please" +
					" look for this method in build warnings for more details. ");
		}

		public static void DrawingWand_PathSmoothQuadraticCurveToAbs(
					global::System.IntPtr Instance, 
					double x, 
					double y, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!DrawingWand_PathSmoothQuadraticCurveToAbs\' from this metho" +
					"d. Please look for this method in build warnings for more details. ");
		}

		public static void DrawingWand_PathSmoothQuadraticCurveToRel(
					global::System.IntPtr Instance, 
					double x, 
					double y, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!DrawingWand_PathSmoothQuadraticCurveToRel\' from this metho" +
					"d. Please look for this method in build warnings for more details. ");
		}

		public static void DrawingWand_PathStart(
					global::System.IntPtr Instance, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!DrawingWand_PathStart\' from this method. Please look for t" +
					"his method in build warnings for more details. ");
		}

		public static void DrawingWand_Point(
					global::System.IntPtr Instance, 
					double x, 
					double y, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!DrawingWand_Point\' from this method. Please look for this " +
					"method in build warnings for more details. ");
		}

		public static void DrawingWand_Polygon(
					global::System.IntPtr Instance, 
					global::System.IntPtr coordinates, 
					global::System.UIntPtr length, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!DrawingWand_Polygon\' from this method. Please look for thi" +
					"s method in build warnings for more details. ");
		}

		public static void DrawingWand_Polyline(
					global::System.IntPtr Instance, 
					global::System.IntPtr coordinates, 
					global::System.UIntPtr length, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!DrawingWand_Polyline\' from this method. Please look for th" +
					"is method in build warnings for more details. ");
		}

		public static void DrawingWand_PopClipPath(
					global::System.IntPtr Instance, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!DrawingWand_PopClipPath\' from this method. Please look for" +
					" this method in build warnings for more details. ");
		}

		public static void DrawingWand_PopGraphicContext(
					global::System.IntPtr Instance, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!DrawingWand_PopGraphicContext\' from this method. Please lo" +
					"ok for this method in build warnings for more details. ");
		}

		public static void DrawingWand_PopPattern(
					global::System.IntPtr Instance, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!DrawingWand_PopPattern\' from this method. Please look for " +
					"this method in build warnings for more details. ");
		}

		public static void DrawingWand_PushClipPath(
					global::System.IntPtr Instance, 
					global::System.IntPtr clipPath, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!DrawingWand_PushClipPath\' from this method. Please look fo" +
					"r this method in build warnings for more details. ");
		}

		public static void DrawingWand_PushGraphicContext(
					global::System.IntPtr Instance, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!DrawingWand_PushGraphicContext\' from this method. Please l" +
					"ook for this method in build warnings for more details. ");
		}

		public static void DrawingWand_PushPattern(
					global::System.IntPtr Instance, 
					global::System.IntPtr id, 
					double x, 
					double y, 
					double width, 
					double height, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!DrawingWand_PushPattern\' from this method. Please look for" +
					" this method in build warnings for more details. ");
		}

		public static void DrawingWand_Rectangle(
					global::System.IntPtr Instance, 
					double upperLeftX, 
					double upperLeftY, 
					double lowerRightX, 
					double lowerRightY, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!DrawingWand_Rectangle\' from this method. Please look for t" +
					"his method in build warnings for more details. ");
		}

		public static void DrawingWand_Rotation(
					global::System.IntPtr Instance, 
					double angle, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!DrawingWand_Rotation\' from this method. Please look for th" +
					"is method in build warnings for more details. ");
		}

		public static void DrawingWand_RoundRectangle(
					global::System.IntPtr Instance, 
					double upperLeftX, 
					double upperLeftY, 
					double lowerRightX, 
					double lowerRightY, 
					double cornerWidth, 
					double cornerHeight, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!DrawingWand_RoundRectangle\' from this method. Please look " +
					"for this method in build warnings for more details. ");
		}

		public static void DrawingWand_Scaling(
					global::System.IntPtr Instance, 
					double x, 
					double y, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!DrawingWand_Scaling\' from this method. Please look for thi" +
					"s method in build warnings for more details. ");
		}

		public static void DrawingWand_SkewX(
					global::System.IntPtr Instance, 
					double angle, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!DrawingWand_SkewX\' from this method. Please look for this " +
					"method in build warnings for more details. ");
		}

		public static void DrawingWand_SkewY(
					global::System.IntPtr Instance, 
					double angle, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!DrawingWand_SkewY\' from this method. Please look for this " +
					"method in build warnings for more details. ");
		}

		public static void DrawingWand_StrokeAntialias(
					global::System.IntPtr Instance, 
					int isEnabled, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!DrawingWand_StrokeAntialias\' from this method. Please look" +
					" for this method in build warnings for more details. ");
		}

		public static void DrawingWand_StrokeColor(
					global::System.IntPtr Instance, 
					global::System.IntPtr value, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!DrawingWand_StrokeColor\' from this method. Please look for" +
					" this method in build warnings for more details. ");
		}

		public static void DrawingWand_StrokeDashArray(
					global::System.IntPtr Instance, 
					double* dash, 
					global::System.UIntPtr length, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!DrawingWand_StrokeDashArray\' from this method. Please look" +
					" for this method in build warnings for more details. ");
		}

		public static void DrawingWand_StrokeDashOffset(
					global::System.IntPtr Instance, 
					double value, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!DrawingWand_StrokeDashOffset\' from this method. Please loo" +
					"k for this method in build warnings for more details. ");
		}

		public static void DrawingWand_StrokeLineCap(
					global::System.IntPtr Instance, 
					global::System.UIntPtr value, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!DrawingWand_StrokeLineCap\' from this method. Please look f" +
					"or this method in build warnings for more details. ");
		}

		public static void DrawingWand_StrokeLineJoin(
					global::System.IntPtr Instance, 
					global::System.UIntPtr value, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!DrawingWand_StrokeLineJoin\' from this method. Please look " +
					"for this method in build warnings for more details. ");
		}

		public static void DrawingWand_StrokeMiterLimit(
					global::System.IntPtr Instance, 
					global::System.UIntPtr value, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!DrawingWand_StrokeMiterLimit\' from this method. Please loo" +
					"k for this method in build warnings for more details. ");
		}

		public static void DrawingWand_StrokeOpacity(
					global::System.IntPtr Instance, 
					double value, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!DrawingWand_StrokeOpacity\' from this method. Please look f" +
					"or this method in build warnings for more details. ");
		}

		public static void DrawingWand_StrokePatternUrl(
					global::System.IntPtr Instance, 
					global::System.IntPtr value, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!DrawingWand_StrokePatternUrl\' from this method. Please loo" +
					"k for this method in build warnings for more details. ");
		}

		public static void DrawingWand_StrokeWidth(
					global::System.IntPtr Instance, 
					double value, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!DrawingWand_StrokeWidth\' from this method. Please look for" +
					" this method in build warnings for more details. ");
		}

		public static void DrawingWand_TextAlignment(
					global::System.IntPtr Instance, 
					global::System.UIntPtr value, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!DrawingWand_TextAlignment\' from this method. Please look f" +
					"or this method in build warnings for more details. ");
		}

		public static void DrawingWand_TextAntialias(
					global::System.IntPtr Instance, 
					int isEnabled, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!DrawingWand_TextAntialias\' from this method. Please look f" +
					"or this method in build warnings for more details. ");
		}

		public static void DrawingWand_TextDecoration(
					global::System.IntPtr Instance, 
					global::System.UIntPtr value, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!DrawingWand_TextDecoration\' from this method. Please look " +
					"for this method in build warnings for more details. ");
		}

		public static void DrawingWand_TextDirection(
					global::System.IntPtr Instance, 
					global::System.UIntPtr value, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!DrawingWand_TextDirection\' from this method. Please look f" +
					"or this method in build warnings for more details. ");
		}

		public static void DrawingWand_TextEncoding(
					global::System.IntPtr Instance, 
					global::System.IntPtr encoding, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!DrawingWand_TextEncoding\' from this method. Please look fo" +
					"r this method in build warnings for more details. ");
		}

		public static void DrawingWand_TextInterlineSpacing(
					global::System.IntPtr Instance, 
					double value, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!DrawingWand_TextInterlineSpacing\' from this method. Please" +
					" look for this method in build warnings for more details. ");
		}

		public static void DrawingWand_TextInterwordSpacing(
					global::System.IntPtr Instance, 
					double value, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!DrawingWand_TextInterwordSpacing\' from this method. Please" +
					" look for this method in build warnings for more details. ");
		}

		public static void DrawingWand_TextKerning(
					global::System.IntPtr Instance, 
					double value, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!DrawingWand_TextKerning\' from this method. Please look for" +
					" this method in build warnings for more details. ");
		}

		public static void DrawingWand_TextUnderColor(
					global::System.IntPtr Instance, 
					global::System.IntPtr color, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!DrawingWand_TextUnderColor\' from this method. Please look " +
					"for this method in build warnings for more details. ");
		}

		public static void DrawingWand_Translation(
					global::System.IntPtr Instance, 
					double x, 
					double y, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!DrawingWand_Translation\' from this method. Please look for" +
					" this method in build warnings for more details. ");
		}

		public static void DrawingWand_Viewbox(
					global::System.IntPtr Instance, 
					double upperLeftX, 
					double upperLeftY, 
					double lowerRightX, 
					double lowerRightY, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!DrawingWand_Viewbox\' from this method. Please look for thi" +
					"s method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickExceptionHelper_Description(global::System.IntPtr exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickExceptionHelper_Description\' from this method. Pleas" +
					"e look for this method in build warnings for more details. ");
		}

		public static void MagickExceptionHelper_Dispose(global::System.IntPtr exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickExceptionHelper_Dispose\' from this method. Please lo" +
					"ok for this method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickExceptionHelper_Message(global::System.IntPtr exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickExceptionHelper_Message\' from this method. Please lo" +
					"ok for this method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickExceptionHelper_Related(
					global::System.IntPtr exception, 
					global::System.UIntPtr index)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickExceptionHelper_Related\' from this method. Please lo" +
					"ok for this method in build warnings for more details. ");
		}

		public static global::System.UIntPtr MagickExceptionHelper_RelatedCount(global::System.IntPtr exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickExceptionHelper_RelatedCount\' from this method. Plea" +
					"se look for this method in build warnings for more details. ");
		}

		public static global::System.UIntPtr MagickExceptionHelper_Severity(global::System.IntPtr exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickExceptionHelper_Severity\' from this method. Please l" +
					"ook for this method in build warnings for more details. ");
		}

		public static void Environment_Initialize()
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!Environment_Initialize\' from this method. Please look for " +
					"this method in build warnings for more details. ");
		}

		public static void Environment_SetEnv(
					global::System.IntPtr name, 
					global::System.IntPtr value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!Environment_SetEnv\' from this method. Please look for this" +
					" method in build warnings for more details. ");
		}

		public static void MagickMemory_Relinquish(global::System.IntPtr value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickMemory_Relinquish\' from this method. Please look for" +
					" this method in build warnings for more details. ");
		}

		public static global::System.IntPtr Magick_Delegates_Get()
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!Magick_Delegates_Get\' from this method. Please look for th" +
					"is method in build warnings for more details. ");
		}

		public static global::System.IntPtr Magick_Features_Get()
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!Magick_Features_Get\' from this method. Please look for thi" +
					"s method in build warnings for more details. ");
		}

		public static global::System.IntPtr Magick_GetFonts(
					global::System.UIntPtr* length, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!Magick_GetFonts\' from this method. Please look for this me" +
					"thod in build warnings for more details. ");
		}

		public static global::System.IntPtr Magick_GetFontName(
					global::System.IntPtr instance, 
					global::System.UIntPtr index)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!Magick_GetFontName\' from this method. Please look for this" +
					" method in build warnings for more details. ");
		}

		public static global::System.IntPtr Magick_GetFontFamily(
					global::System.IntPtr instance, 
					global::System.UIntPtr index)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!Magick_GetFontFamily\' from this method. Please look for th" +
					"is method in build warnings for more details. ");
		}

		public static void Magick_DisposeFonts(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!Magick_DisposeFonts\' from this method. Please look for thi" +
					"s method in build warnings for more details. ");
		}

		public static void Magick_SetLogDelegate(void* method)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!Magick_SetLogDelegate\' from this method. Please look for t" +
					"his method in build warnings for more details. ");
		}

		public static void Magick_SetLogEvents(global::System.IntPtr events)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!Magick_SetLogEvents\' from this method. Please look for thi" +
					"s method in build warnings for more details. ");
		}

		public static void Magick_SetRandomSeed(long value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!Magick_SetRandomSeed\' from this method. Please look for th" +
					"is method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickFormatInfo_Description_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickFormatInfo_Description_Get\' from this method. Please" +
					" look for this method in build warnings for more details. ");
		}

		public static int MagickFormatInfo_CanReadMultithreaded_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickFormatInfo_CanReadMultithreaded_Get\' from this metho" +
					"d. Please look for this method in build warnings for more details. ");
		}

		public static int MagickFormatInfo_CanWriteMultithreaded_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickFormatInfo_CanWriteMultithreaded_Get\' from this meth" +
					"od. Please look for this method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickFormatInfo_Format_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickFormatInfo_Format_Get\' from this method. Please look" +
					" for this method in build warnings for more details. ");
		}

		public static int MagickFormatInfo_IsMultiFrame_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickFormatInfo_IsMultiFrame_Get\' from this method. Pleas" +
					"e look for this method in build warnings for more details. ");
		}

		public static int MagickFormatInfo_IsReadable_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickFormatInfo_IsReadable_Get\' from this method. Please " +
					"look for this method in build warnings for more details. ");
		}

		public static int MagickFormatInfo_IsWritable_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickFormatInfo_IsWritable_Get\' from this method. Please " +
					"look for this method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickFormatInfo_MimeType_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickFormatInfo_MimeType_Get\' from this method. Please lo" +
					"ok for this method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickFormatInfo_Module_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickFormatInfo_Module_Get\' from this method. Please look" +
					" for this method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickFormatInfo_CreateList(
					global::System.UIntPtr* length, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickFormatInfo_CreateList\' from this method. Please look" +
					" for this method in build warnings for more details. ");
		}

		public static void MagickFormatInfo_DisposeList(
					global::System.IntPtr instance, 
					global::System.UIntPtr length)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickFormatInfo_DisposeList\' from this method. Please loo" +
					"k for this method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickFormatInfo_GetInfo(
					global::System.IntPtr list, 
					global::System.UIntPtr index, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickFormatInfo_GetInfo\' from this method. Please look fo" +
					"r this method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickFormatInfo_GetInfoByName(
					global::System.IntPtr name, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickFormatInfo_GetInfoByName\' from this method. Please l" +
					"ook for this method in build warnings for more details. ");
		}

		public static int MagickFormatInfo_Unregister(global::System.IntPtr name)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickFormatInfo_Unregister\' from this method. Please look" +
					" for this method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_Create(
					global::System.IntPtr settings, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_Create\' from this method. Please look for this" +
					" method in build warnings for more details. ");
		}

		public static void MagickImage_Dispose(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_Dispose\' from this method. Please look for thi" +
					"s method in build warnings for more details. ");
		}

		public static global::System.UIntPtr MagickImage_AnimationDelay_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_AnimationDelay_Get\' from this method. Please l" +
					"ook for this method in build warnings for more details. ");
		}

		public static void MagickImage_AnimationDelay_Set(
					global::System.IntPtr instance, 
					global::System.UIntPtr value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_AnimationDelay_Set\' from this method. Please l" +
					"ook for this method in build warnings for more details. ");
		}

		public static global::System.UIntPtr MagickImage_AnimationIterations_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_AnimationIterations_Get\' from this method. Ple" +
					"ase look for this method in build warnings for more details. ");
		}

		public static void MagickImage_AnimationIterations_Set(
					global::System.IntPtr instance, 
					global::System.UIntPtr value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_AnimationIterations_Set\' from this method. Ple" +
					"ase look for this method in build warnings for more details. ");
		}

		public static global::System.UIntPtr MagickImage_AnimationTicksPerSecond_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_AnimationTicksPerSecond_Get\' from this method." +
					" Please look for this method in build warnings for more details. ");
		}

		public static void MagickImage_AnimationTicksPerSecond_Set(
					global::System.IntPtr instance, 
					global::System.UIntPtr value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_AnimationTicksPerSecond_Set\' from this method." +
					" Please look for this method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_BackgroundColor_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_BackgroundColor_Get\' from this method. Please " +
					"look for this method in build warnings for more details. ");
		}

		public static void MagickImage_BackgroundColor_Set(
					global::System.IntPtr instance, 
					global::System.IntPtr value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_BackgroundColor_Set\' from this method. Please " +
					"look for this method in build warnings for more details. ");
		}

		public static global::System.UIntPtr MagickImage_BaseHeight_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_BaseHeight_Get\' from this method. Please look " +
					"for this method in build warnings for more details. ");
		}

		public static global::System.UIntPtr MagickImage_BaseWidth_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_BaseWidth_Get\' from this method. Please look f" +
					"or this method in build warnings for more details. ");
		}

		public static int MagickImage_BlackPointCompensation_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_BlackPointCompensation_Get\' from this method. " +
					"Please look for this method in build warnings for more details. ");
		}

		public static void MagickImage_BlackPointCompensation_Set(
					global::System.IntPtr instance, 
					int value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_BlackPointCompensation_Set\' from this method. " +
					"Please look for this method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_BorderColor_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_BorderColor_Get\' from this method. Please look" +
					" for this method in build warnings for more details. ");
		}

		public static void MagickImage_BorderColor_Set(
					global::System.IntPtr instance, 
					global::System.IntPtr value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_BorderColor_Set\' from this method. Please look" +
					" for this method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_BoundingBox_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_BoundingBox_Get\' from this method. Please look" +
					" for this method in build warnings for more details. ");
		}

		public static global::System.UIntPtr MagickImage_ChannelCount_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_ChannelCount_Get\' from this method. Please loo" +
					"k for this method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_ChromaBluePrimary_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_ChromaBluePrimary_Get\' from this method. Pleas" +
					"e look for this method in build warnings for more details. ");
		}

		public static void MagickImage_ChromaBluePrimary_Set(
					global::System.IntPtr instance, 
					global::System.IntPtr value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_ChromaBluePrimary_Set\' from this method. Pleas" +
					"e look for this method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_ChromaGreenPrimary_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_ChromaGreenPrimary_Get\' from this method. Plea" +
					"se look for this method in build warnings for more details. ");
		}

		public static void MagickImage_ChromaGreenPrimary_Set(
					global::System.IntPtr instance, 
					global::System.IntPtr value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_ChromaGreenPrimary_Set\' from this method. Plea" +
					"se look for this method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_ChromaRedPrimary_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_ChromaRedPrimary_Get\' from this method. Please" +
					" look for this method in build warnings for more details. ");
		}

		public static void MagickImage_ChromaRedPrimary_Set(
					global::System.IntPtr instance, 
					global::System.IntPtr value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_ChromaRedPrimary_Set\' from this method. Please" +
					" look for this method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_ChromaWhitePoint_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_ChromaWhitePoint_Get\' from this method. Please" +
					" look for this method in build warnings for more details. ");
		}

		public static void MagickImage_ChromaWhitePoint_Set(
					global::System.IntPtr instance, 
					global::System.IntPtr value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_ChromaWhitePoint_Set\' from this method. Please" +
					" look for this method in build warnings for more details. ");
		}

		public static global::System.UIntPtr MagickImage_ClassType_Get(
					global::System.IntPtr instance, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_ClassType_Get\' from this method. Please look f" +
					"or this method in build warnings for more details. ");
		}

		public static void MagickImage_ClassType_Set(
					global::System.IntPtr instance, 
					global::System.UIntPtr value, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_ClassType_Set\' from this method. Please look f" +
					"or this method in build warnings for more details. ");
		}

		public static double MagickImage_ColorFuzz_Get(
					global::System.IntPtr instance, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_ColorFuzz_Get\' from this method. Please look f" +
					"or this method in build warnings for more details. ");
		}

		public static void MagickImage_ColorFuzz_Set(
					global::System.IntPtr instance, 
					double value, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_ColorFuzz_Set\' from this method. Please look f" +
					"or this method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_ColormapSize_Get(
					global::System.IntPtr instance, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_ColormapSize_Get\' from this method. Please loo" +
					"k for this method in build warnings for more details. ");
		}

		public static void MagickImage_ColormapSize_Set(
					global::System.IntPtr instance, 
					global::System.IntPtr value, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_ColormapSize_Set\' from this method. Please loo" +
					"k for this method in build warnings for more details. ");
		}

		public static global::System.UIntPtr MagickImage_ColorSpace_Get(
					global::System.IntPtr instance, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_ColorSpace_Get\' from this method. Please look " +
					"for this method in build warnings for more details. ");
		}

		public static void MagickImage_ColorSpace_Set(
					global::System.IntPtr instance, 
					global::System.UIntPtr value, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_ColorSpace_Set\' from this method. Please look " +
					"for this method in build warnings for more details. ");
		}

		public static global::System.UIntPtr MagickImage_ColorType_Get(
					global::System.IntPtr instance, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_ColorType_Get\' from this method. Please look f" +
					"or this method in build warnings for more details. ");
		}

		public static void MagickImage_ColorType_Set(
					global::System.IntPtr instance, 
					global::System.UIntPtr value, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_ColorType_Set\' from this method. Please look f" +
					"or this method in build warnings for more details. ");
		}

		public static global::System.UIntPtr MagickImage_Compose_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_Compose_Get\' from this method. Please look for" +
					" this method in build warnings for more details. ");
		}

		public static void MagickImage_Compose_Set(
					global::System.IntPtr instance, 
					global::System.UIntPtr value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_Compose_Set\' from this method. Please look for" +
					" this method in build warnings for more details. ");
		}

		public static global::System.UIntPtr MagickImage_Compression_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_Compression_Get\' from this method. Please look" +
					" for this method in build warnings for more details. ");
		}

		public static global::System.UIntPtr MagickImage_Depth_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_Depth_Get\' from this method. Please look for t" +
					"his method in build warnings for more details. ");
		}

		public static void MagickImage_Depth_Set(
					global::System.IntPtr instance, 
					global::System.UIntPtr value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_Depth_Set\' from this method. Please look for t" +
					"his method in build warnings for more details. ");
		}

		public static global::System.UIntPtr MagickImage_Endian_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_Endian_Get\' from this method. Please look for " +
					"this method in build warnings for more details. ");
		}

		public static void MagickImage_Endian_Set(
					global::System.IntPtr instance, 
					global::System.UIntPtr value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_Endian_Set\' from this method. Please look for " +
					"this method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_EncodingGeometry_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_EncodingGeometry_Get\' from this method. Please" +
					" look for this method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_FileName_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_FileName_Get\' from this method. Please look fo" +
					"r this method in build warnings for more details. ");
		}

		public static void MagickImage_FileName_Set(
					global::System.IntPtr instance, 
					global::System.IntPtr value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_FileName_Set\' from this method. Please look fo" +
					"r this method in build warnings for more details. ");
		}

		public static global::System.UIntPtr MagickImage_FilterType_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_FilterType_Get\' from this method. Please look " +
					"for this method in build warnings for more details. ");
		}

		public static void MagickImage_FilterType_Set(
					global::System.IntPtr instance, 
					global::System.UIntPtr value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_FilterType_Set\' from this method. Please look " +
					"for this method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_Format_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_Format_Get\' from this method. Please look for " +
					"this method in build warnings for more details. ");
		}

		public static void MagickImage_Format_Set(
					global::System.IntPtr instance, 
					global::System.IntPtr value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_Format_Set\' from this method. Please look for " +
					"this method in build warnings for more details. ");
		}

		public static double MagickImage_Gamma_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_Gamma_Get\' from this method. Please look for t" +
					"his method in build warnings for more details. ");
		}

		public static global::System.UIntPtr MagickImage_GifDisposeMethod_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_GifDisposeMethod_Get\' from this method. Please" +
					" look for this method in build warnings for more details. ");
		}

		public static void MagickImage_GifDisposeMethod_Set(
					global::System.IntPtr instance, 
					global::System.UIntPtr value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_GifDisposeMethod_Set\' from this method. Please" +
					" look for this method in build warnings for more details. ");
		}

		public static global::System.UIntPtr MagickImage_Height_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_Height_Get\' from this method. Please look for " +
					"this method in build warnings for more details. ");
		}

		public static int MagickImage_HasAlpha_Get(
					global::System.IntPtr instance, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_HasAlpha_Get\' from this method. Please look fo" +
					"r this method in build warnings for more details. ");
		}

		public static void MagickImage_HasAlpha_Set(
					global::System.IntPtr instance, 
					int value, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_HasAlpha_Set\' from this method. Please look fo" +
					"r this method in build warnings for more details. ");
		}

		public static global::System.UIntPtr MagickImage_Interlace_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_Interlace_Get\' from this method. Please look f" +
					"or this method in build warnings for more details. ");
		}

		public static void MagickImage_Interlace_Set(
					global::System.IntPtr instance, 
					global::System.UIntPtr value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_Interlace_Set\' from this method. Please look f" +
					"or this method in build warnings for more details. ");
		}

		public static global::System.UIntPtr MagickImage_Interpolate_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_Interpolate_Get\' from this method. Please look" +
					" for this method in build warnings for more details. ");
		}

		public static void MagickImage_Interpolate_Set(
					global::System.IntPtr instance, 
					global::System.UIntPtr value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_Interpolate_Set\' from this method. Please look" +
					" for this method in build warnings for more details. ");
		}

		public static int MagickImage_IsOpaque_Get(
					global::System.IntPtr instance, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_IsOpaque_Get\' from this method. Please look fo" +
					"r this method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_MatteColor_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_MatteColor_Get\' from this method. Please look " +
					"for this method in build warnings for more details. ");
		}

		public static void MagickImage_MatteColor_Set(
					global::System.IntPtr instance, 
					global::System.IntPtr value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_MatteColor_Set\' from this method. Please look " +
					"for this method in build warnings for more details. ");
		}

		public static double MagickImage_MeanErrorPerPixel_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_MeanErrorPerPixel_Get\' from this method. Pleas" +
					"e look for this method in build warnings for more details. ");
		}

		public static double MagickImage_NormalizedMaximumError_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_NormalizedMaximumError_Get\' from this method. " +
					"Please look for this method in build warnings for more details. ");
		}

		public static double MagickImage_NormalizedMeanError_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_NormalizedMeanError_Get\' from this method. Ple" +
					"ase look for this method in build warnings for more details. ");
		}

		public static global::System.UIntPtr MagickImage_Orientation_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_Orientation_Get\' from this method. Please look" +
					" for this method in build warnings for more details. ");
		}

		public static void MagickImage_Orientation_Set(
					global::System.IntPtr instance, 
					global::System.UIntPtr value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_Orientation_Set\' from this method. Please look" +
					" for this method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_Page_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_Page_Get\' from this method. Please look for th" +
					"is method in build warnings for more details. ");
		}

		public static void MagickImage_Page_Set(
					global::System.IntPtr instance, 
					global::System.IntPtr value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_Page_Set\' from this method. Please look for th" +
					"is method in build warnings for more details. ");
		}

		public static global::System.UIntPtr MagickImage_Quality_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_Quality_Get\' from this method. Please look for" +
					" this method in build warnings for more details. ");
		}

		public static void MagickImage_Quality_Set(
					global::System.IntPtr instance, 
					global::System.UIntPtr value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_Quality_Set\' from this method. Please look for" +
					" this method in build warnings for more details. ");
		}

		public static global::System.UIntPtr MagickImage_RenderingIntent_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_RenderingIntent_Get\' from this method. Please " +
					"look for this method in build warnings for more details. ");
		}

		public static void MagickImage_RenderingIntent_Set(
					global::System.IntPtr instance, 
					global::System.UIntPtr value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_RenderingIntent_Set\' from this method. Please " +
					"look for this method in build warnings for more details. ");
		}

		public static global::System.UIntPtr MagickImage_ResolutionUnits_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_ResolutionUnits_Get\' from this method. Please " +
					"look for this method in build warnings for more details. ");
		}

		public static void MagickImage_ResolutionUnits_Set(
					global::System.IntPtr instance, 
					global::System.UIntPtr value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_ResolutionUnits_Set\' from this method. Please " +
					"look for this method in build warnings for more details. ");
		}

		public static double MagickImage_ResolutionX_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_ResolutionX_Get\' from this method. Please look" +
					" for this method in build warnings for more details. ");
		}

		public static void MagickImage_ResolutionX_Set(
					global::System.IntPtr instance, 
					double value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_ResolutionX_Set\' from this method. Please look" +
					" for this method in build warnings for more details. ");
		}

		public static double MagickImage_ResolutionY_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_ResolutionY_Get\' from this method. Please look" +
					" for this method in build warnings for more details. ");
		}

		public static void MagickImage_ResolutionY_Set(
					global::System.IntPtr instance, 
					double value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_ResolutionY_Set\' from this method. Please look" +
					" for this method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_Signature_Get(
					global::System.IntPtr instance, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_Signature_Get\' from this method. Please look f" +
					"or this method in build warnings for more details. ");
		}

		public static global::System.UIntPtr MagickImage_TotalColors_Get(
					global::System.IntPtr instance, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_TotalColors_Get\' from this method. Please look" +
					" for this method in build warnings for more details. ");
		}

		public static global::System.UIntPtr MagickImage_VirtualPixelMethod_Get(
					global::System.IntPtr instance, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_VirtualPixelMethod_Get\' from this method. Plea" +
					"se look for this method in build warnings for more details. ");
		}

		public static void MagickImage_VirtualPixelMethod_Set(
					global::System.IntPtr instance, 
					global::System.UIntPtr value, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_VirtualPixelMethod_Set\' from this method. Plea" +
					"se look for this method in build warnings for more details. ");
		}

		public static global::System.UIntPtr MagickImage_Width_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_Width_Get\' from this method. Please look for t" +
					"his method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_AdaptiveBlur(
					global::System.IntPtr Instance, 
					double radius, 
					double sigma, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_AdaptiveBlur\' from this method. Please look fo" +
					"r this method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_AdaptiveResize(
					global::System.IntPtr Instance, 
					global::System.IntPtr geometry, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_AdaptiveResize\' from this method. Please look " +
					"for this method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_AdaptiveSharpen(
					global::System.IntPtr Instance, 
					double radius, 
					double sigma, 
					global::System.UIntPtr channels, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_AdaptiveSharpen\' from this method. Please look" +
					" for this method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_AdaptiveThreshold(
					global::System.IntPtr Instance, 
					global::System.UIntPtr width, 
					global::System.UIntPtr height, 
					double bias, 
					global::System.UIntPtr channels, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_AdaptiveThreshold\' from this method. Please lo" +
					"ok for this method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_AddNoise(
					global::System.IntPtr Instance, 
					global::System.UIntPtr noiseType, 
					double attenuate, 
					global::System.UIntPtr channels, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_AddNoise\' from this method. Please look for th" +
					"is method in build warnings for more details. ");
		}

		public static void MagickImage_AddProfile(
					global::System.IntPtr Instance, 
					global::System.IntPtr name, 
					byte* datum, 
					global::System.UIntPtr length, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_AddProfile\' from this method. Please look for " +
					"this method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_AffineTransform(
					global::System.IntPtr Instance, 
					double scaleX, 
					double scaleY, 
					double shearX, 
					double shearY, 
					double translateX, 
					double translateY, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_AffineTransform\' from this method. Please look" +
					" for this method in build warnings for more details. ");
		}

		public static void MagickImage_Annotate(
					global::System.IntPtr Instance, 
					global::System.IntPtr settings, 
					global::System.IntPtr text, 
					global::System.IntPtr boundingArea, 
					global::System.UIntPtr gravity, 
					double degrees, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_Annotate\' from this method. Please look for th" +
					"is method in build warnings for more details. ");
		}

		public static void MagickImage_AnnotateGravity(
					global::System.IntPtr Instance, 
					global::System.IntPtr settings, 
					global::System.IntPtr text, 
					global::System.UIntPtr gravity, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_AnnotateGravity\' from this method. Please look" +
					" for this method in build warnings for more details. ");
		}

		public static void MagickImage_AutoGamma(
					global::System.IntPtr Instance, 
					global::System.UIntPtr channels, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_AutoGamma\' from this method. Please look for t" +
					"his method in build warnings for more details. ");
		}

		public static void MagickImage_AutoLevel(
					global::System.IntPtr Instance, 
					global::System.UIntPtr channels, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_AutoLevel\' from this method. Please look for t" +
					"his method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_AutoOrient(
					global::System.IntPtr Instance, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_AutoOrient\' from this method. Please look for " +
					"this method in build warnings for more details. ");
		}

		public static void MagickImage_AutoThreshold(
					global::System.IntPtr Instance, 
					global::System.UIntPtr method, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_AutoThreshold\' from this method. Please look f" +
					"or this method in build warnings for more details. ");
		}

		public static void MagickImage_BlackThreshold(
					global::System.IntPtr Instance, 
					global::System.IntPtr threshold, 
					global::System.UIntPtr channels, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_BlackThreshold\' from this method. Please look " +
					"for this method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_BlueShift(
					global::System.IntPtr Instance, 
					double factor, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_BlueShift\' from this method. Please look for t" +
					"his method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_Blur(
					global::System.IntPtr Instance, 
					double radius, 
					double sigma, 
					global::System.UIntPtr channels, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_Blur\' from this method. Please look for this m" +
					"ethod in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_Border(
					global::System.IntPtr Instance, 
					global::System.IntPtr value, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_Border\' from this method. Please look for this" +
					" method in build warnings for more details. ");
		}

		public static void MagickImage_BrightnessContrast(
					global::System.IntPtr Instance, 
					double brightness, 
					double contrast, 
					global::System.UIntPtr channels, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_BrightnessContrast\' from this method. Please l" +
					"ook for this method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_CannyEdge(
					global::System.IntPtr Instance, 
					double radius, 
					double sigma, 
					double lower, 
					double upper, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_CannyEdge\' from this method. Please look for t" +
					"his method in build warnings for more details. ");
		}

		public static global::System.UIntPtr MagickImage_ChannelOffset(
					global::System.IntPtr Instance, 
					global::System.UIntPtr channel)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_ChannelOffset\' from this method. Please look f" +
					"or this method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_Charcoal(
					global::System.IntPtr Instance, 
					double radius, 
					double sigma, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_Charcoal\' from this method. Please look for th" +
					"is method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_Chop(
					global::System.IntPtr Instance, 
					global::System.IntPtr geometry, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_Chop\' from this method. Please look for this m" +
					"ethod in build warnings for more details. ");
		}

		public static void MagickImage_Clahe(
					global::System.IntPtr Instance, 
					global::System.UIntPtr xTiles, 
					global::System.UIntPtr yTiles, 
					global::System.UIntPtr numberBins, 
					double clipLimit, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_Clahe\' from this method. Please look for this " +
					"method in build warnings for more details. ");
		}

		public static void MagickImage_Clamp(
					global::System.IntPtr Instance, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_Clamp\' from this method. Please look for this " +
					"method in build warnings for more details. ");
		}

		public static void MagickImage_ClampChannel(
					global::System.IntPtr Instance, 
					global::System.UIntPtr channels, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_ClampChannel\' from this method. Please look fo" +
					"r this method in build warnings for more details. ");
		}

		public static void MagickImage_Clip(
					global::System.IntPtr Instance, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_Clip\' from this method. Please look for this m" +
					"ethod in build warnings for more details. ");
		}

		public static void MagickImage_ClipPath(
					global::System.IntPtr Instance, 
					global::System.IntPtr pathName, 
					int inside, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_ClipPath\' from this method. Please look for th" +
					"is method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_Clone(
					global::System.IntPtr Instance, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_Clone\' from this method. Please look for this " +
					"method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_CloneArea(
					global::System.IntPtr Instance, 
					global::System.UIntPtr width, 
					global::System.UIntPtr height, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_CloneArea\' from this method. Please look for t" +
					"his method in build warnings for more details. ");
		}

		public static void MagickImage_Clut(
					global::System.IntPtr Instance, 
					global::System.IntPtr image, 
					global::System.UIntPtr method, 
					global::System.UIntPtr channels, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_Clut\' from this method. Please look for this m" +
					"ethod in build warnings for more details. ");
		}

		public static void MagickImage_ColorDecisionList(
					global::System.IntPtr Instance, 
					global::System.IntPtr fileName, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_ColorDecisionList\' from this method. Please lo" +
					"ok for this method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_Colorize(
					global::System.IntPtr Instance, 
					global::System.IntPtr color, 
					global::System.IntPtr blend, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_Colorize\' from this method. Please look for th" +
					"is method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_ColorMatrix(
					global::System.IntPtr Instance, 
					global::System.IntPtr matrix, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_ColorMatrix\' from this method. Please look for" +
					" this method in build warnings for more details. ");
		}

		public static void MagickImage_ColorThreshold(
					global::System.IntPtr Instance, 
					global::System.IntPtr startColor, 
					global::System.IntPtr stopColor, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_ColorThreshold\' from this method. Please look " +
					"for this method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_Compare(
					global::System.IntPtr Instance, 
					global::System.IntPtr image, 
					global::System.UIntPtr metric, 
					global::System.UIntPtr channels, 
					double* distortion, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_Compare\' from this method. Please look for thi" +
					"s method in build warnings for more details. ");
		}

		public static double MagickImage_CompareDistortion(
					global::System.IntPtr Instance, 
					global::System.IntPtr image, 
					global::System.UIntPtr metric, 
					global::System.UIntPtr channels, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_CompareDistortion\' from this method. Please lo" +
					"ok for this method in build warnings for more details. ");
		}

		public static void MagickImage_Composite(
					global::System.IntPtr Instance, 
					global::System.IntPtr image, 
					global::System.IntPtr x, 
					global::System.IntPtr y, 
					global::System.UIntPtr compose, 
					global::System.UIntPtr channels, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_Composite\' from this method. Please look for t" +
					"his method in build warnings for more details. ");
		}

		public static void MagickImage_CompositeGravity(
					global::System.IntPtr Instance, 
					global::System.IntPtr image, 
					global::System.UIntPtr gravity, 
					global::System.IntPtr x, 
					global::System.IntPtr y, 
					global::System.UIntPtr compose, 
					global::System.UIntPtr channels, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_CompositeGravity\' from this method. Please loo" +
					"k for this method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_ConnectedComponents(
					global::System.IntPtr Instance, 
					global::System.UIntPtr connectivity, 
					global::System.IntPtr* objects, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_ConnectedComponents\' from this method. Please " +
					"look for this method in build warnings for more details. ");
		}

		public static void MagickImage_Contrast(
					global::System.IntPtr Instance, 
					int enhance, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_Contrast\' from this method. Please look for th" +
					"is method in build warnings for more details. ");
		}

		public static void MagickImage_ContrastStretch(
					global::System.IntPtr Instance, 
					double blackPoint, 
					double whitePoint, 
					global::System.UIntPtr channels, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_ContrastStretch\' from this method. Please look" +
					" for this method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_ConvexHull(
					global::System.IntPtr Instance, 
					global::System.UIntPtr* length, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_ConvexHull\' from this method. Please look for " +
					"this method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_Convolve(
					global::System.IntPtr Instance, 
					global::System.IntPtr matrix, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_Convolve\' from this method. Please look for th" +
					"is method in build warnings for more details. ");
		}

		public static void MagickImage_CopyPixels(
					global::System.IntPtr Instance, 
					global::System.IntPtr image, 
					global::System.IntPtr geometry, 
					global::System.IntPtr offset, 
					global::System.UIntPtr channels, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_CopyPixels\' from this method. Please look for " +
					"this method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_Crop(
					global::System.IntPtr Instance, 
					global::System.IntPtr geometry, 
					global::System.UIntPtr gravity, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_Crop\' from this method. Please look for this m" +
					"ethod in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_CropToTiles(
					global::System.IntPtr Instance, 
					global::System.IntPtr geometry, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_CropToTiles\' from this method. Please look for" +
					" this method in build warnings for more details. ");
		}

		public static void MagickImage_CycleColormap(
					global::System.IntPtr Instance, 
					global::System.IntPtr amount, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_CycleColormap\' from this method. Please look f" +
					"or this method in build warnings for more details. ");
		}

		public static void MagickImage_Decipher(
					global::System.IntPtr Instance, 
					global::System.IntPtr passphrase, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_Decipher\' from this method. Please look for th" +
					"is method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_Deskew(
					global::System.IntPtr Instance, 
					double threshold, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_Deskew\' from this method. Please look for this" +
					" method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_Despeckle(
					global::System.IntPtr Instance, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_Despeckle\' from this method. Please look for t" +
					"his method in build warnings for more details. ");
		}

		public static global::System.UIntPtr MagickImage_DetermineColorType(
					global::System.IntPtr Instance, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_DetermineColorType\' from this method. Please l" +
					"ook for this method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_Distort(
					global::System.IntPtr Instance, 
					global::System.UIntPtr method, 
					int bestfit, 
					double* arguments, 
					global::System.UIntPtr length, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_Distort\' from this method. Please look for thi" +
					"s method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_Edge(
					global::System.IntPtr Instance, 
					double radius, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_Edge\' from this method. Please look for this m" +
					"ethod in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_Emboss(
					global::System.IntPtr Instance, 
					double radius, 
					double sigma, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_Emboss\' from this method. Please look for this" +
					" method in build warnings for more details. ");
		}

		public static void MagickImage_Encipher(
					global::System.IntPtr Instance, 
					global::System.IntPtr passphrase, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_Encipher\' from this method. Please look for th" +
					"is method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_Enhance(
					global::System.IntPtr Instance, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_Enhance\' from this method. Please look for thi" +
					"s method in build warnings for more details. ");
		}

		public static void MagickImage_Equalize(
					global::System.IntPtr Instance, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_Equalize\' from this method. Please look for th" +
					"is method in build warnings for more details. ");
		}

		public static int MagickImage_Equals(
					global::System.IntPtr Instance, 
					global::System.IntPtr image, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_Equals\' from this method. Please look for this" +
					" method in build warnings for more details. ");
		}

		public static void MagickImage_EvaluateFunction(
					global::System.IntPtr Instance, 
					global::System.UIntPtr channels, 
					global::System.UIntPtr evaluateFunction, 
					double* values, 
					global::System.UIntPtr length, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_EvaluateFunction\' from this method. Please loo" +
					"k for this method in build warnings for more details. ");
		}

		public static void MagickImage_EvaluateGeometry(
					global::System.IntPtr Instance, 
					global::System.UIntPtr channels, 
					global::System.IntPtr geometry, 
					global::System.UIntPtr evaluateOperator, 
					double value, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_EvaluateGeometry\' from this method. Please loo" +
					"k for this method in build warnings for more details. ");
		}

		public static void MagickImage_EvaluateOperator(
					global::System.IntPtr Instance, 
					global::System.UIntPtr channels, 
					global::System.UIntPtr evaluateOperator, 
					double value, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_EvaluateOperator\' from this method. Please loo" +
					"k for this method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_Extent(
					global::System.IntPtr Instance, 
					global::System.IntPtr geometry, 
					global::System.UIntPtr gravity, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_Extent\' from this method. Please look for this" +
					" method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_Flip(
					global::System.IntPtr Instance, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_Flip\' from this method. Please look for this m" +
					"ethod in build warnings for more details. ");
		}

		public static void MagickImage_FloodFill(
					global::System.IntPtr Instance, 
					global::System.IntPtr settings, 
					global::System.IntPtr x, 
					global::System.IntPtr y, 
					global::System.IntPtr target, 
					int invert, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_FloodFill\' from this method. Please look for t" +
					"his method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_Flop(
					global::System.IntPtr Instance, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_Flop\' from this method. Please look for this m" +
					"ethod in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_FontTypeMetrics(
					global::System.IntPtr Instance, 
					global::System.IntPtr settings, 
					int ignoreNewlines, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_FontTypeMetrics\' from this method. Please look" +
					" for this method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_FormatExpression(
					global::System.IntPtr Instance, 
					global::System.IntPtr settings, 
					global::System.IntPtr expression, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_FormatExpression\' from this method. Please loo" +
					"k for this method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_Frame(
					global::System.IntPtr Instance, 
					global::System.IntPtr geometry, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_Frame\' from this method. Please look for this " +
					"method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_Fx(
					global::System.IntPtr Instance, 
					global::System.IntPtr expression, 
					global::System.UIntPtr channels, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_Fx\' from this method. Please look for this met" +
					"hod in build warnings for more details. ");
		}

		public static void MagickImage_GammaCorrect(
					global::System.IntPtr Instance, 
					double gamma, 
					global::System.UIntPtr channels, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_GammaCorrect\' from this method. Please look fo" +
					"r this method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_GaussianBlur(
					global::System.IntPtr Instance, 
					double radius, 
					double sigma, 
					global::System.UIntPtr channels, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_GaussianBlur\' from this method. Please look fo" +
					"r this method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_GetArtifact(
					global::System.IntPtr Instance, 
					global::System.IntPtr name)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_GetArtifact\' from this method. Please look for" +
					" this method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_GetAttribute(
					global::System.IntPtr Instance, 
					global::System.IntPtr name, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_GetAttribute\' from this method. Please look fo" +
					"r this method in build warnings for more details. ");
		}

		public static global::System.UIntPtr MagickImage_GetBitDepth(
					global::System.IntPtr Instance, 
					global::System.UIntPtr channels, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_GetBitDepth\' from this method. Please look for" +
					" this method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_GetColormap(
					global::System.IntPtr Instance, 
					global::System.UIntPtr index)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_GetColormap\' from this method. Please look for" +
					" this method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_GetNext(global::System.IntPtr image)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_GetNext\' from this method. Please look for thi" +
					"s method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_GetNextArtifactName(global::System.IntPtr Instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_GetNextArtifactName\' from this method. Please " +
					"look for this method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_GetNextAttributeName(global::System.IntPtr Instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_GetNextAttributeName\' from this method. Please" +
					" look for this method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_GetNextProfileName(global::System.IntPtr Instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_GetNextProfileName\' from this method. Please l" +
					"ook for this method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_GetProfile(
					global::System.IntPtr Instance, 
					global::System.IntPtr name, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_GetProfile\' from this method. Please look for " +
					"this method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_GetReadMask(
					global::System.IntPtr Instance, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_GetReadMask\' from this method. Please look for" +
					" this method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_GetWriteMask(
					global::System.IntPtr Instance, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_GetWriteMask\' from this method. Please look fo" +
					"r this method in build warnings for more details. ");
		}

		public static void MagickImage_Grayscale(
					global::System.IntPtr Instance, 
					global::System.UIntPtr method, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_Grayscale\' from this method. Please look for t" +
					"his method in build warnings for more details. ");
		}

		public static void MagickImage_HaldClut(
					global::System.IntPtr Instance, 
					global::System.IntPtr image, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_HaldClut\' from this method. Please look for th" +
					"is method in build warnings for more details. ");
		}

		public static int MagickImage_HasChannel(
					global::System.IntPtr Instance, 
					global::System.UIntPtr channel)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_HasChannel\' from this method. Please look for " +
					"this method in build warnings for more details. ");
		}

		public static int MagickImage_HasProfile(
					global::System.IntPtr Instance, 
					global::System.IntPtr name)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_HasProfile\' from this method. Please look for " +
					"this method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_Histogram(
					global::System.IntPtr Instance, 
					global::System.UIntPtr* length, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_Histogram\' from this method. Please look for t" +
					"his method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_HoughLine(
					global::System.IntPtr Instance, 
					global::System.UIntPtr width, 
					global::System.UIntPtr height, 
					global::System.UIntPtr threshold, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_HoughLine\' from this method. Please look for t" +
					"his method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_Implode(
					global::System.IntPtr Instance, 
					double amount, 
					global::System.UIntPtr method, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_Implode\' from this method. Please look for thi" +
					"s method in build warnings for more details. ");
		}

		public static void MagickImage_Kmeans(
					global::System.IntPtr Instance, 
					global::System.UIntPtr numberColors, 
					global::System.UIntPtr maxIterations, 
					double tolerance, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_Kmeans\' from this method. Please look for this" +
					" method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_Kuwahara(
					global::System.IntPtr Instance, 
					double radius, 
					double sigma, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_Kuwahara\' from this method. Please look for th" +
					"is method in build warnings for more details. ");
		}

		public static void MagickImage_Level(
					global::System.IntPtr Instance, 
					double blackPoint, 
					double whitePoint, 
					double gamma, 
					global::System.UIntPtr channels, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_Level\' from this method. Please look for this " +
					"method in build warnings for more details. ");
		}

		public static void MagickImage_LevelColors(
					global::System.IntPtr Instance, 
					global::System.IntPtr blackColor, 
					global::System.IntPtr whiteColor, 
					global::System.UIntPtr channels, 
					int invert, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_LevelColors\' from this method. Please look for" +
					" this method in build warnings for more details. ");
		}

		public static void MagickImage_Levelize(
					global::System.IntPtr Instance, 
					double blackPoint, 
					double whitePoint, 
					double gamma, 
					global::System.UIntPtr channels, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_Levelize\' from this method. Please look for th" +
					"is method in build warnings for more details. ");
		}

		public static void MagickImage_LinearStretch(
					global::System.IntPtr Instance, 
					double blackPoint, 
					double whitePoint, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_LinearStretch\' from this method. Please look f" +
					"or this method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_LiquidRescale(
					global::System.IntPtr Instance, 
					global::System.IntPtr geometry, 
					double deltaX, 
					double rigidity, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_LiquidRescale\' from this method. Please look f" +
					"or this method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_LocalContrast(
					global::System.IntPtr Instance, 
					double radius, 
					double strength, 
					global::System.UIntPtr channels, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_LocalContrast\' from this method. Please look f" +
					"or this method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_Magnify(
					global::System.IntPtr Instance, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_Magnify\' from this method. Please look for thi" +
					"s method in build warnings for more details. ");
		}

		public static int MagickImage_Map(
					global::System.IntPtr Instance, 
					global::System.IntPtr image, 
					global::System.IntPtr settings, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_Map\' from this method. Please look for this me" +
					"thod in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_MeanShift(
					global::System.IntPtr Instance, 
					global::System.UIntPtr width, 
					global::System.UIntPtr height, 
					double colorDistance, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_MeanShift\' from this method. Please look for t" +
					"his method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_Minify(
					global::System.IntPtr Instance, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_Minify\' from this method. Please look for this" +
					" method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_Moments(
					global::System.IntPtr Instance, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_Moments\' from this method. Please look for thi" +
					"s method in build warnings for more details. ");
		}

		public static void MagickImage_Modulate(
					global::System.IntPtr Instance, 
					global::System.IntPtr modulate, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_Modulate\' from this method. Please look for th" +
					"is method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_MinimumBoundingBox(
					global::System.IntPtr Instance, 
					global::System.UIntPtr* length, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_MinimumBoundingBox\' from this method. Please l" +
					"ook for this method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_Morphology(
					global::System.IntPtr Instance, 
					global::System.UIntPtr method, 
					global::System.IntPtr kernel, 
					global::System.UIntPtr channels, 
					global::System.UIntPtr iterations, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_Morphology\' from this method. Please look for " +
					"this method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_MotionBlur(
					global::System.IntPtr Instance, 
					double radius, 
					double sigma, 
					double angle, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_MotionBlur\' from this method. Please look for " +
					"this method in build warnings for more details. ");
		}

		public static void MagickImage_Negate(
					global::System.IntPtr Instance, 
					int onlyGrayscale, 
					global::System.UIntPtr channels, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_Negate\' from this method. Please look for this" +
					" method in build warnings for more details. ");
		}

		public static void MagickImage_Normalize(
					global::System.IntPtr Instance, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_Normalize\' from this method. Please look for t" +
					"his method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_OilPaint(
					global::System.IntPtr Instance, 
					double radius, 
					double sigma, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_OilPaint\' from this method. Please look for th" +
					"is method in build warnings for more details. ");
		}

		public static void MagickImage_Opaque(
					global::System.IntPtr Instance, 
					global::System.IntPtr target, 
					global::System.IntPtr fill, 
					int invert, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_Opaque\' from this method. Please look for this" +
					" method in build warnings for more details. ");
		}

		public static void MagickImage_OrderedDither(
					global::System.IntPtr Instance, 
					global::System.IntPtr thresholdMap, 
					global::System.UIntPtr channels, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_OrderedDither\' from this method. Please look f" +
					"or this method in build warnings for more details. ");
		}

		public static void MagickImage_Perceptible(
					global::System.IntPtr Instance, 
					double epsilon, 
					global::System.UIntPtr channels, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_Perceptible\' from this method. Please look for" +
					" this method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_PerceptualHash(
					global::System.IntPtr Instance, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_PerceptualHash\' from this method. Please look " +
					"for this method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_Polaroid(
					global::System.IntPtr Instance, 
					global::System.IntPtr settings, 
					global::System.IntPtr caption, 
					double angle, 
					global::System.UIntPtr method, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_Polaroid\' from this method. Please look for th" +
					"is method in build warnings for more details. ");
		}

		public static void MagickImage_Posterize(
					global::System.IntPtr Instance, 
					global::System.UIntPtr levels, 
					global::System.UIntPtr method, 
					global::System.UIntPtr channels, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_Posterize\' from this method. Please look for t" +
					"his method in build warnings for more details. ");
		}

		public static void MagickImage_Quantize(
					global::System.IntPtr Instance, 
					global::System.IntPtr settings, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_Quantize\' from this method. Please look for th" +
					"is method in build warnings for more details. ");
		}

		public static void MagickImage_RaiseOrLower(
					global::System.IntPtr Instance, 
					global::System.UIntPtr size, 
					int raise, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_RaiseOrLower\' from this method. Please look fo" +
					"r this method in build warnings for more details. ");
		}

		public static void MagickImage_RandomThreshold(
					global::System.IntPtr Instance, 
					double low, 
					double high, 
					global::System.UIntPtr channels, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_RandomThreshold\' from this method. Please look" +
					" for this method in build warnings for more details. ");
		}

		public static void MagickImage_RangeThreshold(
					global::System.IntPtr Instance, 
					double low_black, 
					double low_white, 
					double high_white, 
					double high_black, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_RangeThreshold\' from this method. Please look " +
					"for this method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_ReadBlob(
					global::System.IntPtr settings, 
					byte* data, 
					global::System.UIntPtr offset, 
					global::System.UIntPtr length, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_ReadBlob\' from this method. Please look for th" +
					"is method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_ReadFile(
					global::System.IntPtr settings, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_ReadFile\' from this method. Please look for th" +
					"is method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_ReadPixels(
					global::System.UIntPtr width, 
					global::System.UIntPtr height, 
					global::System.IntPtr map, 
					global::System.UIntPtr storageType, 
					byte* data, 
					global::System.UIntPtr offset, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_ReadPixels\' from this method. Please look for " +
					"this method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_ReadStream(
					global::System.IntPtr settings, 
					void* reader, 
					void* seeker, 
					void* teller, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_ReadStream\' from this method. Please look for " +
					"this method in build warnings for more details. ");
		}

		public static void MagickImage_RegionMask(
					global::System.IntPtr Instance, 
					global::System.IntPtr region, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_RegionMask\' from this method. Please look for " +
					"this method in build warnings for more details. ");
		}

		public static void MagickImage_RemoveArtifact(
					global::System.IntPtr Instance, 
					global::System.IntPtr name)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_RemoveArtifact\' from this method. Please look " +
					"for this method in build warnings for more details. ");
		}

		public static void MagickImage_RemoveAttribute(
					global::System.IntPtr Instance, 
					global::System.IntPtr name)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_RemoveAttribute\' from this method. Please look" +
					" for this method in build warnings for more details. ");
		}

		public static void MagickImage_RemoveProfile(
					global::System.IntPtr Instance, 
					global::System.IntPtr name)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_RemoveProfile\' from this method. Please look f" +
					"or this method in build warnings for more details. ");
		}

		public static void MagickImage_ResetArtifactIterator(global::System.IntPtr Instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_ResetArtifactIterator\' from this method. Pleas" +
					"e look for this method in build warnings for more details. ");
		}

		public static void MagickImage_ResetAttributeIterator(global::System.IntPtr Instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_ResetAttributeIterator\' from this method. Plea" +
					"se look for this method in build warnings for more details. ");
		}

		public static void MagickImage_ResetProfileIterator(global::System.IntPtr Instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_ResetProfileIterator\' from this method. Please" +
					" look for this method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_Resample(
					global::System.IntPtr Instance, 
					double resolutionX, 
					double resolutionY, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_Resample\' from this method. Please look for th" +
					"is method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_Resize(
					global::System.IntPtr Instance, 
					global::System.IntPtr geometry, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_Resize\' from this method. Please look for this" +
					" method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_Roll(
					global::System.IntPtr Instance, 
					global::System.IntPtr x, 
					global::System.IntPtr y, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_Roll\' from this method. Please look for this m" +
					"ethod in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_Rotate(
					global::System.IntPtr Instance, 
					double degrees, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_Rotate\' from this method. Please look for this" +
					" method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_RotationalBlur(
					global::System.IntPtr Instance, 
					double angle, 
					global::System.UIntPtr channels, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_RotationalBlur\' from this method. Please look " +
					"for this method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_Sample(
					global::System.IntPtr Instance, 
					global::System.IntPtr geometry, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_Sample\' from this method. Please look for this" +
					" method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_Scale(
					global::System.IntPtr Instance, 
					global::System.IntPtr geometry, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_Scale\' from this method. Please look for this " +
					"method in build warnings for more details. ");
		}

		public static void MagickImage_Segment(
					global::System.IntPtr Instance, 
					global::System.UIntPtr colorSpace, 
					double clusterThreshold, 
					double smoothingThreshold, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_Segment\' from this method. Please look for thi" +
					"s method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_SelectiveBlur(
					global::System.IntPtr Instance, 
					double radius, 
					double sigma, 
					double threshold, 
					global::System.UIntPtr channels, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_SelectiveBlur\' from this method. Please look f" +
					"or this method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_Separate(
					global::System.IntPtr Instance, 
					global::System.UIntPtr channels, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_Separate\' from this method. Please look for th" +
					"is method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_SepiaTone(
					global::System.IntPtr Instance, 
					double threshold, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_SepiaTone\' from this method. Please look for t" +
					"his method in build warnings for more details. ");
		}

		public static void MagickImage_SetAlpha(
					global::System.IntPtr Instance, 
					global::System.UIntPtr value, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_SetAlpha\' from this method. Please look for th" +
					"is method in build warnings for more details. ");
		}

		public static void MagickImage_SetArtifact(
					global::System.IntPtr Instance, 
					global::System.IntPtr name, 
					global::System.IntPtr value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_SetArtifact\' from this method. Please look for" +
					" this method in build warnings for more details. ");
		}

		public static void MagickImage_SetAttribute(
					global::System.IntPtr Instance, 
					global::System.IntPtr name, 
					global::System.IntPtr value, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_SetAttribute\' from this method. Please look fo" +
					"r this method in build warnings for more details. ");
		}

		public static void MagickImage_SetBitDepth(
					global::System.IntPtr Instance, 
					global::System.UIntPtr channels, 
					global::System.UIntPtr value, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_SetBitDepth\' from this method. Please look for" +
					" this method in build warnings for more details. ");
		}

		public static void MagickImage_SetColormap(
					global::System.IntPtr Instance, 
					global::System.UIntPtr index, 
					global::System.IntPtr color, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_SetColormap\' from this method. Please look for" +
					" this method in build warnings for more details. ");
		}

		public static int MagickImage_SetColorMetric(
					global::System.IntPtr Instance, 
					global::System.IntPtr image, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_SetColorMetric\' from this method. Please look " +
					"for this method in build warnings for more details. ");
		}

		public static void MagickImage_SetNext(
					global::System.IntPtr Instance, 
					global::System.IntPtr image)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_SetNext\' from this method. Please look for thi" +
					"s method in build warnings for more details. ");
		}

		public static void MagickImage_SetProgressDelegate(
					global::System.IntPtr Instance, 
					void* method)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_SetProgressDelegate\' from this method. Please " +
					"look for this method in build warnings for more details. ");
		}

		public static void MagickImage_SetReadMask(
					global::System.IntPtr Instance, 
					global::System.IntPtr image, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_SetReadMask\' from this method. Please look for" +
					" this method in build warnings for more details. ");
		}

		public static void MagickImage_SetWriteMask(
					global::System.IntPtr Instance, 
					global::System.IntPtr image, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_SetWriteMask\' from this method. Please look fo" +
					"r this method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_Shade(
					global::System.IntPtr Instance, 
					double azimuth, 
					double elevation, 
					int colorShading, 
					global::System.UIntPtr channels, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_Shade\' from this method. Please look for this " +
					"method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_Shadow(
					global::System.IntPtr Instance, 
					global::System.IntPtr x, 
					global::System.IntPtr y, 
					double sigma, 
					double alphaPercentage, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_Shadow\' from this method. Please look for this" +
					" method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_Sharpen(
					global::System.IntPtr Instance, 
					double radius, 
					double sigma, 
					global::System.UIntPtr channel, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_Sharpen\' from this method. Please look for thi" +
					"s method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_Shave(
					global::System.IntPtr Instance, 
					global::System.UIntPtr leftRight, 
					global::System.UIntPtr topBottom, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_Shave\' from this method. Please look for this " +
					"method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_Shear(
					global::System.IntPtr Instance, 
					double xAngle, 
					double yAngle, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_Shear\' from this method. Please look for this " +
					"method in build warnings for more details. ");
		}

		public static void MagickImage_SigmoidalContrast(
					global::System.IntPtr Instance, 
					int sharpen, 
					double contrast, 
					double midpoint, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_SigmoidalContrast\' from this method. Please lo" +
					"ok for this method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_SparseColor(
					global::System.IntPtr Instance, 
					global::System.UIntPtr channel, 
					global::System.UIntPtr method, 
					double* values, 
					global::System.UIntPtr length, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_SparseColor\' from this method. Please look for" +
					" this method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_Sketch(
					global::System.IntPtr Instance, 
					double radius, 
					double sigma, 
					double angle, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_Sketch\' from this method. Please look for this" +
					" method in build warnings for more details. ");
		}

		public static void MagickImage_Solarize(
					global::System.IntPtr Instance, 
					double factor, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_Solarize\' from this method. Please look for th" +
					"is method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_Splice(
					global::System.IntPtr Instance, 
					global::System.IntPtr geometry, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_Splice\' from this method. Please look for this" +
					" method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_Spread(
					global::System.IntPtr Instance, 
					global::System.UIntPtr method, 
					double radius, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_Spread\' from this method. Please look for this" +
					" method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_Statistic(
					global::System.IntPtr Instance, 
					global::System.UIntPtr type, 
					global::System.UIntPtr width, 
					global::System.UIntPtr height, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_Statistic\' from this method. Please look for t" +
					"his method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_Statistics(
					global::System.IntPtr Instance, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_Statistics\' from this method. Please look for " +
					"this method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_Stegano(
					global::System.IntPtr Instance, 
					global::System.IntPtr watermark, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_Stegano\' from this method. Please look for thi" +
					"s method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_Stereo(
					global::System.IntPtr Instance, 
					global::System.IntPtr rightImage, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_Stereo\' from this method. Please look for this" +
					" method in build warnings for more details. ");
		}

		public static void MagickImage_Strip(
					global::System.IntPtr Instance, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_Strip\' from this method. Please look for this " +
					"method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_SubImageSearch(
					global::System.IntPtr Instance, 
					global::System.IntPtr reference, 
					global::System.UIntPtr metric, 
					double similarityThreshold, 
					global::System.IntPtr offset, 
					double* similarityMetric, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_SubImageSearch\' from this method. Please look " +
					"for this method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_Swirl(
					global::System.IntPtr Instance, 
					global::System.UIntPtr method, 
					double degrees, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_Swirl\' from this method. Please look for this " +
					"method in build warnings for more details. ");
		}

		public static void MagickImage_Texture(
					global::System.IntPtr Instance, 
					global::System.IntPtr image, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_Texture\' from this method. Please look for thi" +
					"s method in build warnings for more details. ");
		}

		public static void MagickImage_Threshold(
					global::System.IntPtr Instance, 
					double threshold, 
					global::System.UIntPtr channels, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_Threshold\' from this method. Please look for t" +
					"his method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_Thumbnail(
					global::System.IntPtr Instance, 
					global::System.IntPtr geometry, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_Thumbnail\' from this method. Please look for t" +
					"his method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_Tint(
					global::System.IntPtr Instance, 
					global::System.IntPtr opacity, 
					global::System.IntPtr tint, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_Tint\' from this method. Please look for this m" +
					"ethod in build warnings for more details. ");
		}

		public static void MagickImage_Transparent(
					global::System.IntPtr Instance, 
					global::System.IntPtr color, 
					int invert, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_Transparent\' from this method. Please look for" +
					" this method in build warnings for more details. ");
		}

		public static void MagickImage_TransparentChroma(
					global::System.IntPtr Instance, 
					global::System.IntPtr colorLow, 
					global::System.IntPtr colorHigh, 
					int invert, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_TransparentChroma\' from this method. Please lo" +
					"ok for this method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_Transpose(
					global::System.IntPtr Instance, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_Transpose\' from this method. Please look for t" +
					"his method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_Transverse(
					global::System.IntPtr Instance, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_Transverse\' from this method. Please look for " +
					"this method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_Trim(
					global::System.IntPtr Instance, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_Trim\' from this method. Please look for this m" +
					"ethod in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_UniqueColors(
					global::System.IntPtr Instance, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_UniqueColors\' from this method. Please look fo" +
					"r this method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_UnsharpMask(
					global::System.IntPtr Instance, 
					double radius, 
					double sigma, 
					double amount, 
					double threshold, 
					global::System.UIntPtr channels, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_UnsharpMask\' from this method. Please look for" +
					" this method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_Vignette(
					global::System.IntPtr Instance, 
					double radius, 
					double sigma, 
					global::System.IntPtr x, 
					global::System.IntPtr y, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_Vignette\' from this method. Please look for th" +
					"is method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_Wave(
					global::System.IntPtr Instance, 
					global::System.UIntPtr method, 
					double amplitude, 
					double length, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_Wave\' from this method. Please look for this m" +
					"ethod in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_WaveletDenoise(
					global::System.IntPtr Instance, 
					double threshold, 
					double softness, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_WaveletDenoise\' from this method. Please look " +
					"for this method in build warnings for more details. ");
		}

		public static void MagickImage_WhiteThreshold(
					global::System.IntPtr Instance, 
					global::System.IntPtr threshold, 
					global::System.UIntPtr channels, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_WhiteThreshold\' from this method. Please look " +
					"for this method in build warnings for more details. ");
		}

		public static void MagickImage_WriteFile(
					global::System.IntPtr Instance, 
					global::System.IntPtr settings, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_WriteFile\' from this method. Please look for t" +
					"his method in build warnings for more details. ");
		}

		public static void MagickImage_WriteStream(
					global::System.IntPtr Instance, 
					global::System.IntPtr settings, 
					void* writer, 
					void* seeker, 
					void* teller, 
					void* reader, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImage_WriteStream\' from this method. Please look for" +
					" this method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImageCollection_Append(
					global::System.IntPtr image, 
					int stack, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImageCollection_Append\' from this method. Please loo" +
					"k for this method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImageCollection_Coalesce(
					global::System.IntPtr image, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImageCollection_Coalesce\' from this method. Please l" +
					"ook for this method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImageCollection_Combine(
					global::System.IntPtr image, 
					global::System.UIntPtr colorSpace, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImageCollection_Combine\' from this method. Please lo" +
					"ok for this method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImageCollection_Complex(
					global::System.IntPtr image, 
					global::System.UIntPtr complexOperator, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImageCollection_Complex\' from this method. Please lo" +
					"ok for this method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImageCollection_Deconstruct(
					global::System.IntPtr image, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImageCollection_Deconstruct\' from this method. Pleas" +
					"e look for this method in build warnings for more details. ");
		}

		public static void MagickImageCollection_Dispose(global::System.IntPtr value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImageCollection_Dispose\' from this method. Please lo" +
					"ok for this method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImageCollection_Evaluate(
					global::System.IntPtr image, 
					global::System.UIntPtr evaluateOperator, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImageCollection_Evaluate\' from this method. Please l" +
					"ook for this method in build warnings for more details. ");
		}

		public static void MagickImageCollection_Map(
					global::System.IntPtr image, 
					global::System.IntPtr settings, 
					global::System.IntPtr remapImage, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImageCollection_Map\' from this method. Please look f" +
					"or this method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImageCollection_Merge(
					global::System.IntPtr image, 
					global::System.UIntPtr method, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImageCollection_Merge\' from this method. Please look" +
					" for this method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImageCollection_Montage(
					global::System.IntPtr image, 
					global::System.IntPtr settings, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImageCollection_Montage\' from this method. Please lo" +
					"ok for this method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImageCollection_Morph(
					global::System.IntPtr image, 
					global::System.UIntPtr frames, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImageCollection_Morph\' from this method. Please look" +
					" for this method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImageCollection_Optimize(
					global::System.IntPtr image, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImageCollection_Optimize\' from this method. Please l" +
					"ook for this method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImageCollection_OptimizePlus(
					global::System.IntPtr image, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImageCollection_OptimizePlus\' from this method. Plea" +
					"se look for this method in build warnings for more details. ");
		}

		public static void MagickImageCollection_OptimizeTransparency(
					global::System.IntPtr image, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImageCollection_OptimizeTransparency\' from this meth" +
					"od. Please look for this method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImageCollection_Polynomial(
					global::System.IntPtr image, 
					double* terms, 
					global::System.UIntPtr length, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImageCollection_Polynomial\' from this method. Please" +
					" look for this method in build warnings for more details. ");
		}

		public static void MagickImageCollection_Quantize(
					global::System.IntPtr image, 
					global::System.IntPtr settings, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImageCollection_Quantize\' from this method. Please l" +
					"ook for this method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImageCollection_ReadBlob(
					global::System.IntPtr settings, 
					byte* data, 
					global::System.UIntPtr offset, 
					global::System.UIntPtr length, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImageCollection_ReadBlob\' from this method. Please l" +
					"ook for this method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImageCollection_ReadFile(
					global::System.IntPtr settings, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImageCollection_ReadFile\' from this method. Please l" +
					"ook for this method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImageCollection_ReadStream(
					global::System.IntPtr settings, 
					void* reader, 
					void* seeker, 
					void* teller, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImageCollection_ReadStream\' from this method. Please" +
					" look for this method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImageCollection_Smush(
					global::System.IntPtr image, 
					global::System.IntPtr offset, 
					int stack, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImageCollection_Smush\' from this method. Please look" +
					" for this method in build warnings for more details. ");
		}

		public static void MagickImageCollection_WriteFile(
					global::System.IntPtr image, 
					global::System.IntPtr settings, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImageCollection_WriteFile\' from this method. Please " +
					"look for this method in build warnings for more details. ");
		}

		public static void MagickImageCollection_WriteStream(
					global::System.IntPtr image, 
					global::System.IntPtr settings, 
					void* writer, 
					void* seeker, 
					void* teller, 
					void* reader, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickImageCollection_WriteStream\' from this method. Pleas" +
					"e look for this method in build warnings for more details. ");
		}

		public static global::System.IntPtr DoubleMatrix_Create(
					double* values, 
					global::System.UIntPtr order)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!DoubleMatrix_Create\' from this method. Please look for thi" +
					"s method in build warnings for more details. ");
		}

		public static void DoubleMatrix_Dispose(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!DoubleMatrix_Dispose\' from this method. Please look for th" +
					"is method in build warnings for more details. ");
		}

		public static global::System.IntPtr OpenCL_GetDevices(global::System.UIntPtr* length)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!OpenCL_GetDevices\' from this method. Please look for this " +
					"method in build warnings for more details. ");
		}

		public static global::System.IntPtr OpenCL_GetDevice(
					global::System.IntPtr list, 
					global::System.UIntPtr index)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!OpenCL_GetDevice\' from this method. Please look for this m" +
					"ethod in build warnings for more details. ");
		}

		public static int OpenCL_SetEnabled(int value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!OpenCL_SetEnabled\' from this method. Please look for this " +
					"method in build warnings for more details. ");
		}

		public static double OpenCLDevice_BenchmarkScore_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!OpenCLDevice_BenchmarkScore_Get\' from this method. Please " +
					"look for this method in build warnings for more details. ");
		}

		public static global::System.UIntPtr OpenCLDevice_DeviceType_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!OpenCLDevice_DeviceType_Get\' from this method. Please look" +
					" for this method in build warnings for more details. ");
		}

		public static int OpenCLDevice_IsEnabled_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!OpenCLDevice_IsEnabled_Get\' from this method. Please look " +
					"for this method in build warnings for more details. ");
		}

		public static void OpenCLDevice_IsEnabled_Set(
					global::System.IntPtr instance, 
					int value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!OpenCLDevice_IsEnabled_Set\' from this method. Please look " +
					"for this method in build warnings for more details. ");
		}

		public static global::System.IntPtr OpenCLDevice_Name_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!OpenCLDevice_Name_Get\' from this method. Please look for t" +
					"his method in build warnings for more details. ");
		}

		public static global::System.IntPtr OpenCLDevice_Version_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!OpenCLDevice_Version_Get\' from this method. Please look fo" +
					"r this method in build warnings for more details. ");
		}

		public static global::System.IntPtr OpenCLDevice_GetKernelProfileRecords(
					global::System.IntPtr Instance, 
					global::System.UIntPtr* length)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!OpenCLDevice_GetKernelProfileRecords\' from this method. Pl" +
					"ease look for this method in build warnings for more details. ");
		}

		public static global::System.IntPtr OpenCLDevice_GetKernelProfileRecord(
					global::System.IntPtr list, 
					global::System.UIntPtr index)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!OpenCLDevice_GetKernelProfileRecord\' from this method. Ple" +
					"ase look for this method in build warnings for more details. ");
		}

		public static void OpenCLDevice_SetProfileKernels(
					global::System.IntPtr Instance, 
					int value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!OpenCLDevice_SetProfileKernels\' from this method. Please l" +
					"ook for this method in build warnings for more details. ");
		}

		public static long OpenCLKernelProfileRecord_Count_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!OpenCLKernelProfileRecord_Count_Get\' from this method. Ple" +
					"ase look for this method in build warnings for more details. ");
		}

		public static long OpenCLKernelProfileRecord_MaximumDuration_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!OpenCLKernelProfileRecord_MaximumDuration_Get\' from this m" +
					"ethod. Please look for this method in build warnings for more details. ");
		}

		public static long OpenCLKernelProfileRecord_MinimumDuration_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!OpenCLKernelProfileRecord_MinimumDuration_Get\' from this m" +
					"ethod. Please look for this method in build warnings for more details. ");
		}

		public static global::System.IntPtr OpenCLKernelProfileRecord_Name_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!OpenCLKernelProfileRecord_Name_Get\' from this method. Plea" +
					"se look for this method in build warnings for more details. ");
		}

		public static long OpenCLKernelProfileRecord_TotalDuration_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!OpenCLKernelProfileRecord_TotalDuration_Get\' from this met" +
					"hod. Please look for this method in build warnings for more details. ");
		}

		public static global::System.IntPtr PixelCollection_Create(
					global::System.IntPtr image, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!PixelCollection_Create\' from this method. Please look for " +
					"this method in build warnings for more details. ");
		}

		public static void PixelCollection_Dispose(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!PixelCollection_Dispose\' from this method. Please look for" +
					" this method in build warnings for more details. ");
		}

		public static global::System.IntPtr PixelCollection_GetArea(
					global::System.IntPtr Instance, 
					global::System.UIntPtr x, 
					global::System.UIntPtr y, 
					global::System.UIntPtr width, 
					global::System.UIntPtr height, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!PixelCollection_GetArea\' from this method. Please look for" +
					" this method in build warnings for more details. ");
		}

		public static void PixelCollection_SetArea(
					global::System.IntPtr Instance, 
					global::System.UIntPtr x, 
					global::System.UIntPtr y, 
					global::System.UIntPtr width, 
					global::System.UIntPtr height, 
					ushort* values, 
					global::System.UIntPtr length, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!PixelCollection_SetArea\' from this method. Please look for" +
					" this method in build warnings for more details. ");
		}

		public static global::System.IntPtr PixelCollection_ToByteArray(
					global::System.IntPtr Instance, 
					global::System.UIntPtr x, 
					global::System.UIntPtr y, 
					global::System.UIntPtr width, 
					global::System.UIntPtr height, 
					global::System.IntPtr mapping, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!PixelCollection_ToByteArray\' from this method. Please look" +
					" for this method in build warnings for more details. ");
		}

		public static global::System.IntPtr PixelCollection_ToShortArray(
					global::System.IntPtr Instance, 
					global::System.UIntPtr x, 
					global::System.UIntPtr y, 
					global::System.UIntPtr width, 
					global::System.UIntPtr height, 
					global::System.IntPtr mapping, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!PixelCollection_ToShortArray\' from this method. Please loo" +
					"k for this method in build warnings for more details. ");
		}

		public static global::System.UIntPtr Quantum_Depth_Get()
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!Quantum_Depth_Get\' from this method. Please look for this " +
					"method in build warnings for more details. ");
		}

		public static ushort Quantum_Max_Get()
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!Quantum_Max_Get\' from this method. Please look for this me" +
					"thod in build warnings for more details. ");
		}

		public static byte Quantum_ScaleToByte(ushort value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!Quantum_ScaleToByte\' from this method. Please look for thi" +
					"s method in build warnings for more details. ");
		}

		public static ulong ResourceLimits_Area_Get()
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!ResourceLimits_Area_Get\' from this method. Please look for" +
					" this method in build warnings for more details. ");
		}

		public static void ResourceLimits_Area_Set(ulong value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!ResourceLimits_Area_Set\' from this method. Please look for" +
					" this method in build warnings for more details. ");
		}

		public static ulong ResourceLimits_Disk_Get()
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!ResourceLimits_Disk_Get\' from this method. Please look for" +
					" this method in build warnings for more details. ");
		}

		public static void ResourceLimits_Disk_Set(ulong value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!ResourceLimits_Disk_Set\' from this method. Please look for" +
					" this method in build warnings for more details. ");
		}

		public static ulong ResourceLimits_Height_Get()
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!ResourceLimits_Height_Get\' from this method. Please look f" +
					"or this method in build warnings for more details. ");
		}

		public static void ResourceLimits_Height_Set(ulong value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!ResourceLimits_Height_Set\' from this method. Please look f" +
					"or this method in build warnings for more details. ");
		}

		public static ulong ResourceLimits_ListLength_Get()
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!ResourceLimits_ListLength_Get\' from this method. Please lo" +
					"ok for this method in build warnings for more details. ");
		}

		public static void ResourceLimits_ListLength_Set(ulong value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!ResourceLimits_ListLength_Set\' from this method. Please lo" +
					"ok for this method in build warnings for more details. ");
		}

		public static ulong ResourceLimits_Memory_Get()
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!ResourceLimits_Memory_Get\' from this method. Please look f" +
					"or this method in build warnings for more details. ");
		}

		public static void ResourceLimits_Memory_Set(ulong value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!ResourceLimits_Memory_Set\' from this method. Please look f" +
					"or this method in build warnings for more details. ");
		}

		public static ulong ResourceLimits_Thread_Get()
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!ResourceLimits_Thread_Get\' from this method. Please look f" +
					"or this method in build warnings for more details. ");
		}

		public static void ResourceLimits_Thread_Set(ulong value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!ResourceLimits_Thread_Set\' from this method. Please look f" +
					"or this method in build warnings for more details. ");
		}

		public static ulong ResourceLimits_Throttle_Get()
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!ResourceLimits_Throttle_Get\' from this method. Please look" +
					" for this method in build warnings for more details. ");
		}

		public static void ResourceLimits_Throttle_Set(ulong value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!ResourceLimits_Throttle_Set\' from this method. Please look" +
					" for this method in build warnings for more details. ");
		}

		public static ulong ResourceLimits_Width_Get()
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!ResourceLimits_Width_Get\' from this method. Please look fo" +
					"r this method in build warnings for more details. ");
		}

		public static void ResourceLimits_Width_Set(ulong value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!ResourceLimits_Width_Set\' from this method. Please look fo" +
					"r this method in build warnings for more details. ");
		}

		public static void ResourceLimits_LimitMemory(double percentage)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!ResourceLimits_LimitMemory\' from this method. Please look " +
					"for this method in build warnings for more details. ");
		}

		public static global::System.IntPtr DrawingSettings_Create()
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!DrawingSettings_Create\' from this method. Please look for " +
					"this method in build warnings for more details. ");
		}

		public static void DrawingSettings_Dispose(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!DrawingSettings_Dispose\' from this method. Please look for" +
					" this method in build warnings for more details. ");
		}

		public static global::System.IntPtr DrawingSettings_BorderColor_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!DrawingSettings_BorderColor_Get\' from this method. Please " +
					"look for this method in build warnings for more details. ");
		}

		public static void DrawingSettings_BorderColor_Set(
					global::System.IntPtr instance, 
					global::System.IntPtr value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!DrawingSettings_BorderColor_Set\' from this method. Please " +
					"look for this method in build warnings for more details. ");
		}

		public static global::System.IntPtr DrawingSettings_FillColor_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!DrawingSettings_FillColor_Get\' from this method. Please lo" +
					"ok for this method in build warnings for more details. ");
		}

		public static void DrawingSettings_FillColor_Set(
					global::System.IntPtr instance, 
					global::System.IntPtr value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!DrawingSettings_FillColor_Set\' from this method. Please lo" +
					"ok for this method in build warnings for more details. ");
		}

		public static global::System.UIntPtr DrawingSettings_FillRule_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!DrawingSettings_FillRule_Get\' from this method. Please loo" +
					"k for this method in build warnings for more details. ");
		}

		public static void DrawingSettings_FillRule_Set(
					global::System.IntPtr instance, 
					global::System.UIntPtr value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!DrawingSettings_FillRule_Set\' from this method. Please loo" +
					"k for this method in build warnings for more details. ");
		}

		public static global::System.IntPtr DrawingSettings_Font_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!DrawingSettings_Font_Get\' from this method. Please look fo" +
					"r this method in build warnings for more details. ");
		}

		public static void DrawingSettings_Font_Set(
					global::System.IntPtr instance, 
					global::System.IntPtr value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!DrawingSettings_Font_Set\' from this method. Please look fo" +
					"r this method in build warnings for more details. ");
		}

		public static global::System.IntPtr DrawingSettings_FontFamily_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!DrawingSettings_FontFamily_Get\' from this method. Please l" +
					"ook for this method in build warnings for more details. ");
		}

		public static void DrawingSettings_FontFamily_Set(
					global::System.IntPtr instance, 
					global::System.IntPtr value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!DrawingSettings_FontFamily_Set\' from this method. Please l" +
					"ook for this method in build warnings for more details. ");
		}

		public static double DrawingSettings_FontPointsize_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!DrawingSettings_FontPointsize_Get\' from this method. Pleas" +
					"e look for this method in build warnings for more details. ");
		}

		public static void DrawingSettings_FontPointsize_Set(
					global::System.IntPtr instance, 
					double value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!DrawingSettings_FontPointsize_Set\' from this method. Pleas" +
					"e look for this method in build warnings for more details. ");
		}

		public static global::System.UIntPtr DrawingSettings_FontStyle_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!DrawingSettings_FontStyle_Get\' from this method. Please lo" +
					"ok for this method in build warnings for more details. ");
		}

		public static void DrawingSettings_FontStyle_Set(
					global::System.IntPtr instance, 
					global::System.UIntPtr value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!DrawingSettings_FontStyle_Set\' from this method. Please lo" +
					"ok for this method in build warnings for more details. ");
		}

		public static global::System.UIntPtr DrawingSettings_FontWeight_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!DrawingSettings_FontWeight_Get\' from this method. Please l" +
					"ook for this method in build warnings for more details. ");
		}

		public static void DrawingSettings_FontWeight_Set(
					global::System.IntPtr instance, 
					global::System.UIntPtr value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!DrawingSettings_FontWeight_Set\' from this method. Please l" +
					"ook for this method in build warnings for more details. ");
		}

		public static int DrawingSettings_StrokeAntiAlias_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!DrawingSettings_StrokeAntiAlias_Get\' from this method. Ple" +
					"ase look for this method in build warnings for more details. ");
		}

		public static void DrawingSettings_StrokeAntiAlias_Set(
					global::System.IntPtr instance, 
					int value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!DrawingSettings_StrokeAntiAlias_Set\' from this method. Ple" +
					"ase look for this method in build warnings for more details. ");
		}

		public static global::System.IntPtr DrawingSettings_StrokeColor_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!DrawingSettings_StrokeColor_Get\' from this method. Please " +
					"look for this method in build warnings for more details. ");
		}

		public static void DrawingSettings_StrokeColor_Set(
					global::System.IntPtr instance, 
					global::System.IntPtr value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!DrawingSettings_StrokeColor_Set\' from this method. Please " +
					"look for this method in build warnings for more details. ");
		}

		public static double DrawingSettings_StrokeDashOffset_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!DrawingSettings_StrokeDashOffset_Get\' from this method. Pl" +
					"ease look for this method in build warnings for more details. ");
		}

		public static void DrawingSettings_StrokeDashOffset_Set(
					global::System.IntPtr instance, 
					double value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!DrawingSettings_StrokeDashOffset_Set\' from this method. Pl" +
					"ease look for this method in build warnings for more details. ");
		}

		public static global::System.UIntPtr DrawingSettings_StrokeLineCap_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!DrawingSettings_StrokeLineCap_Get\' from this method. Pleas" +
					"e look for this method in build warnings for more details. ");
		}

		public static void DrawingSettings_StrokeLineCap_Set(
					global::System.IntPtr instance, 
					global::System.UIntPtr value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!DrawingSettings_StrokeLineCap_Set\' from this method. Pleas" +
					"e look for this method in build warnings for more details. ");
		}

		public static global::System.UIntPtr DrawingSettings_StrokeLineJoin_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!DrawingSettings_StrokeLineJoin_Get\' from this method. Plea" +
					"se look for this method in build warnings for more details. ");
		}

		public static void DrawingSettings_StrokeLineJoin_Set(
					global::System.IntPtr instance, 
					global::System.UIntPtr value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!DrawingSettings_StrokeLineJoin_Set\' from this method. Plea" +
					"se look for this method in build warnings for more details. ");
		}

		public static global::System.UIntPtr DrawingSettings_StrokeMiterLimit_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!DrawingSettings_StrokeMiterLimit_Get\' from this method. Pl" +
					"ease look for this method in build warnings for more details. ");
		}

		public static void DrawingSettings_StrokeMiterLimit_Set(
					global::System.IntPtr instance, 
					global::System.UIntPtr value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!DrawingSettings_StrokeMiterLimit_Set\' from this method. Pl" +
					"ease look for this method in build warnings for more details. ");
		}

		public static double DrawingSettings_StrokeWidth_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!DrawingSettings_StrokeWidth_Get\' from this method. Please " +
					"look for this method in build warnings for more details. ");
		}

		public static void DrawingSettings_StrokeWidth_Set(
					global::System.IntPtr instance, 
					double value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!DrawingSettings_StrokeWidth_Set\' from this method. Please " +
					"look for this method in build warnings for more details. ");
		}

		public static int DrawingSettings_TextAntiAlias_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!DrawingSettings_TextAntiAlias_Get\' from this method. Pleas" +
					"e look for this method in build warnings for more details. ");
		}

		public static void DrawingSettings_TextAntiAlias_Set(
					global::System.IntPtr instance, 
					int value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!DrawingSettings_TextAntiAlias_Set\' from this method. Pleas" +
					"e look for this method in build warnings for more details. ");
		}

		public static global::System.UIntPtr DrawingSettings_TextDirection_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!DrawingSettings_TextDirection_Get\' from this method. Pleas" +
					"e look for this method in build warnings for more details. ");
		}

		public static void DrawingSettings_TextDirection_Set(
					global::System.IntPtr instance, 
					global::System.UIntPtr value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!DrawingSettings_TextDirection_Set\' from this method. Pleas" +
					"e look for this method in build warnings for more details. ");
		}

		public static global::System.IntPtr DrawingSettings_TextEncoding_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!DrawingSettings_TextEncoding_Get\' from this method. Please" +
					" look for this method in build warnings for more details. ");
		}

		public static void DrawingSettings_TextEncoding_Set(
					global::System.IntPtr instance, 
					global::System.IntPtr value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!DrawingSettings_TextEncoding_Set\' from this method. Please" +
					" look for this method in build warnings for more details. ");
		}

		public static global::System.UIntPtr DrawingSettings_TextGravity_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!DrawingSettings_TextGravity_Get\' from this method. Please " +
					"look for this method in build warnings for more details. ");
		}

		public static void DrawingSettings_TextGravity_Set(
					global::System.IntPtr instance, 
					global::System.UIntPtr value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!DrawingSettings_TextGravity_Set\' from this method. Please " +
					"look for this method in build warnings for more details. ");
		}

		public static double DrawingSettings_TextInterlineSpacing_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!DrawingSettings_TextInterlineSpacing_Get\' from this method" +
					". Please look for this method in build warnings for more details. ");
		}

		public static void DrawingSettings_TextInterlineSpacing_Set(
					global::System.IntPtr instance, 
					double value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!DrawingSettings_TextInterlineSpacing_Set\' from this method" +
					". Please look for this method in build warnings for more details. ");
		}

		public static double DrawingSettings_TextInterwordSpacing_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!DrawingSettings_TextInterwordSpacing_Get\' from this method" +
					". Please look for this method in build warnings for more details. ");
		}

		public static void DrawingSettings_TextInterwordSpacing_Set(
					global::System.IntPtr instance, 
					double value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!DrawingSettings_TextInterwordSpacing_Set\' from this method" +
					". Please look for this method in build warnings for more details. ");
		}

		public static double DrawingSettings_TextKerning_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!DrawingSettings_TextKerning_Get\' from this method. Please " +
					"look for this method in build warnings for more details. ");
		}

		public static void DrawingSettings_TextKerning_Set(
					global::System.IntPtr instance, 
					double value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!DrawingSettings_TextKerning_Set\' from this method. Please " +
					"look for this method in build warnings for more details. ");
		}

		public static global::System.IntPtr DrawingSettings_TextUnderColor_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!DrawingSettings_TextUnderColor_Get\' from this method. Plea" +
					"se look for this method in build warnings for more details. ");
		}

		public static void DrawingSettings_TextUnderColor_Set(
					global::System.IntPtr instance, 
					global::System.IntPtr value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!DrawingSettings_TextUnderColor_Set\' from this method. Plea" +
					"se look for this method in build warnings for more details. ");
		}

		public static void DrawingSettings_SetFillPattern(
					global::System.IntPtr Instance, 
					global::System.IntPtr value, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!DrawingSettings_SetFillPattern\' from this method. Please l" +
					"ook for this method in build warnings for more details. ");
		}

		public static void DrawingSettings_SetAffine(
					global::System.IntPtr Instance, 
					double scaleX, 
					double scaleY, 
					double shearX, 
					double shearY, 
					double translateX, 
					double translateY, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!DrawingSettings_SetAffine\' from this method. Please look f" +
					"or this method in build warnings for more details. ");
		}

		public static void DrawingSettings_SetStrokeDashArray(
					global::System.IntPtr Instance, 
					double* dash, 
					global::System.UIntPtr length)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!DrawingSettings_SetStrokeDashArray\' from this method. Plea" +
					"se look for this method in build warnings for more details. ");
		}

		public static void DrawingSettings_SetStrokePattern(
					global::System.IntPtr Instance, 
					global::System.IntPtr value, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!DrawingSettings_SetStrokePattern\' from this method. Please" +
					" look for this method in build warnings for more details. ");
		}

		public static void DrawingSettings_SetText(
					global::System.IntPtr Instance, 
					global::System.IntPtr value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!DrawingSettings_SetText\' from this method. Please look for" +
					" this method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickSettings_Create()
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickSettings_Create\' from this method. Please look for t" +
					"his method in build warnings for more details. ");
		}

		public static void MagickSettings_Dispose(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickSettings_Dispose\' from this method. Please look for " +
					"this method in build warnings for more details. ");
		}

		public static int MagickSettings_AntiAlias_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickSettings_AntiAlias_Get\' from this method. Please loo" +
					"k for this method in build warnings for more details. ");
		}

		public static void MagickSettings_AntiAlias_Set(
					global::System.IntPtr instance, 
					int value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickSettings_AntiAlias_Set\' from this method. Please loo" +
					"k for this method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickSettings_BackgroundColor_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickSettings_BackgroundColor_Get\' from this method. Plea" +
					"se look for this method in build warnings for more details. ");
		}

		public static void MagickSettings_BackgroundColor_Set(
					global::System.IntPtr instance, 
					global::System.IntPtr value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickSettings_BackgroundColor_Set\' from this method. Plea" +
					"se look for this method in build warnings for more details. ");
		}

		public static global::System.UIntPtr MagickSettings_ColorSpace_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickSettings_ColorSpace_Get\' from this method. Please lo" +
					"ok for this method in build warnings for more details. ");
		}

		public static void MagickSettings_ColorSpace_Set(
					global::System.IntPtr instance, 
					global::System.UIntPtr value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickSettings_ColorSpace_Set\' from this method. Please lo" +
					"ok for this method in build warnings for more details. ");
		}

		public static global::System.UIntPtr MagickSettings_ColorType_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickSettings_ColorType_Get\' from this method. Please loo" +
					"k for this method in build warnings for more details. ");
		}

		public static void MagickSettings_ColorType_Set(
					global::System.IntPtr instance, 
					global::System.UIntPtr value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickSettings_ColorType_Set\' from this method. Please loo" +
					"k for this method in build warnings for more details. ");
		}

		public static global::System.UIntPtr MagickSettings_Compression_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickSettings_Compression_Get\' from this method. Please l" +
					"ook for this method in build warnings for more details. ");
		}

		public static void MagickSettings_Compression_Set(
					global::System.IntPtr instance, 
					global::System.UIntPtr value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickSettings_Compression_Set\' from this method. Please l" +
					"ook for this method in build warnings for more details. ");
		}

		public static int MagickSettings_Debug_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickSettings_Debug_Get\' from this method. Please look fo" +
					"r this method in build warnings for more details. ");
		}

		public static void MagickSettings_Debug_Set(
					global::System.IntPtr instance, 
					int value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickSettings_Debug_Set\' from this method. Please look fo" +
					"r this method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickSettings_Density_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickSettings_Density_Get\' from this method. Please look " +
					"for this method in build warnings for more details. ");
		}

		public static void MagickSettings_Density_Set(
					global::System.IntPtr instance, 
					global::System.IntPtr value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickSettings_Density_Set\' from this method. Please look " +
					"for this method in build warnings for more details. ");
		}

		public static global::System.UIntPtr MagickSettings_Depth_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickSettings_Depth_Get\' from this method. Please look fo" +
					"r this method in build warnings for more details. ");
		}

		public static void MagickSettings_Depth_Set(
					global::System.IntPtr instance, 
					global::System.UIntPtr value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickSettings_Depth_Set\' from this method. Please look fo" +
					"r this method in build warnings for more details. ");
		}

		public static global::System.UIntPtr MagickSettings_Endian_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickSettings_Endian_Get\' from this method. Please look f" +
					"or this method in build warnings for more details. ");
		}

		public static void MagickSettings_Endian_Set(
					global::System.IntPtr instance, 
					global::System.UIntPtr value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickSettings_Endian_Set\' from this method. Please look f" +
					"or this method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickSettings_Extract_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickSettings_Extract_Get\' from this method. Please look " +
					"for this method in build warnings for more details. ");
		}

		public static void MagickSettings_Extract_Set(
					global::System.IntPtr instance, 
					global::System.IntPtr value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickSettings_Extract_Set\' from this method. Please look " +
					"for this method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickSettings_Format_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickSettings_Format_Get\' from this method. Please look f" +
					"or this method in build warnings for more details. ");
		}

		public static void MagickSettings_Format_Set(
					global::System.IntPtr instance, 
					global::System.IntPtr value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickSettings_Format_Set\' from this method. Please look f" +
					"or this method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickSettings_Font_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickSettings_Font_Get\' from this method. Please look for" +
					" this method in build warnings for more details. ");
		}

		public static void MagickSettings_Font_Set(
					global::System.IntPtr instance, 
					global::System.IntPtr value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickSettings_Font_Set\' from this method. Please look for" +
					" this method in build warnings for more details. ");
		}

		public static double MagickSettings_FontPointsize_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickSettings_FontPointsize_Get\' from this method. Please" +
					" look for this method in build warnings for more details. ");
		}

		public static void MagickSettings_FontPointsize_Set(
					global::System.IntPtr instance, 
					double value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickSettings_FontPointsize_Set\' from this method. Please" +
					" look for this method in build warnings for more details. ");
		}

		public static int MagickSettings_Monochrome_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickSettings_Monochrome_Get\' from this method. Please lo" +
					"ok for this method in build warnings for more details. ");
		}

		public static void MagickSettings_Monochrome_Set(
					global::System.IntPtr instance, 
					int value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickSettings_Monochrome_Set\' from this method. Please lo" +
					"ok for this method in build warnings for more details. ");
		}

		public static global::System.UIntPtr MagickSettings_Interlace_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickSettings_Interlace_Get\' from this method. Please loo" +
					"k for this method in build warnings for more details. ");
		}

		public static void MagickSettings_Interlace_Set(
					global::System.IntPtr instance, 
					global::System.UIntPtr value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickSettings_Interlace_Set\' from this method. Please loo" +
					"k for this method in build warnings for more details. ");
		}

		public static int MagickSettings_Verbose_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickSettings_Verbose_Get\' from this method. Please look " +
					"for this method in build warnings for more details. ");
		}

		public static void MagickSettings_Verbose_Set(
					global::System.IntPtr instance, 
					int value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickSettings_Verbose_Set\' from this method. Please look " +
					"for this method in build warnings for more details. ");
		}

		public static void MagickSettings_SetColorFuzz(
					global::System.IntPtr Instance, 
					double value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickSettings_SetColorFuzz\' from this method. Please look" +
					" for this method in build warnings for more details. ");
		}

		public static void MagickSettings_SetFileName(
					global::System.IntPtr Instance, 
					global::System.IntPtr value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickSettings_SetFileName\' from this method. Please look " +
					"for this method in build warnings for more details. ");
		}

		public static void MagickSettings_SetNumberScenes(
					global::System.IntPtr Instance, 
					global::System.UIntPtr value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickSettings_SetNumberScenes\' from this method. Please l" +
					"ook for this method in build warnings for more details. ");
		}

		public static void MagickSettings_SetOption(
					global::System.IntPtr Instance, 
					global::System.IntPtr key, 
					global::System.IntPtr value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickSettings_SetOption\' from this method. Please look fo" +
					"r this method in build warnings for more details. ");
		}

		public static void MagickSettings_SetPage(
					global::System.IntPtr Instance, 
					global::System.IntPtr value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickSettings_SetPage\' from this method. Please look for " +
					"this method in build warnings for more details. ");
		}

		public static void MagickSettings_SetPing(
					global::System.IntPtr Instance, 
					int value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickSettings_SetPing\' from this method. Please look for " +
					"this method in build warnings for more details. ");
		}

		public static void MagickSettings_SetQuality(
					global::System.IntPtr Instance, 
					global::System.UIntPtr value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickSettings_SetQuality\' from this method. Please look f" +
					"or this method in build warnings for more details. ");
		}

		public static void MagickSettings_SetScenes(
					global::System.IntPtr Instance, 
					global::System.IntPtr value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickSettings_SetScenes\' from this method. Please look fo" +
					"r this method in build warnings for more details. ");
		}

		public static void MagickSettings_SetScene(
					global::System.IntPtr Instance, 
					global::System.UIntPtr value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickSettings_SetScene\' from this method. Please look for" +
					" this method in build warnings for more details. ");
		}

		public static void MagickSettings_SetSize(
					global::System.IntPtr Instance, 
					global::System.IntPtr value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickSettings_SetSize\' from this method. Please look for " +
					"this method in build warnings for more details. ");
		}

		public static global::System.IntPtr MontageSettings_Create()
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MontageSettings_Create\' from this method. Please look for " +
					"this method in build warnings for more details. ");
		}

		public static void MontageSettings_Dispose(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MontageSettings_Dispose\' from this method. Please look for" +
					" this method in build warnings for more details. ");
		}

		public static void MontageSettings_SetBackgroundColor(
					global::System.IntPtr Instance, 
					global::System.IntPtr value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MontageSettings_SetBackgroundColor\' from this method. Plea" +
					"se look for this method in build warnings for more details. ");
		}

		public static void MontageSettings_SetBorderColor(
					global::System.IntPtr Instance, 
					global::System.IntPtr value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MontageSettings_SetBorderColor\' from this method. Please l" +
					"ook for this method in build warnings for more details. ");
		}

		public static void MontageSettings_SetBorderWidth(
					global::System.IntPtr Instance, 
					global::System.UIntPtr value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MontageSettings_SetBorderWidth\' from this method. Please l" +
					"ook for this method in build warnings for more details. ");
		}

		public static void MontageSettings_SetFillColor(
					global::System.IntPtr Instance, 
					global::System.IntPtr value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MontageSettings_SetFillColor\' from this method. Please loo" +
					"k for this method in build warnings for more details. ");
		}

		public static void MontageSettings_SetFont(
					global::System.IntPtr Instance, 
					global::System.IntPtr value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MontageSettings_SetFont\' from this method. Please look for" +
					" this method in build warnings for more details. ");
		}

		public static void MontageSettings_SetFontPointsize(
					global::System.IntPtr Instance, 
					double value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MontageSettings_SetFontPointsize\' from this method. Please" +
					" look for this method in build warnings for more details. ");
		}

		public static void MontageSettings_SetFrameGeometry(
					global::System.IntPtr Instance, 
					global::System.IntPtr value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MontageSettings_SetFrameGeometry\' from this method. Please" +
					" look for this method in build warnings for more details. ");
		}

		public static void MontageSettings_SetGeometry(
					global::System.IntPtr Instance, 
					global::System.IntPtr value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MontageSettings_SetGeometry\' from this method. Please look" +
					" for this method in build warnings for more details. ");
		}

		public static void MontageSettings_SetGravity(
					global::System.IntPtr Instance, 
					global::System.UIntPtr value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MontageSettings_SetGravity\' from this method. Please look " +
					"for this method in build warnings for more details. ");
		}

		public static void MontageSettings_SetShadow(
					global::System.IntPtr Instance, 
					int value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MontageSettings_SetShadow\' from this method. Please look f" +
					"or this method in build warnings for more details. ");
		}

		public static void MontageSettings_SetStrokeColor(
					global::System.IntPtr Instance, 
					global::System.IntPtr value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MontageSettings_SetStrokeColor\' from this method. Please l" +
					"ook for this method in build warnings for more details. ");
		}

		public static void MontageSettings_SetTextureFileName(
					global::System.IntPtr Instance, 
					global::System.IntPtr value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MontageSettings_SetTextureFileName\' from this method. Plea" +
					"se look for this method in build warnings for more details. ");
		}

		public static void MontageSettings_SetTileGeometry(
					global::System.IntPtr Instance, 
					global::System.IntPtr value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MontageSettings_SetTileGeometry\' from this method. Please " +
					"look for this method in build warnings for more details. ");
		}

		public static void MontageSettings_SetTitle(
					global::System.IntPtr Instance, 
					global::System.IntPtr value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MontageSettings_SetTitle\' from this method. Please look fo" +
					"r this method in build warnings for more details. ");
		}

		public static global::System.IntPtr QuantizeSettings_Create()
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!QuantizeSettings_Create\' from this method. Please look for" +
					" this method in build warnings for more details. ");
		}

		public static void QuantizeSettings_Dispose(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!QuantizeSettings_Dispose\' from this method. Please look fo" +
					"r this method in build warnings for more details. ");
		}

		public static void QuantizeSettings_SetColors(
					global::System.IntPtr Instance, 
					global::System.UIntPtr value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!QuantizeSettings_SetColors\' from this method. Please look " +
					"for this method in build warnings for more details. ");
		}

		public static void QuantizeSettings_SetColorSpace(
					global::System.IntPtr Instance, 
					global::System.UIntPtr value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!QuantizeSettings_SetColorSpace\' from this method. Please l" +
					"ook for this method in build warnings for more details. ");
		}

		public static void QuantizeSettings_SetDitherMethod(
					global::System.IntPtr Instance, 
					global::System.UIntPtr value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!QuantizeSettings_SetDitherMethod\' from this method. Please" +
					" look for this method in build warnings for more details. ");
		}

		public static void QuantizeSettings_SetMeasureErrors(
					global::System.IntPtr Instance, 
					int value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!QuantizeSettings_SetMeasureErrors\' from this method. Pleas" +
					"e look for this method in build warnings for more details. ");
		}

		public static void QuantizeSettings_SetTreeDepth(
					global::System.IntPtr Instance, 
					global::System.UIntPtr value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!QuantizeSettings_SetTreeDepth\' from this method. Please lo" +
					"ok for this method in build warnings for more details. ");
		}

		public static global::System.IntPtr ChannelMoments_Centroid_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!ChannelMoments_Centroid_Get\' from this method. Please look" +
					" for this method in build warnings for more details. ");
		}

		public static double ChannelMoments_EllipseAngle_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!ChannelMoments_EllipseAngle_Get\' from this method. Please " +
					"look for this method in build warnings for more details. ");
		}

		public static global::System.IntPtr ChannelMoments_EllipseAxis_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!ChannelMoments_EllipseAxis_Get\' from this method. Please l" +
					"ook for this method in build warnings for more details. ");
		}

		public static double ChannelMoments_EllipseEccentricity_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!ChannelMoments_EllipseEccentricity_Get\' from this method. " +
					"Please look for this method in build warnings for more details. ");
		}

		public static double ChannelMoments_EllipseIntensity_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!ChannelMoments_EllipseIntensity_Get\' from this method. Ple" +
					"ase look for this method in build warnings for more details. ");
		}

		public static double ChannelMoments_GetHuInvariants(
					global::System.IntPtr Instance, 
					global::System.UIntPtr index)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!ChannelMoments_GetHuInvariants\' from this method. Please l" +
					"ook for this method in build warnings for more details. ");
		}

		public static double ChannelPerceptualHash_GetSrgbHuPhash(
					global::System.IntPtr Instance, 
					global::System.UIntPtr index)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!ChannelPerceptualHash_GetSrgbHuPhash\' from this method. Pl" +
					"ease look for this method in build warnings for more details. ");
		}

		public static double ChannelPerceptualHash_GetHclpHuPhash(
					global::System.IntPtr Instance, 
					global::System.UIntPtr index)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!ChannelPerceptualHash_GetHclpHuPhash\' from this method. Pl" +
					"ease look for this method in build warnings for more details. ");
		}

		public static global::System.UIntPtr ChannelStatistics_Depth_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!ChannelStatistics_Depth_Get\' from this method. Please look" +
					" for this method in build warnings for more details. ");
		}

		public static double ChannelStatistics_Entropy_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!ChannelStatistics_Entropy_Get\' from this method. Please lo" +
					"ok for this method in build warnings for more details. ");
		}

		public static double ChannelStatistics_Kurtosis_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!ChannelStatistics_Kurtosis_Get\' from this method. Please l" +
					"ook for this method in build warnings for more details. ");
		}

		public static double ChannelStatistics_Maximum_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!ChannelStatistics_Maximum_Get\' from this method. Please lo" +
					"ok for this method in build warnings for more details. ");
		}

		public static double ChannelStatistics_Mean_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!ChannelStatistics_Mean_Get\' from this method. Please look " +
					"for this method in build warnings for more details. ");
		}

		public static double ChannelStatistics_Minimum_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!ChannelStatistics_Minimum_Get\' from this method. Please lo" +
					"ok for this method in build warnings for more details. ");
		}

		public static double ChannelStatistics_Skewness_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!ChannelStatistics_Skewness_Get\' from this method. Please l" +
					"ook for this method in build warnings for more details. ");
		}

		public static double ChannelStatistics_StandardDeviation_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!ChannelStatistics_StandardDeviation_Get\' from this method." +
					" Please look for this method in build warnings for more details. ");
		}

		public static double ChannelStatistics_Sum_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!ChannelStatistics_Sum_Get\' from this method. Please look f" +
					"or this method in build warnings for more details. ");
		}

		public static double ChannelStatistics_SumCubed_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!ChannelStatistics_SumCubed_Get\' from this method. Please l" +
					"ook for this method in build warnings for more details. ");
		}

		public static double ChannelStatistics_SumFourthPower_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!ChannelStatistics_SumFourthPower_Get\' from this method. Pl" +
					"ease look for this method in build warnings for more details. ");
		}

		public static double ChannelStatistics_SumSquared_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!ChannelStatistics_SumSquared_Get\' from this method. Please" +
					" look for this method in build warnings for more details. ");
		}

		public static double ChannelStatistics_Variance_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!ChannelStatistics_Variance_Get\' from this method. Please l" +
					"ook for this method in build warnings for more details. ");
		}

		public static void Moments_DisposeList(global::System.IntPtr list)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!Moments_DisposeList\' from this method. Please look for thi" +
					"s method in build warnings for more details. ");
		}

		public static global::System.IntPtr Moments_GetInstance(
					global::System.IntPtr list, 
					global::System.UIntPtr channel)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!Moments_GetInstance\' from this method. Please look for thi" +
					"s method in build warnings for more details. ");
		}

		public static void PerceptualHash_DisposeList(global::System.IntPtr list)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!PerceptualHash_DisposeList\' from this method. Please look " +
					"for this method in build warnings for more details. ");
		}

		public static global::System.IntPtr PerceptualHash_GetInstance(
					global::System.IntPtr image, 
					global::System.IntPtr list, 
					global::System.UIntPtr channel)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!PerceptualHash_GetInstance\' from this method. Please look " +
					"for this method in build warnings for more details. ");
		}

		public static void Statistics_DisposeList(global::System.IntPtr list)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!Statistics_DisposeList\' from this method. Please look for " +
					"this method in build warnings for more details. ");
		}

		public static global::System.IntPtr Statistics_GetInstance(
					global::System.IntPtr list, 
					global::System.UIntPtr channel)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!Statistics_GetInstance\' from this method. Please look for " +
					"this method in build warnings for more details. ");
		}

		public static void ConnectedComponent_DisposeList(global::System.IntPtr list)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!ConnectedComponent_DisposeList\' from this method. Please l" +
					"ook for this method in build warnings for more details. ");
		}

		public static global::System.UIntPtr ConnectedComponent_GetArea(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!ConnectedComponent_GetArea\' from this method. Please look " +
					"for this method in build warnings for more details. ");
		}

		public static global::System.IntPtr ConnectedComponent_GetCentroid(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!ConnectedComponent_GetCentroid\' from this method. Please l" +
					"ook for this method in build warnings for more details. ");
		}

		public static global::System.IntPtr ConnectedComponent_GetColor(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!ConnectedComponent_GetColor\' from this method. Please look" +
					" for this method in build warnings for more details. ");
		}

		public static global::System.UIntPtr ConnectedComponent_GetHeight(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!ConnectedComponent_GetHeight\' from this method. Please loo" +
					"k for this method in build warnings for more details. ");
		}

		public static global::System.IntPtr ConnectedComponent_GetId(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!ConnectedComponent_GetId\' from this method. Please look fo" +
					"r this method in build warnings for more details. ");
		}

		public static global::System.IntPtr ConnectedComponent_GetInstance(
					global::System.IntPtr list, 
					global::System.UIntPtr index)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!ConnectedComponent_GetInstance\' from this method. Please l" +
					"ook for this method in build warnings for more details. ");
		}

		public static global::System.UIntPtr ConnectedComponent_GetWidth(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!ConnectedComponent_GetWidth\' from this method. Please look" +
					" for this method in build warnings for more details. ");
		}

		public static global::System.IntPtr ConnectedComponent_GetX(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!ConnectedComponent_GetX\' from this method. Please look for" +
					" this method in build warnings for more details. ");
		}

		public static global::System.IntPtr ConnectedComponent_GetY(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!ConnectedComponent_GetY\' from this method. Please look for" +
					" this method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickGeometry_Create()
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickGeometry_Create\' from this method. Please look for t" +
					"his method in build warnings for more details. ");
		}

		public static void MagickGeometry_Dispose(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickGeometry_Dispose\' from this method. Please look for " +
					"this method in build warnings for more details. ");
		}

		public static double MagickGeometry_X_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickGeometry_X_Get\' from this method. Please look for th" +
					"is method in build warnings for more details. ");
		}

		public static double MagickGeometry_Y_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickGeometry_Y_Get\' from this method. Please look for th" +
					"is method in build warnings for more details. ");
		}

		public static double MagickGeometry_Width_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickGeometry_Width_Get\' from this method. Please look fo" +
					"r this method in build warnings for more details. ");
		}

		public static double MagickGeometry_Height_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickGeometry_Height_Get\' from this method. Please look f" +
					"or this method in build warnings for more details. ");
		}

		public static global::System.UIntPtr MagickGeometry_Initialize(
					global::System.IntPtr Instance, 
					global::System.IntPtr value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickGeometry_Initialize\' from this method. Please look f" +
					"or this method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickRectangle_Create()
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickRectangle_Create\' from this method. Please look for " +
					"this method in build warnings for more details. ");
		}

		public static void MagickRectangle_Dispose(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickRectangle_Dispose\' from this method. Please look for" +
					" this method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickRectangle_X_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickRectangle_X_Get\' from this method. Please look for t" +
					"his method in build warnings for more details. ");
		}

		public static void MagickRectangle_X_Set(
					global::System.IntPtr instance, 
					global::System.IntPtr value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickRectangle_X_Set\' from this method. Please look for t" +
					"his method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickRectangle_Y_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickRectangle_Y_Get\' from this method. Please look for t" +
					"his method in build warnings for more details. ");
		}

		public static void MagickRectangle_Y_Set(
					global::System.IntPtr instance, 
					global::System.IntPtr value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickRectangle_Y_Set\' from this method. Please look for t" +
					"his method in build warnings for more details. ");
		}

		public static global::System.UIntPtr MagickRectangle_Width_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickRectangle_Width_Get\' from this method. Please look f" +
					"or this method in build warnings for more details. ");
		}

		public static void MagickRectangle_Width_Set(
					global::System.IntPtr instance, 
					global::System.UIntPtr value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickRectangle_Width_Set\' from this method. Please look f" +
					"or this method in build warnings for more details. ");
		}

		public static global::System.UIntPtr MagickRectangle_Height_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickRectangle_Height_Get\' from this method. Please look " +
					"for this method in build warnings for more details. ");
		}

		public static void MagickRectangle_Height_Set(
					global::System.IntPtr instance, 
					global::System.UIntPtr value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!MagickRectangle_Height_Set\' from this method. Please look " +
					"for this method in build warnings for more details. ");
		}

		public static global::System.IntPtr OffsetInfo_Create()
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!OffsetInfo_Create\' from this method. Please look for this " +
					"method in build warnings for more details. ");
		}

		public static void OffsetInfo_Dispose(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!OffsetInfo_Dispose\' from this method. Please look for this" +
					" method in build warnings for more details. ");
		}

		public static void OffsetInfo_SetX(
					global::System.IntPtr Instance, 
					global::System.UIntPtr value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!OffsetInfo_SetX\' from this method. Please look for this me" +
					"thod in build warnings for more details. ");
		}

		public static void OffsetInfo_SetY(
					global::System.IntPtr Instance, 
					global::System.UIntPtr value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!OffsetInfo_SetY\' from this method. Please look for this me" +
					"thod in build warnings for more details. ");
		}

		public static double PointInfo_X_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!PointInfo_X_Get\' from this method. Please look for this me" +
					"thod in build warnings for more details. ");
		}

		public static double PointInfo_Y_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!PointInfo_Y_Get\' from this method. Please look for this me" +
					"thod in build warnings for more details. ");
		}

		public static global::System.IntPtr PointInfoCollection_Create(global::System.UIntPtr length)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!PointInfoCollection_Create\' from this method. Please look " +
					"for this method in build warnings for more details. ");
		}

		public static void PointInfoCollection_Dispose(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!PointInfoCollection_Dispose\' from this method. Please look" +
					" for this method in build warnings for more details. ");
		}

		public static double PointInfoCollection_GetX(
					global::System.IntPtr Instance, 
					global::System.UIntPtr index)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!PointInfoCollection_GetX\' from this method. Please look fo" +
					"r this method in build warnings for more details. ");
		}

		public static double PointInfoCollection_GetY(
					global::System.IntPtr Instance, 
					global::System.UIntPtr index)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!PointInfoCollection_GetY\' from this method. Please look fo" +
					"r this method in build warnings for more details. ");
		}

		public static void PointInfoCollection_Set(
					global::System.IntPtr Instance, 
					global::System.UIntPtr index, 
					double x, 
					double y)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!PointInfoCollection_Set\' from this method. Please look for" +
					" this method in build warnings for more details. ");
		}

		public static global::System.IntPtr PrimaryInfo_Create()
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!PrimaryInfo_Create\' from this method. Please look for this" +
					" method in build warnings for more details. ");
		}

		public static void PrimaryInfo_Dispose(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!PrimaryInfo_Dispose\' from this method. Please look for thi" +
					"s method in build warnings for more details. ");
		}

		public static double PrimaryInfo_X_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!PrimaryInfo_X_Get\' from this method. Please look for this " +
					"method in build warnings for more details. ");
		}

		public static void PrimaryInfo_X_Set(
					global::System.IntPtr instance, 
					double value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!PrimaryInfo_X_Set\' from this method. Please look for this " +
					"method in build warnings for more details. ");
		}

		public static double PrimaryInfo_Y_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!PrimaryInfo_Y_Get\' from this method. Please look for this " +
					"method in build warnings for more details. ");
		}

		public static void PrimaryInfo_Y_Set(
					global::System.IntPtr instance, 
					double value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!PrimaryInfo_Y_Set\' from this method. Please look for this " +
					"method in build warnings for more details. ");
		}

		public static double PrimaryInfo_Z_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!PrimaryInfo_Z_Get\' from this method. Please look for this " +
					"method in build warnings for more details. ");
		}

		public static void PrimaryInfo_Z_Set(
					global::System.IntPtr instance, 
					double value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!PrimaryInfo_Z_Set\' from this method. Please look for this " +
					"method in build warnings for more details. ");
		}

		public static global::System.IntPtr StringInfo_Datum_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!StringInfo_Datum_Get\' from this method. Please look for th" +
					"is method in build warnings for more details. ");
		}

		public static global::System.UIntPtr StringInfo_Length_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!StringInfo_Length_Get\' from this method. Please look for t" +
					"his method in build warnings for more details. ");
		}

		public static void TypeMetric_Dispose(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!TypeMetric_Dispose\' from this method. Please look for this" +
					" method in build warnings for more details. ");
		}

		public static double TypeMetric_Ascent_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!TypeMetric_Ascent_Get\' from this method. Please look for t" +
					"his method in build warnings for more details. ");
		}

		public static double TypeMetric_Descent_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!TypeMetric_Descent_Get\' from this method. Please look for " +
					"this method in build warnings for more details. ");
		}

		public static double TypeMetric_MaxHorizontalAdvance_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!TypeMetric_MaxHorizontalAdvance_Get\' from this method. Ple" +
					"ase look for this method in build warnings for more details. ");
		}

		public static double TypeMetric_TextHeight_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!TypeMetric_TextHeight_Get\' from this method. Please look f" +
					"or this method in build warnings for more details. ");
		}

		public static double TypeMetric_TextWidth_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!TypeMetric_TextWidth_Get\' from this method. Please look fo" +
					"r this method in build warnings for more details. ");
		}

		public static double TypeMetric_UnderlinePosition_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!TypeMetric_UnderlinePosition_Get\' from this method. Please" +
					" look for this method in build warnings for more details. ");
		}

		public static double TypeMetric_UnderlineThickness_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!TypeMetric_UnderlineThickness_Get\' from this method. Pleas" +
					"e look for this method in build warnings for more details. ");
		}

		public static void JpegOptimizer_CompressFile(
					global::System.IntPtr input, 
					global::System.IntPtr output, 
					int progressive, 
					int lossless, 
					global::System.UIntPtr quality, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!JpegOptimizer_CompressFile\' from this method. Please look " +
					"for this method in build warnings for more details. ");
		}

		public static void JpegOptimizer_CompressStream(
					void* reader, 
					void* writer, 
					int progressive, 
					int lossless, 
					global::System.UIntPtr quality, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x64.dll!JpegOptimizer_CompressStream\' from this method. Please loo" +
					"k for this method in build warnings for more details. ");
		}
	}

	public unsafe static partial class Magick_Native_Q16_x86_dll_PInvokes
	{
		public static global::System.IntPtr MagickColor_Create()
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickColor_Create\' from this method. Please look for this" +
					" method in build warnings for more details. ");
		}

		public static void MagickColor_Dispose(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickColor_Dispose\' from this method. Please look for thi" +
					"s method in build warnings for more details. ");
		}

		public static ulong MagickColor_Count_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickColor_Count_Get\' from this method. Please look for t" +
					"his method in build warnings for more details. ");
		}

		public static ushort MagickColor_Red_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickColor_Red_Get\' from this method. Please look for thi" +
					"s method in build warnings for more details. ");
		}

		public static void MagickColor_Red_Set(
					global::System.IntPtr instance, 
					ushort value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickColor_Red_Set\' from this method. Please look for thi" +
					"s method in build warnings for more details. ");
		}

		public static ushort MagickColor_Green_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickColor_Green_Get\' from this method. Please look for t" +
					"his method in build warnings for more details. ");
		}

		public static void MagickColor_Green_Set(
					global::System.IntPtr instance, 
					ushort value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickColor_Green_Set\' from this method. Please look for t" +
					"his method in build warnings for more details. ");
		}

		public static ushort MagickColor_Blue_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickColor_Blue_Get\' from this method. Please look for th" +
					"is method in build warnings for more details. ");
		}

		public static void MagickColor_Blue_Set(
					global::System.IntPtr instance, 
					ushort value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickColor_Blue_Set\' from this method. Please look for th" +
					"is method in build warnings for more details. ");
		}

		public static ushort MagickColor_Alpha_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickColor_Alpha_Get\' from this method. Please look for t" +
					"his method in build warnings for more details. ");
		}

		public static void MagickColor_Alpha_Set(
					global::System.IntPtr instance, 
					ushort value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickColor_Alpha_Set\' from this method. Please look for t" +
					"his method in build warnings for more details. ");
		}

		public static ushort MagickColor_Black_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickColor_Black_Get\' from this method. Please look for t" +
					"his method in build warnings for more details. ");
		}

		public static void MagickColor_Black_Set(
					global::System.IntPtr instance, 
					ushort value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickColor_Black_Set\' from this method. Please look for t" +
					"his method in build warnings for more details. ");
		}

		public static int MagickColor_IsCMYK_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickColor_IsCMYK_Get\' from this method. Please look for " +
					"this method in build warnings for more details. ");
		}

		public static void MagickColor_IsCMYK_Set(
					global::System.IntPtr instance, 
					int value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickColor_IsCMYK_Set\' from this method. Please look for " +
					"this method in build warnings for more details. ");
		}

		public static int MagickColor_FuzzyEquals(
					global::System.IntPtr Instance, 
					global::System.IntPtr other, 
					ushort fuzz)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickColor_FuzzyEquals\' from this method. Please look for" +
					" this method in build warnings for more details. ");
		}

		public static int MagickColor_Initialize(
					global::System.IntPtr Instance, 
					global::System.IntPtr value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickColor_Initialize\' from this method. Please look for " +
					"this method in build warnings for more details. ");
		}

		public static void MagickColorCollection_DisposeList(global::System.IntPtr list)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickColorCollection_DisposeList\' from this method. Pleas" +
					"e look for this method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickColorCollection_GetInstance(
					global::System.IntPtr list, 
					global::System.UIntPtr index)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickColorCollection_GetInstance\' from this method. Pleas" +
					"e look for this method in build warnings for more details. ");
		}

		public static global::System.IntPtr DrawingWand_Create(
					global::System.IntPtr image, 
					global::System.IntPtr settings)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!DrawingWand_Create\' from this method. Please look for this" +
					" method in build warnings for more details. ");
		}

		public static void DrawingWand_Dispose(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!DrawingWand_Dispose\' from this method. Please look for thi" +
					"s method in build warnings for more details. ");
		}

		public static void DrawingWand_Affine(
					global::System.IntPtr Instance, 
					double scaleX, 
					double scaleY, 
					double shearX, 
					double shearY, 
					double translateX, 
					double translateY, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!DrawingWand_Affine\' from this method. Please look for this" +
					" method in build warnings for more details. ");
		}

		public static void DrawingWand_Alpha(
					global::System.IntPtr Instance, 
					double x, 
					double y, 
					global::System.UIntPtr paintMethod, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!DrawingWand_Alpha\' from this method. Please look for this " +
					"method in build warnings for more details. ");
		}

		public static void DrawingWand_Arc(
					global::System.IntPtr Instance, 
					double startX, 
					double startY, 
					double endX, 
					double endY, 
					double startDegrees, 
					double endDegrees, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!DrawingWand_Arc\' from this method. Please look for this me" +
					"thod in build warnings for more details. ");
		}

		public static void DrawingWand_Bezier(
					global::System.IntPtr Instance, 
					global::System.IntPtr coordinates, 
					global::System.UIntPtr length, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!DrawingWand_Bezier\' from this method. Please look for this" +
					" method in build warnings for more details. ");
		}

		public static void DrawingWand_BorderColor(
					global::System.IntPtr Instance, 
					global::System.IntPtr value, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!DrawingWand_BorderColor\' from this method. Please look for" +
					" this method in build warnings for more details. ");
		}

		public static void DrawingWand_Circle(
					global::System.IntPtr Instance, 
					double originX, 
					double originY, 
					double perimeterX, 
					double perimeterY, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!DrawingWand_Circle\' from this method. Please look for this" +
					" method in build warnings for more details. ");
		}

		public static void DrawingWand_ClipPath(
					global::System.IntPtr Instance, 
					global::System.IntPtr value, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!DrawingWand_ClipPath\' from this method. Please look for th" +
					"is method in build warnings for more details. ");
		}

		public static void DrawingWand_ClipRule(
					global::System.IntPtr Instance, 
					global::System.UIntPtr value, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!DrawingWand_ClipRule\' from this method. Please look for th" +
					"is method in build warnings for more details. ");
		}

		public static void DrawingWand_ClipUnits(
					global::System.IntPtr Instance, 
					global::System.UIntPtr value, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!DrawingWand_ClipUnits\' from this method. Please look for t" +
					"his method in build warnings for more details. ");
		}

		public static void DrawingWand_Color(
					global::System.IntPtr Instance, 
					double x, 
					double y, 
					global::System.UIntPtr paintMethod, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!DrawingWand_Color\' from this method. Please look for this " +
					"method in build warnings for more details. ");
		}

		public static void DrawingWand_Composite(
					global::System.IntPtr Instance, 
					double x, 
					double y, 
					double width, 
					double height, 
					global::System.UIntPtr compositeOperator, 
					global::System.IntPtr image, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!DrawingWand_Composite\' from this method. Please look for t" +
					"his method in build warnings for more details. ");
		}

		public static void DrawingWand_Density(
					global::System.IntPtr Instance, 
					global::System.IntPtr value, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!DrawingWand_Density\' from this method. Please look for thi" +
					"s method in build warnings for more details. ");
		}

		public static void DrawingWand_Ellipse(
					global::System.IntPtr Instance, 
					double originX, 
					double originY, 
					double radiusX, 
					double radiusY, 
					double startDegrees, 
					double endDegrees, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!DrawingWand_Ellipse\' from this method. Please look for thi" +
					"s method in build warnings for more details. ");
		}

		public static void DrawingWand_FillColor(
					global::System.IntPtr Instance, 
					global::System.IntPtr value, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!DrawingWand_FillColor\' from this method. Please look for t" +
					"his method in build warnings for more details. ");
		}

		public static void DrawingWand_FillOpacity(
					global::System.IntPtr Instance, 
					double value, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!DrawingWand_FillOpacity\' from this method. Please look for" +
					" this method in build warnings for more details. ");
		}

		public static void DrawingWand_FillPatternUrl(
					global::System.IntPtr Instance, 
					global::System.IntPtr url, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!DrawingWand_FillPatternUrl\' from this method. Please look " +
					"for this method in build warnings for more details. ");
		}

		public static void DrawingWand_FillRule(
					global::System.IntPtr Instance, 
					global::System.UIntPtr value, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!DrawingWand_FillRule\' from this method. Please look for th" +
					"is method in build warnings for more details. ");
		}

		public static void DrawingWand_Font(
					global::System.IntPtr Instance, 
					global::System.IntPtr fontName, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!DrawingWand_Font\' from this method. Please look for this m" +
					"ethod in build warnings for more details. ");
		}

		public static void DrawingWand_FontFamily(
					global::System.IntPtr Instance, 
					global::System.IntPtr family, 
					global::System.UIntPtr style, 
					global::System.UIntPtr weight, 
					global::System.UIntPtr stretch, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!DrawingWand_FontFamily\' from this method. Please look for " +
					"this method in build warnings for more details. ");
		}

		public static void DrawingWand_FontPointSize(
					global::System.IntPtr Instance, 
					double value, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!DrawingWand_FontPointSize\' from this method. Please look f" +
					"or this method in build warnings for more details. ");
		}

		public static global::System.IntPtr DrawingWand_FontTypeMetrics(
					global::System.IntPtr Instance, 
					global::System.IntPtr text, 
					int ignoreNewLines, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!DrawingWand_FontTypeMetrics\' from this method. Please look" +
					" for this method in build warnings for more details. ");
		}

		public static void DrawingWand_Gravity(
					global::System.IntPtr Instance, 
					global::System.UIntPtr value, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!DrawingWand_Gravity\' from this method. Please look for thi" +
					"s method in build warnings for more details. ");
		}

		public static void DrawingWand_Line(
					global::System.IntPtr Instance, 
					double startX, 
					double startY, 
					double endX, 
					double endY, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!DrawingWand_Line\' from this method. Please look for this m" +
					"ethod in build warnings for more details. ");
		}

		public static void DrawingWand_PathArcAbs(
					global::System.IntPtr Instance, 
					double x, 
					double y, 
					double radiusX, 
					double radiusY, 
					double rotationX, 
					int useLargeArc, 
					int useSweep, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!DrawingWand_PathArcAbs\' from this method. Please look for " +
					"this method in build warnings for more details. ");
		}

		public static void DrawingWand_PathArcRel(
					global::System.IntPtr Instance, 
					double x, 
					double y, 
					double radiusX, 
					double radiusY, 
					double rotationX, 
					int useLargeArc, 
					int useSweep, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!DrawingWand_PathArcRel\' from this method. Please look for " +
					"this method in build warnings for more details. ");
		}

		public static void DrawingWand_Render(
					global::System.IntPtr Instance, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!DrawingWand_Render\' from this method. Please look for this" +
					" method in build warnings for more details. ");
		}

		public static void DrawingWand_Text(
					global::System.IntPtr Instance, 
					double x, 
					double y, 
					global::System.IntPtr text, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!DrawingWand_Text\' from this method. Please look for this m" +
					"ethod in build warnings for more details. ");
		}

		public static void DrawingWand_PathClose(
					global::System.IntPtr Instance, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!DrawingWand_PathClose\' from this method. Please look for t" +
					"his method in build warnings for more details. ");
		}

		public static void DrawingWand_PathCurveToAbs(
					global::System.IntPtr Instance, 
					double x1, 
					double y1, 
					double x2, 
					double y2, 
					double x, 
					double y, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!DrawingWand_PathCurveToAbs\' from this method. Please look " +
					"for this method in build warnings for more details. ");
		}

		public static void DrawingWand_PathCurveToRel(
					global::System.IntPtr Instance, 
					double x1, 
					double y1, 
					double x2, 
					double y2, 
					double x, 
					double y, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!DrawingWand_PathCurveToRel\' from this method. Please look " +
					"for this method in build warnings for more details. ");
		}

		public static void DrawingWand_PathFinish(
					global::System.IntPtr Instance, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!DrawingWand_PathFinish\' from this method. Please look for " +
					"this method in build warnings for more details. ");
		}

		public static void DrawingWand_PathLineToAbs(
					global::System.IntPtr Instance, 
					double x, 
					double y, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!DrawingWand_PathLineToAbs\' from this method. Please look f" +
					"or this method in build warnings for more details. ");
		}

		public static void DrawingWand_PathLineToRel(
					global::System.IntPtr Instance, 
					double x, 
					double y, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!DrawingWand_PathLineToRel\' from this method. Please look f" +
					"or this method in build warnings for more details. ");
		}

		public static void DrawingWand_PathLineToHorizontalAbs(
					global::System.IntPtr Instance, 
					double x, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!DrawingWand_PathLineToHorizontalAbs\' from this method. Ple" +
					"ase look for this method in build warnings for more details. ");
		}

		public static void DrawingWand_PathLineToHorizontalRel(
					global::System.IntPtr Instance, 
					double x, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!DrawingWand_PathLineToHorizontalRel\' from this method. Ple" +
					"ase look for this method in build warnings for more details. ");
		}

		public static void DrawingWand_PathLineToVerticalAbs(
					global::System.IntPtr Instance, 
					double y, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!DrawingWand_PathLineToVerticalAbs\' from this method. Pleas" +
					"e look for this method in build warnings for more details. ");
		}

		public static void DrawingWand_PathLineToVerticalRel(
					global::System.IntPtr Instance, 
					double y, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!DrawingWand_PathLineToVerticalRel\' from this method. Pleas" +
					"e look for this method in build warnings for more details. ");
		}

		public static void DrawingWand_PathMoveToAbs(
					global::System.IntPtr Instance, 
					double x, 
					double y, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!DrawingWand_PathMoveToAbs\' from this method. Please look f" +
					"or this method in build warnings for more details. ");
		}

		public static void DrawingWand_PathMoveToRel(
					global::System.IntPtr Instance, 
					double x, 
					double y, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!DrawingWand_PathMoveToRel\' from this method. Please look f" +
					"or this method in build warnings for more details. ");
		}

		public static void DrawingWand_PathQuadraticCurveToAbs(
					global::System.IntPtr Instance, 
					double x1, 
					double y1, 
					double x, 
					double y, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!DrawingWand_PathQuadraticCurveToAbs\' from this method. Ple" +
					"ase look for this method in build warnings for more details. ");
		}

		public static void DrawingWand_PathQuadraticCurveToRel(
					global::System.IntPtr Instance, 
					double x1, 
					double y1, 
					double x, 
					double y, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!DrawingWand_PathQuadraticCurveToRel\' from this method. Ple" +
					"ase look for this method in build warnings for more details. ");
		}

		public static void DrawingWand_PathSmoothCurveToAbs(
					global::System.IntPtr Instance, 
					double x2, 
					double y2, 
					double x, 
					double y, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!DrawingWand_PathSmoothCurveToAbs\' from this method. Please" +
					" look for this method in build warnings for more details. ");
		}

		public static void DrawingWand_PathSmoothCurveToRel(
					global::System.IntPtr Instance, 
					double x2, 
					double y2, 
					double x, 
					double y, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!DrawingWand_PathSmoothCurveToRel\' from this method. Please" +
					" look for this method in build warnings for more details. ");
		}

		public static void DrawingWand_PathSmoothQuadraticCurveToAbs(
					global::System.IntPtr Instance, 
					double x, 
					double y, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!DrawingWand_PathSmoothQuadraticCurveToAbs\' from this metho" +
					"d. Please look for this method in build warnings for more details. ");
		}

		public static void DrawingWand_PathSmoothQuadraticCurveToRel(
					global::System.IntPtr Instance, 
					double x, 
					double y, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!DrawingWand_PathSmoothQuadraticCurveToRel\' from this metho" +
					"d. Please look for this method in build warnings for more details. ");
		}

		public static void DrawingWand_PathStart(
					global::System.IntPtr Instance, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!DrawingWand_PathStart\' from this method. Please look for t" +
					"his method in build warnings for more details. ");
		}

		public static void DrawingWand_Point(
					global::System.IntPtr Instance, 
					double x, 
					double y, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!DrawingWand_Point\' from this method. Please look for this " +
					"method in build warnings for more details. ");
		}

		public static void DrawingWand_Polygon(
					global::System.IntPtr Instance, 
					global::System.IntPtr coordinates, 
					global::System.UIntPtr length, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!DrawingWand_Polygon\' from this method. Please look for thi" +
					"s method in build warnings for more details. ");
		}

		public static void DrawingWand_Polyline(
					global::System.IntPtr Instance, 
					global::System.IntPtr coordinates, 
					global::System.UIntPtr length, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!DrawingWand_Polyline\' from this method. Please look for th" +
					"is method in build warnings for more details. ");
		}

		public static void DrawingWand_PopClipPath(
					global::System.IntPtr Instance, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!DrawingWand_PopClipPath\' from this method. Please look for" +
					" this method in build warnings for more details. ");
		}

		public static void DrawingWand_PopGraphicContext(
					global::System.IntPtr Instance, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!DrawingWand_PopGraphicContext\' from this method. Please lo" +
					"ok for this method in build warnings for more details. ");
		}

		public static void DrawingWand_PopPattern(
					global::System.IntPtr Instance, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!DrawingWand_PopPattern\' from this method. Please look for " +
					"this method in build warnings for more details. ");
		}

		public static void DrawingWand_PushClipPath(
					global::System.IntPtr Instance, 
					global::System.IntPtr clipPath, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!DrawingWand_PushClipPath\' from this method. Please look fo" +
					"r this method in build warnings for more details. ");
		}

		public static void DrawingWand_PushGraphicContext(
					global::System.IntPtr Instance, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!DrawingWand_PushGraphicContext\' from this method. Please l" +
					"ook for this method in build warnings for more details. ");
		}

		public static void DrawingWand_PushPattern(
					global::System.IntPtr Instance, 
					global::System.IntPtr id, 
					double x, 
					double y, 
					double width, 
					double height, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!DrawingWand_PushPattern\' from this method. Please look for" +
					" this method in build warnings for more details. ");
		}

		public static void DrawingWand_Rectangle(
					global::System.IntPtr Instance, 
					double upperLeftX, 
					double upperLeftY, 
					double lowerRightX, 
					double lowerRightY, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!DrawingWand_Rectangle\' from this method. Please look for t" +
					"his method in build warnings for more details. ");
		}

		public static void DrawingWand_Rotation(
					global::System.IntPtr Instance, 
					double angle, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!DrawingWand_Rotation\' from this method. Please look for th" +
					"is method in build warnings for more details. ");
		}

		public static void DrawingWand_RoundRectangle(
					global::System.IntPtr Instance, 
					double upperLeftX, 
					double upperLeftY, 
					double lowerRightX, 
					double lowerRightY, 
					double cornerWidth, 
					double cornerHeight, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!DrawingWand_RoundRectangle\' from this method. Please look " +
					"for this method in build warnings for more details. ");
		}

		public static void DrawingWand_Scaling(
					global::System.IntPtr Instance, 
					double x, 
					double y, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!DrawingWand_Scaling\' from this method. Please look for thi" +
					"s method in build warnings for more details. ");
		}

		public static void DrawingWand_SkewX(
					global::System.IntPtr Instance, 
					double angle, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!DrawingWand_SkewX\' from this method. Please look for this " +
					"method in build warnings for more details. ");
		}

		public static void DrawingWand_SkewY(
					global::System.IntPtr Instance, 
					double angle, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!DrawingWand_SkewY\' from this method. Please look for this " +
					"method in build warnings for more details. ");
		}

		public static void DrawingWand_StrokeAntialias(
					global::System.IntPtr Instance, 
					int isEnabled, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!DrawingWand_StrokeAntialias\' from this method. Please look" +
					" for this method in build warnings for more details. ");
		}

		public static void DrawingWand_StrokeColor(
					global::System.IntPtr Instance, 
					global::System.IntPtr value, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!DrawingWand_StrokeColor\' from this method. Please look for" +
					" this method in build warnings for more details. ");
		}

		public static void DrawingWand_StrokeDashArray(
					global::System.IntPtr Instance, 
					double* dash, 
					global::System.UIntPtr length, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!DrawingWand_StrokeDashArray\' from this method. Please look" +
					" for this method in build warnings for more details. ");
		}

		public static void DrawingWand_StrokeDashOffset(
					global::System.IntPtr Instance, 
					double value, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!DrawingWand_StrokeDashOffset\' from this method. Please loo" +
					"k for this method in build warnings for more details. ");
		}

		public static void DrawingWand_StrokeLineCap(
					global::System.IntPtr Instance, 
					global::System.UIntPtr value, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!DrawingWand_StrokeLineCap\' from this method. Please look f" +
					"or this method in build warnings for more details. ");
		}

		public static void DrawingWand_StrokeLineJoin(
					global::System.IntPtr Instance, 
					global::System.UIntPtr value, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!DrawingWand_StrokeLineJoin\' from this method. Please look " +
					"for this method in build warnings for more details. ");
		}

		public static void DrawingWand_StrokeMiterLimit(
					global::System.IntPtr Instance, 
					global::System.UIntPtr value, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!DrawingWand_StrokeMiterLimit\' from this method. Please loo" +
					"k for this method in build warnings for more details. ");
		}

		public static void DrawingWand_StrokeOpacity(
					global::System.IntPtr Instance, 
					double value, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!DrawingWand_StrokeOpacity\' from this method. Please look f" +
					"or this method in build warnings for more details. ");
		}

		public static void DrawingWand_StrokePatternUrl(
					global::System.IntPtr Instance, 
					global::System.IntPtr value, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!DrawingWand_StrokePatternUrl\' from this method. Please loo" +
					"k for this method in build warnings for more details. ");
		}

		public static void DrawingWand_StrokeWidth(
					global::System.IntPtr Instance, 
					double value, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!DrawingWand_StrokeWidth\' from this method. Please look for" +
					" this method in build warnings for more details. ");
		}

		public static void DrawingWand_TextAlignment(
					global::System.IntPtr Instance, 
					global::System.UIntPtr value, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!DrawingWand_TextAlignment\' from this method. Please look f" +
					"or this method in build warnings for more details. ");
		}

		public static void DrawingWand_TextAntialias(
					global::System.IntPtr Instance, 
					int isEnabled, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!DrawingWand_TextAntialias\' from this method. Please look f" +
					"or this method in build warnings for more details. ");
		}

		public static void DrawingWand_TextDecoration(
					global::System.IntPtr Instance, 
					global::System.UIntPtr value, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!DrawingWand_TextDecoration\' from this method. Please look " +
					"for this method in build warnings for more details. ");
		}

		public static void DrawingWand_TextDirection(
					global::System.IntPtr Instance, 
					global::System.UIntPtr value, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!DrawingWand_TextDirection\' from this method. Please look f" +
					"or this method in build warnings for more details. ");
		}

		public static void DrawingWand_TextEncoding(
					global::System.IntPtr Instance, 
					global::System.IntPtr encoding, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!DrawingWand_TextEncoding\' from this method. Please look fo" +
					"r this method in build warnings for more details. ");
		}

		public static void DrawingWand_TextInterlineSpacing(
					global::System.IntPtr Instance, 
					double value, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!DrawingWand_TextInterlineSpacing\' from this method. Please" +
					" look for this method in build warnings for more details. ");
		}

		public static void DrawingWand_TextInterwordSpacing(
					global::System.IntPtr Instance, 
					double value, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!DrawingWand_TextInterwordSpacing\' from this method. Please" +
					" look for this method in build warnings for more details. ");
		}

		public static void DrawingWand_TextKerning(
					global::System.IntPtr Instance, 
					double value, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!DrawingWand_TextKerning\' from this method. Please look for" +
					" this method in build warnings for more details. ");
		}

		public static void DrawingWand_TextUnderColor(
					global::System.IntPtr Instance, 
					global::System.IntPtr color, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!DrawingWand_TextUnderColor\' from this method. Please look " +
					"for this method in build warnings for more details. ");
		}

		public static void DrawingWand_Translation(
					global::System.IntPtr Instance, 
					double x, 
					double y, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!DrawingWand_Translation\' from this method. Please look for" +
					" this method in build warnings for more details. ");
		}

		public static void DrawingWand_Viewbox(
					global::System.IntPtr Instance, 
					double upperLeftX, 
					double upperLeftY, 
					double lowerRightX, 
					double lowerRightY, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!DrawingWand_Viewbox\' from this method. Please look for thi" +
					"s method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickExceptionHelper_Description(global::System.IntPtr exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickExceptionHelper_Description\' from this method. Pleas" +
					"e look for this method in build warnings for more details. ");
		}

		public static void MagickExceptionHelper_Dispose(global::System.IntPtr exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickExceptionHelper_Dispose\' from this method. Please lo" +
					"ok for this method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickExceptionHelper_Message(global::System.IntPtr exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickExceptionHelper_Message\' from this method. Please lo" +
					"ok for this method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickExceptionHelper_Related(
					global::System.IntPtr exception, 
					global::System.UIntPtr index)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickExceptionHelper_Related\' from this method. Please lo" +
					"ok for this method in build warnings for more details. ");
		}

		public static global::System.UIntPtr MagickExceptionHelper_RelatedCount(global::System.IntPtr exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickExceptionHelper_RelatedCount\' from this method. Plea" +
					"se look for this method in build warnings for more details. ");
		}

		public static global::System.UIntPtr MagickExceptionHelper_Severity(global::System.IntPtr exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickExceptionHelper_Severity\' from this method. Please l" +
					"ook for this method in build warnings for more details. ");
		}

		public static void Environment_Initialize()
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!Environment_Initialize\' from this method. Please look for " +
					"this method in build warnings for more details. ");
		}

		public static void Environment_SetEnv(
					global::System.IntPtr name, 
					global::System.IntPtr value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!Environment_SetEnv\' from this method. Please look for this" +
					" method in build warnings for more details. ");
		}

		public static void MagickMemory_Relinquish(global::System.IntPtr value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickMemory_Relinquish\' from this method. Please look for" +
					" this method in build warnings for more details. ");
		}

		public static global::System.IntPtr Magick_Delegates_Get()
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!Magick_Delegates_Get\' from this method. Please look for th" +
					"is method in build warnings for more details. ");
		}

		public static global::System.IntPtr Magick_Features_Get()
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!Magick_Features_Get\' from this method. Please look for thi" +
					"s method in build warnings for more details. ");
		}

		public static global::System.IntPtr Magick_GetFonts(
					global::System.UIntPtr* length, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!Magick_GetFonts\' from this method. Please look for this me" +
					"thod in build warnings for more details. ");
		}

		public static global::System.IntPtr Magick_GetFontName(
					global::System.IntPtr instance, 
					global::System.UIntPtr index)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!Magick_GetFontName\' from this method. Please look for this" +
					" method in build warnings for more details. ");
		}

		public static global::System.IntPtr Magick_GetFontFamily(
					global::System.IntPtr instance, 
					global::System.UIntPtr index)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!Magick_GetFontFamily\' from this method. Please look for th" +
					"is method in build warnings for more details. ");
		}

		public static void Magick_DisposeFonts(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!Magick_DisposeFonts\' from this method. Please look for thi" +
					"s method in build warnings for more details. ");
		}

		public static void Magick_SetLogDelegate(void* method)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!Magick_SetLogDelegate\' from this method. Please look for t" +
					"his method in build warnings for more details. ");
		}

		public static void Magick_SetLogEvents(global::System.IntPtr events)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!Magick_SetLogEvents\' from this method. Please look for thi" +
					"s method in build warnings for more details. ");
		}

		public static void Magick_SetRandomSeed(long value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!Magick_SetRandomSeed\' from this method. Please look for th" +
					"is method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickFormatInfo_Description_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickFormatInfo_Description_Get\' from this method. Please" +
					" look for this method in build warnings for more details. ");
		}

		public static int MagickFormatInfo_CanReadMultithreaded_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickFormatInfo_CanReadMultithreaded_Get\' from this metho" +
					"d. Please look for this method in build warnings for more details. ");
		}

		public static int MagickFormatInfo_CanWriteMultithreaded_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickFormatInfo_CanWriteMultithreaded_Get\' from this meth" +
					"od. Please look for this method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickFormatInfo_Format_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickFormatInfo_Format_Get\' from this method. Please look" +
					" for this method in build warnings for more details. ");
		}

		public static int MagickFormatInfo_IsMultiFrame_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickFormatInfo_IsMultiFrame_Get\' from this method. Pleas" +
					"e look for this method in build warnings for more details. ");
		}

		public static int MagickFormatInfo_IsReadable_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickFormatInfo_IsReadable_Get\' from this method. Please " +
					"look for this method in build warnings for more details. ");
		}

		public static int MagickFormatInfo_IsWritable_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickFormatInfo_IsWritable_Get\' from this method. Please " +
					"look for this method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickFormatInfo_MimeType_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickFormatInfo_MimeType_Get\' from this method. Please lo" +
					"ok for this method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickFormatInfo_Module_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickFormatInfo_Module_Get\' from this method. Please look" +
					" for this method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickFormatInfo_CreateList(
					global::System.UIntPtr* length, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickFormatInfo_CreateList\' from this method. Please look" +
					" for this method in build warnings for more details. ");
		}

		public static void MagickFormatInfo_DisposeList(
					global::System.IntPtr instance, 
					global::System.UIntPtr length)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickFormatInfo_DisposeList\' from this method. Please loo" +
					"k for this method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickFormatInfo_GetInfo(
					global::System.IntPtr list, 
					global::System.UIntPtr index, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickFormatInfo_GetInfo\' from this method. Please look fo" +
					"r this method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickFormatInfo_GetInfoByName(
					global::System.IntPtr name, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickFormatInfo_GetInfoByName\' from this method. Please l" +
					"ook for this method in build warnings for more details. ");
		}

		public static int MagickFormatInfo_Unregister(global::System.IntPtr name)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickFormatInfo_Unregister\' from this method. Please look" +
					" for this method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_Create(
					global::System.IntPtr settings, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_Create\' from this method. Please look for this" +
					" method in build warnings for more details. ");
		}

		public static void MagickImage_Dispose(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_Dispose\' from this method. Please look for thi" +
					"s method in build warnings for more details. ");
		}

		public static global::System.UIntPtr MagickImage_AnimationDelay_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_AnimationDelay_Get\' from this method. Please l" +
					"ook for this method in build warnings for more details. ");
		}

		public static void MagickImage_AnimationDelay_Set(
					global::System.IntPtr instance, 
					global::System.UIntPtr value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_AnimationDelay_Set\' from this method. Please l" +
					"ook for this method in build warnings for more details. ");
		}

		public static global::System.UIntPtr MagickImage_AnimationIterations_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_AnimationIterations_Get\' from this method. Ple" +
					"ase look for this method in build warnings for more details. ");
		}

		public static void MagickImage_AnimationIterations_Set(
					global::System.IntPtr instance, 
					global::System.UIntPtr value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_AnimationIterations_Set\' from this method. Ple" +
					"ase look for this method in build warnings for more details. ");
		}

		public static global::System.UIntPtr MagickImage_AnimationTicksPerSecond_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_AnimationTicksPerSecond_Get\' from this method." +
					" Please look for this method in build warnings for more details. ");
		}

		public static void MagickImage_AnimationTicksPerSecond_Set(
					global::System.IntPtr instance, 
					global::System.UIntPtr value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_AnimationTicksPerSecond_Set\' from this method." +
					" Please look for this method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_BackgroundColor_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_BackgroundColor_Get\' from this method. Please " +
					"look for this method in build warnings for more details. ");
		}

		public static void MagickImage_BackgroundColor_Set(
					global::System.IntPtr instance, 
					global::System.IntPtr value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_BackgroundColor_Set\' from this method. Please " +
					"look for this method in build warnings for more details. ");
		}

		public static global::System.UIntPtr MagickImage_BaseHeight_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_BaseHeight_Get\' from this method. Please look " +
					"for this method in build warnings for more details. ");
		}

		public static global::System.UIntPtr MagickImage_BaseWidth_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_BaseWidth_Get\' from this method. Please look f" +
					"or this method in build warnings for more details. ");
		}

		public static int MagickImage_BlackPointCompensation_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_BlackPointCompensation_Get\' from this method. " +
					"Please look for this method in build warnings for more details. ");
		}

		public static void MagickImage_BlackPointCompensation_Set(
					global::System.IntPtr instance, 
					int value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_BlackPointCompensation_Set\' from this method. " +
					"Please look for this method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_BorderColor_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_BorderColor_Get\' from this method. Please look" +
					" for this method in build warnings for more details. ");
		}

		public static void MagickImage_BorderColor_Set(
					global::System.IntPtr instance, 
					global::System.IntPtr value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_BorderColor_Set\' from this method. Please look" +
					" for this method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_BoundingBox_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_BoundingBox_Get\' from this method. Please look" +
					" for this method in build warnings for more details. ");
		}

		public static global::System.UIntPtr MagickImage_ChannelCount_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_ChannelCount_Get\' from this method. Please loo" +
					"k for this method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_ChromaBluePrimary_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_ChromaBluePrimary_Get\' from this method. Pleas" +
					"e look for this method in build warnings for more details. ");
		}

		public static void MagickImage_ChromaBluePrimary_Set(
					global::System.IntPtr instance, 
					global::System.IntPtr value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_ChromaBluePrimary_Set\' from this method. Pleas" +
					"e look for this method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_ChromaGreenPrimary_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_ChromaGreenPrimary_Get\' from this method. Plea" +
					"se look for this method in build warnings for more details. ");
		}

		public static void MagickImage_ChromaGreenPrimary_Set(
					global::System.IntPtr instance, 
					global::System.IntPtr value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_ChromaGreenPrimary_Set\' from this method. Plea" +
					"se look for this method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_ChromaRedPrimary_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_ChromaRedPrimary_Get\' from this method. Please" +
					" look for this method in build warnings for more details. ");
		}

		public static void MagickImage_ChromaRedPrimary_Set(
					global::System.IntPtr instance, 
					global::System.IntPtr value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_ChromaRedPrimary_Set\' from this method. Please" +
					" look for this method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_ChromaWhitePoint_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_ChromaWhitePoint_Get\' from this method. Please" +
					" look for this method in build warnings for more details. ");
		}

		public static void MagickImage_ChromaWhitePoint_Set(
					global::System.IntPtr instance, 
					global::System.IntPtr value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_ChromaWhitePoint_Set\' from this method. Please" +
					" look for this method in build warnings for more details. ");
		}

		public static global::System.UIntPtr MagickImage_ClassType_Get(
					global::System.IntPtr instance, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_ClassType_Get\' from this method. Please look f" +
					"or this method in build warnings for more details. ");
		}

		public static void MagickImage_ClassType_Set(
					global::System.IntPtr instance, 
					global::System.UIntPtr value, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_ClassType_Set\' from this method. Please look f" +
					"or this method in build warnings for more details. ");
		}

		public static double MagickImage_ColorFuzz_Get(
					global::System.IntPtr instance, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_ColorFuzz_Get\' from this method. Please look f" +
					"or this method in build warnings for more details. ");
		}

		public static void MagickImage_ColorFuzz_Set(
					global::System.IntPtr instance, 
					double value, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_ColorFuzz_Set\' from this method. Please look f" +
					"or this method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_ColormapSize_Get(
					global::System.IntPtr instance, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_ColormapSize_Get\' from this method. Please loo" +
					"k for this method in build warnings for more details. ");
		}

		public static void MagickImage_ColormapSize_Set(
					global::System.IntPtr instance, 
					global::System.IntPtr value, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_ColormapSize_Set\' from this method. Please loo" +
					"k for this method in build warnings for more details. ");
		}

		public static global::System.UIntPtr MagickImage_ColorSpace_Get(
					global::System.IntPtr instance, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_ColorSpace_Get\' from this method. Please look " +
					"for this method in build warnings for more details. ");
		}

		public static void MagickImage_ColorSpace_Set(
					global::System.IntPtr instance, 
					global::System.UIntPtr value, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_ColorSpace_Set\' from this method. Please look " +
					"for this method in build warnings for more details. ");
		}

		public static global::System.UIntPtr MagickImage_ColorType_Get(
					global::System.IntPtr instance, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_ColorType_Get\' from this method. Please look f" +
					"or this method in build warnings for more details. ");
		}

		public static void MagickImage_ColorType_Set(
					global::System.IntPtr instance, 
					global::System.UIntPtr value, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_ColorType_Set\' from this method. Please look f" +
					"or this method in build warnings for more details. ");
		}

		public static global::System.UIntPtr MagickImage_Compose_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_Compose_Get\' from this method. Please look for" +
					" this method in build warnings for more details. ");
		}

		public static void MagickImage_Compose_Set(
					global::System.IntPtr instance, 
					global::System.UIntPtr value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_Compose_Set\' from this method. Please look for" +
					" this method in build warnings for more details. ");
		}

		public static global::System.UIntPtr MagickImage_Compression_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_Compression_Get\' from this method. Please look" +
					" for this method in build warnings for more details. ");
		}

		public static global::System.UIntPtr MagickImage_Depth_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_Depth_Get\' from this method. Please look for t" +
					"his method in build warnings for more details. ");
		}

		public static void MagickImage_Depth_Set(
					global::System.IntPtr instance, 
					global::System.UIntPtr value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_Depth_Set\' from this method. Please look for t" +
					"his method in build warnings for more details. ");
		}

		public static global::System.UIntPtr MagickImage_Endian_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_Endian_Get\' from this method. Please look for " +
					"this method in build warnings for more details. ");
		}

		public static void MagickImage_Endian_Set(
					global::System.IntPtr instance, 
					global::System.UIntPtr value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_Endian_Set\' from this method. Please look for " +
					"this method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_EncodingGeometry_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_EncodingGeometry_Get\' from this method. Please" +
					" look for this method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_FileName_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_FileName_Get\' from this method. Please look fo" +
					"r this method in build warnings for more details. ");
		}

		public static void MagickImage_FileName_Set(
					global::System.IntPtr instance, 
					global::System.IntPtr value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_FileName_Set\' from this method. Please look fo" +
					"r this method in build warnings for more details. ");
		}

		public static global::System.UIntPtr MagickImage_FilterType_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_FilterType_Get\' from this method. Please look " +
					"for this method in build warnings for more details. ");
		}

		public static void MagickImage_FilterType_Set(
					global::System.IntPtr instance, 
					global::System.UIntPtr value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_FilterType_Set\' from this method. Please look " +
					"for this method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_Format_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_Format_Get\' from this method. Please look for " +
					"this method in build warnings for more details. ");
		}

		public static void MagickImage_Format_Set(
					global::System.IntPtr instance, 
					global::System.IntPtr value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_Format_Set\' from this method. Please look for " +
					"this method in build warnings for more details. ");
		}

		public static double MagickImage_Gamma_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_Gamma_Get\' from this method. Please look for t" +
					"his method in build warnings for more details. ");
		}

		public static global::System.UIntPtr MagickImage_GifDisposeMethod_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_GifDisposeMethod_Get\' from this method. Please" +
					" look for this method in build warnings for more details. ");
		}

		public static void MagickImage_GifDisposeMethod_Set(
					global::System.IntPtr instance, 
					global::System.UIntPtr value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_GifDisposeMethod_Set\' from this method. Please" +
					" look for this method in build warnings for more details. ");
		}

		public static global::System.UIntPtr MagickImage_Height_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_Height_Get\' from this method. Please look for " +
					"this method in build warnings for more details. ");
		}

		public static int MagickImage_HasAlpha_Get(
					global::System.IntPtr instance, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_HasAlpha_Get\' from this method. Please look fo" +
					"r this method in build warnings for more details. ");
		}

		public static void MagickImage_HasAlpha_Set(
					global::System.IntPtr instance, 
					int value, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_HasAlpha_Set\' from this method. Please look fo" +
					"r this method in build warnings for more details. ");
		}

		public static global::System.UIntPtr MagickImage_Interlace_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_Interlace_Get\' from this method. Please look f" +
					"or this method in build warnings for more details. ");
		}

		public static void MagickImage_Interlace_Set(
					global::System.IntPtr instance, 
					global::System.UIntPtr value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_Interlace_Set\' from this method. Please look f" +
					"or this method in build warnings for more details. ");
		}

		public static global::System.UIntPtr MagickImage_Interpolate_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_Interpolate_Get\' from this method. Please look" +
					" for this method in build warnings for more details. ");
		}

		public static void MagickImage_Interpolate_Set(
					global::System.IntPtr instance, 
					global::System.UIntPtr value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_Interpolate_Set\' from this method. Please look" +
					" for this method in build warnings for more details. ");
		}

		public static int MagickImage_IsOpaque_Get(
					global::System.IntPtr instance, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_IsOpaque_Get\' from this method. Please look fo" +
					"r this method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_MatteColor_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_MatteColor_Get\' from this method. Please look " +
					"for this method in build warnings for more details. ");
		}

		public static void MagickImage_MatteColor_Set(
					global::System.IntPtr instance, 
					global::System.IntPtr value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_MatteColor_Set\' from this method. Please look " +
					"for this method in build warnings for more details. ");
		}

		public static double MagickImage_MeanErrorPerPixel_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_MeanErrorPerPixel_Get\' from this method. Pleas" +
					"e look for this method in build warnings for more details. ");
		}

		public static double MagickImage_NormalizedMaximumError_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_NormalizedMaximumError_Get\' from this method. " +
					"Please look for this method in build warnings for more details. ");
		}

		public static double MagickImage_NormalizedMeanError_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_NormalizedMeanError_Get\' from this method. Ple" +
					"ase look for this method in build warnings for more details. ");
		}

		public static global::System.UIntPtr MagickImage_Orientation_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_Orientation_Get\' from this method. Please look" +
					" for this method in build warnings for more details. ");
		}

		public static void MagickImage_Orientation_Set(
					global::System.IntPtr instance, 
					global::System.UIntPtr value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_Orientation_Set\' from this method. Please look" +
					" for this method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_Page_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_Page_Get\' from this method. Please look for th" +
					"is method in build warnings for more details. ");
		}

		public static void MagickImage_Page_Set(
					global::System.IntPtr instance, 
					global::System.IntPtr value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_Page_Set\' from this method. Please look for th" +
					"is method in build warnings for more details. ");
		}

		public static global::System.UIntPtr MagickImage_Quality_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_Quality_Get\' from this method. Please look for" +
					" this method in build warnings for more details. ");
		}

		public static void MagickImage_Quality_Set(
					global::System.IntPtr instance, 
					global::System.UIntPtr value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_Quality_Set\' from this method. Please look for" +
					" this method in build warnings for more details. ");
		}

		public static global::System.UIntPtr MagickImage_RenderingIntent_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_RenderingIntent_Get\' from this method. Please " +
					"look for this method in build warnings for more details. ");
		}

		public static void MagickImage_RenderingIntent_Set(
					global::System.IntPtr instance, 
					global::System.UIntPtr value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_RenderingIntent_Set\' from this method. Please " +
					"look for this method in build warnings for more details. ");
		}

		public static global::System.UIntPtr MagickImage_ResolutionUnits_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_ResolutionUnits_Get\' from this method. Please " +
					"look for this method in build warnings for more details. ");
		}

		public static void MagickImage_ResolutionUnits_Set(
					global::System.IntPtr instance, 
					global::System.UIntPtr value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_ResolutionUnits_Set\' from this method. Please " +
					"look for this method in build warnings for more details. ");
		}

		public static double MagickImage_ResolutionX_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_ResolutionX_Get\' from this method. Please look" +
					" for this method in build warnings for more details. ");
		}

		public static void MagickImage_ResolutionX_Set(
					global::System.IntPtr instance, 
					double value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_ResolutionX_Set\' from this method. Please look" +
					" for this method in build warnings for more details. ");
		}

		public static double MagickImage_ResolutionY_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_ResolutionY_Get\' from this method. Please look" +
					" for this method in build warnings for more details. ");
		}

		public static void MagickImage_ResolutionY_Set(
					global::System.IntPtr instance, 
					double value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_ResolutionY_Set\' from this method. Please look" +
					" for this method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_Signature_Get(
					global::System.IntPtr instance, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_Signature_Get\' from this method. Please look f" +
					"or this method in build warnings for more details. ");
		}

		public static global::System.UIntPtr MagickImage_TotalColors_Get(
					global::System.IntPtr instance, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_TotalColors_Get\' from this method. Please look" +
					" for this method in build warnings for more details. ");
		}

		public static global::System.UIntPtr MagickImage_VirtualPixelMethod_Get(
					global::System.IntPtr instance, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_VirtualPixelMethod_Get\' from this method. Plea" +
					"se look for this method in build warnings for more details. ");
		}

		public static void MagickImage_VirtualPixelMethod_Set(
					global::System.IntPtr instance, 
					global::System.UIntPtr value, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_VirtualPixelMethod_Set\' from this method. Plea" +
					"se look for this method in build warnings for more details. ");
		}

		public static global::System.UIntPtr MagickImage_Width_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_Width_Get\' from this method. Please look for t" +
					"his method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_AdaptiveBlur(
					global::System.IntPtr Instance, 
					double radius, 
					double sigma, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_AdaptiveBlur\' from this method. Please look fo" +
					"r this method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_AdaptiveResize(
					global::System.IntPtr Instance, 
					global::System.IntPtr geometry, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_AdaptiveResize\' from this method. Please look " +
					"for this method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_AdaptiveSharpen(
					global::System.IntPtr Instance, 
					double radius, 
					double sigma, 
					global::System.UIntPtr channels, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_AdaptiveSharpen\' from this method. Please look" +
					" for this method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_AdaptiveThreshold(
					global::System.IntPtr Instance, 
					global::System.UIntPtr width, 
					global::System.UIntPtr height, 
					double bias, 
					global::System.UIntPtr channels, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_AdaptiveThreshold\' from this method. Please lo" +
					"ok for this method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_AddNoise(
					global::System.IntPtr Instance, 
					global::System.UIntPtr noiseType, 
					double attenuate, 
					global::System.UIntPtr channels, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_AddNoise\' from this method. Please look for th" +
					"is method in build warnings for more details. ");
		}

		public static void MagickImage_AddProfile(
					global::System.IntPtr Instance, 
					global::System.IntPtr name, 
					byte* datum, 
					global::System.UIntPtr length, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_AddProfile\' from this method. Please look for " +
					"this method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_AffineTransform(
					global::System.IntPtr Instance, 
					double scaleX, 
					double scaleY, 
					double shearX, 
					double shearY, 
					double translateX, 
					double translateY, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_AffineTransform\' from this method. Please look" +
					" for this method in build warnings for more details. ");
		}

		public static void MagickImage_Annotate(
					global::System.IntPtr Instance, 
					global::System.IntPtr settings, 
					global::System.IntPtr text, 
					global::System.IntPtr boundingArea, 
					global::System.UIntPtr gravity, 
					double degrees, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_Annotate\' from this method. Please look for th" +
					"is method in build warnings for more details. ");
		}

		public static void MagickImage_AnnotateGravity(
					global::System.IntPtr Instance, 
					global::System.IntPtr settings, 
					global::System.IntPtr text, 
					global::System.UIntPtr gravity, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_AnnotateGravity\' from this method. Please look" +
					" for this method in build warnings for more details. ");
		}

		public static void MagickImage_AutoGamma(
					global::System.IntPtr Instance, 
					global::System.UIntPtr channels, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_AutoGamma\' from this method. Please look for t" +
					"his method in build warnings for more details. ");
		}

		public static void MagickImage_AutoLevel(
					global::System.IntPtr Instance, 
					global::System.UIntPtr channels, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_AutoLevel\' from this method. Please look for t" +
					"his method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_AutoOrient(
					global::System.IntPtr Instance, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_AutoOrient\' from this method. Please look for " +
					"this method in build warnings for more details. ");
		}

		public static void MagickImage_AutoThreshold(
					global::System.IntPtr Instance, 
					global::System.UIntPtr method, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_AutoThreshold\' from this method. Please look f" +
					"or this method in build warnings for more details. ");
		}

		public static void MagickImage_BlackThreshold(
					global::System.IntPtr Instance, 
					global::System.IntPtr threshold, 
					global::System.UIntPtr channels, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_BlackThreshold\' from this method. Please look " +
					"for this method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_BlueShift(
					global::System.IntPtr Instance, 
					double factor, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_BlueShift\' from this method. Please look for t" +
					"his method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_Blur(
					global::System.IntPtr Instance, 
					double radius, 
					double sigma, 
					global::System.UIntPtr channels, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_Blur\' from this method. Please look for this m" +
					"ethod in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_Border(
					global::System.IntPtr Instance, 
					global::System.IntPtr value, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_Border\' from this method. Please look for this" +
					" method in build warnings for more details. ");
		}

		public static void MagickImage_BrightnessContrast(
					global::System.IntPtr Instance, 
					double brightness, 
					double contrast, 
					global::System.UIntPtr channels, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_BrightnessContrast\' from this method. Please l" +
					"ook for this method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_CannyEdge(
					global::System.IntPtr Instance, 
					double radius, 
					double sigma, 
					double lower, 
					double upper, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_CannyEdge\' from this method. Please look for t" +
					"his method in build warnings for more details. ");
		}

		public static global::System.UIntPtr MagickImage_ChannelOffset(
					global::System.IntPtr Instance, 
					global::System.UIntPtr channel)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_ChannelOffset\' from this method. Please look f" +
					"or this method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_Charcoal(
					global::System.IntPtr Instance, 
					double radius, 
					double sigma, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_Charcoal\' from this method. Please look for th" +
					"is method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_Chop(
					global::System.IntPtr Instance, 
					global::System.IntPtr geometry, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_Chop\' from this method. Please look for this m" +
					"ethod in build warnings for more details. ");
		}

		public static void MagickImage_Clahe(
					global::System.IntPtr Instance, 
					global::System.UIntPtr xTiles, 
					global::System.UIntPtr yTiles, 
					global::System.UIntPtr numberBins, 
					double clipLimit, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_Clahe\' from this method. Please look for this " +
					"method in build warnings for more details. ");
		}

		public static void MagickImage_Clamp(
					global::System.IntPtr Instance, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_Clamp\' from this method. Please look for this " +
					"method in build warnings for more details. ");
		}

		public static void MagickImage_ClampChannel(
					global::System.IntPtr Instance, 
					global::System.UIntPtr channels, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_ClampChannel\' from this method. Please look fo" +
					"r this method in build warnings for more details. ");
		}

		public static void MagickImage_Clip(
					global::System.IntPtr Instance, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_Clip\' from this method. Please look for this m" +
					"ethod in build warnings for more details. ");
		}

		public static void MagickImage_ClipPath(
					global::System.IntPtr Instance, 
					global::System.IntPtr pathName, 
					int inside, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_ClipPath\' from this method. Please look for th" +
					"is method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_Clone(
					global::System.IntPtr Instance, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_Clone\' from this method. Please look for this " +
					"method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_CloneArea(
					global::System.IntPtr Instance, 
					global::System.UIntPtr width, 
					global::System.UIntPtr height, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_CloneArea\' from this method. Please look for t" +
					"his method in build warnings for more details. ");
		}

		public static void MagickImage_Clut(
					global::System.IntPtr Instance, 
					global::System.IntPtr image, 
					global::System.UIntPtr method, 
					global::System.UIntPtr channels, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_Clut\' from this method. Please look for this m" +
					"ethod in build warnings for more details. ");
		}

		public static void MagickImage_ColorDecisionList(
					global::System.IntPtr Instance, 
					global::System.IntPtr fileName, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_ColorDecisionList\' from this method. Please lo" +
					"ok for this method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_Colorize(
					global::System.IntPtr Instance, 
					global::System.IntPtr color, 
					global::System.IntPtr blend, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_Colorize\' from this method. Please look for th" +
					"is method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_ColorMatrix(
					global::System.IntPtr Instance, 
					global::System.IntPtr matrix, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_ColorMatrix\' from this method. Please look for" +
					" this method in build warnings for more details. ");
		}

		public static void MagickImage_ColorThreshold(
					global::System.IntPtr Instance, 
					global::System.IntPtr startColor, 
					global::System.IntPtr stopColor, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_ColorThreshold\' from this method. Please look " +
					"for this method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_Compare(
					global::System.IntPtr Instance, 
					global::System.IntPtr image, 
					global::System.UIntPtr metric, 
					global::System.UIntPtr channels, 
					double* distortion, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_Compare\' from this method. Please look for thi" +
					"s method in build warnings for more details. ");
		}

		public static double MagickImage_CompareDistortion(
					global::System.IntPtr Instance, 
					global::System.IntPtr image, 
					global::System.UIntPtr metric, 
					global::System.UIntPtr channels, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_CompareDistortion\' from this method. Please lo" +
					"ok for this method in build warnings for more details. ");
		}

		public static void MagickImage_Composite(
					global::System.IntPtr Instance, 
					global::System.IntPtr image, 
					global::System.IntPtr x, 
					global::System.IntPtr y, 
					global::System.UIntPtr compose, 
					global::System.UIntPtr channels, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_Composite\' from this method. Please look for t" +
					"his method in build warnings for more details. ");
		}

		public static void MagickImage_CompositeGravity(
					global::System.IntPtr Instance, 
					global::System.IntPtr image, 
					global::System.UIntPtr gravity, 
					global::System.IntPtr x, 
					global::System.IntPtr y, 
					global::System.UIntPtr compose, 
					global::System.UIntPtr channels, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_CompositeGravity\' from this method. Please loo" +
					"k for this method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_ConnectedComponents(
					global::System.IntPtr Instance, 
					global::System.UIntPtr connectivity, 
					global::System.IntPtr* objects, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_ConnectedComponents\' from this method. Please " +
					"look for this method in build warnings for more details. ");
		}

		public static void MagickImage_Contrast(
					global::System.IntPtr Instance, 
					int enhance, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_Contrast\' from this method. Please look for th" +
					"is method in build warnings for more details. ");
		}

		public static void MagickImage_ContrastStretch(
					global::System.IntPtr Instance, 
					double blackPoint, 
					double whitePoint, 
					global::System.UIntPtr channels, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_ContrastStretch\' from this method. Please look" +
					" for this method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_ConvexHull(
					global::System.IntPtr Instance, 
					global::System.UIntPtr* length, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_ConvexHull\' from this method. Please look for " +
					"this method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_Convolve(
					global::System.IntPtr Instance, 
					global::System.IntPtr matrix, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_Convolve\' from this method. Please look for th" +
					"is method in build warnings for more details. ");
		}

		public static void MagickImage_CopyPixels(
					global::System.IntPtr Instance, 
					global::System.IntPtr image, 
					global::System.IntPtr geometry, 
					global::System.IntPtr offset, 
					global::System.UIntPtr channels, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_CopyPixels\' from this method. Please look for " +
					"this method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_Crop(
					global::System.IntPtr Instance, 
					global::System.IntPtr geometry, 
					global::System.UIntPtr gravity, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_Crop\' from this method. Please look for this m" +
					"ethod in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_CropToTiles(
					global::System.IntPtr Instance, 
					global::System.IntPtr geometry, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_CropToTiles\' from this method. Please look for" +
					" this method in build warnings for more details. ");
		}

		public static void MagickImage_CycleColormap(
					global::System.IntPtr Instance, 
					global::System.IntPtr amount, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_CycleColormap\' from this method. Please look f" +
					"or this method in build warnings for more details. ");
		}

		public static void MagickImage_Decipher(
					global::System.IntPtr Instance, 
					global::System.IntPtr passphrase, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_Decipher\' from this method. Please look for th" +
					"is method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_Deskew(
					global::System.IntPtr Instance, 
					double threshold, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_Deskew\' from this method. Please look for this" +
					" method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_Despeckle(
					global::System.IntPtr Instance, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_Despeckle\' from this method. Please look for t" +
					"his method in build warnings for more details. ");
		}

		public static global::System.UIntPtr MagickImage_DetermineColorType(
					global::System.IntPtr Instance, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_DetermineColorType\' from this method. Please l" +
					"ook for this method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_Distort(
					global::System.IntPtr Instance, 
					global::System.UIntPtr method, 
					int bestfit, 
					double* arguments, 
					global::System.UIntPtr length, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_Distort\' from this method. Please look for thi" +
					"s method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_Edge(
					global::System.IntPtr Instance, 
					double radius, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_Edge\' from this method. Please look for this m" +
					"ethod in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_Emboss(
					global::System.IntPtr Instance, 
					double radius, 
					double sigma, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_Emboss\' from this method. Please look for this" +
					" method in build warnings for more details. ");
		}

		public static void MagickImage_Encipher(
					global::System.IntPtr Instance, 
					global::System.IntPtr passphrase, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_Encipher\' from this method. Please look for th" +
					"is method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_Enhance(
					global::System.IntPtr Instance, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_Enhance\' from this method. Please look for thi" +
					"s method in build warnings for more details. ");
		}

		public static void MagickImage_Equalize(
					global::System.IntPtr Instance, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_Equalize\' from this method. Please look for th" +
					"is method in build warnings for more details. ");
		}

		public static int MagickImage_Equals(
					global::System.IntPtr Instance, 
					global::System.IntPtr image, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_Equals\' from this method. Please look for this" +
					" method in build warnings for more details. ");
		}

		public static void MagickImage_EvaluateFunction(
					global::System.IntPtr Instance, 
					global::System.UIntPtr channels, 
					global::System.UIntPtr evaluateFunction, 
					double* values, 
					global::System.UIntPtr length, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_EvaluateFunction\' from this method. Please loo" +
					"k for this method in build warnings for more details. ");
		}

		public static void MagickImage_EvaluateGeometry(
					global::System.IntPtr Instance, 
					global::System.UIntPtr channels, 
					global::System.IntPtr geometry, 
					global::System.UIntPtr evaluateOperator, 
					double value, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_EvaluateGeometry\' from this method. Please loo" +
					"k for this method in build warnings for more details. ");
		}

		public static void MagickImage_EvaluateOperator(
					global::System.IntPtr Instance, 
					global::System.UIntPtr channels, 
					global::System.UIntPtr evaluateOperator, 
					double value, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_EvaluateOperator\' from this method. Please loo" +
					"k for this method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_Extent(
					global::System.IntPtr Instance, 
					global::System.IntPtr geometry, 
					global::System.UIntPtr gravity, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_Extent\' from this method. Please look for this" +
					" method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_Flip(
					global::System.IntPtr Instance, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_Flip\' from this method. Please look for this m" +
					"ethod in build warnings for more details. ");
		}

		public static void MagickImage_FloodFill(
					global::System.IntPtr Instance, 
					global::System.IntPtr settings, 
					global::System.IntPtr x, 
					global::System.IntPtr y, 
					global::System.IntPtr target, 
					int invert, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_FloodFill\' from this method. Please look for t" +
					"his method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_Flop(
					global::System.IntPtr Instance, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_Flop\' from this method. Please look for this m" +
					"ethod in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_FontTypeMetrics(
					global::System.IntPtr Instance, 
					global::System.IntPtr settings, 
					int ignoreNewlines, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_FontTypeMetrics\' from this method. Please look" +
					" for this method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_FormatExpression(
					global::System.IntPtr Instance, 
					global::System.IntPtr settings, 
					global::System.IntPtr expression, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_FormatExpression\' from this method. Please loo" +
					"k for this method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_Frame(
					global::System.IntPtr Instance, 
					global::System.IntPtr geometry, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_Frame\' from this method. Please look for this " +
					"method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_Fx(
					global::System.IntPtr Instance, 
					global::System.IntPtr expression, 
					global::System.UIntPtr channels, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_Fx\' from this method. Please look for this met" +
					"hod in build warnings for more details. ");
		}

		public static void MagickImage_GammaCorrect(
					global::System.IntPtr Instance, 
					double gamma, 
					global::System.UIntPtr channels, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_GammaCorrect\' from this method. Please look fo" +
					"r this method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_GaussianBlur(
					global::System.IntPtr Instance, 
					double radius, 
					double sigma, 
					global::System.UIntPtr channels, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_GaussianBlur\' from this method. Please look fo" +
					"r this method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_GetArtifact(
					global::System.IntPtr Instance, 
					global::System.IntPtr name)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_GetArtifact\' from this method. Please look for" +
					" this method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_GetAttribute(
					global::System.IntPtr Instance, 
					global::System.IntPtr name, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_GetAttribute\' from this method. Please look fo" +
					"r this method in build warnings for more details. ");
		}

		public static global::System.UIntPtr MagickImage_GetBitDepth(
					global::System.IntPtr Instance, 
					global::System.UIntPtr channels, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_GetBitDepth\' from this method. Please look for" +
					" this method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_GetColormap(
					global::System.IntPtr Instance, 
					global::System.UIntPtr index)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_GetColormap\' from this method. Please look for" +
					" this method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_GetNext(global::System.IntPtr image)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_GetNext\' from this method. Please look for thi" +
					"s method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_GetNextArtifactName(global::System.IntPtr Instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_GetNextArtifactName\' from this method. Please " +
					"look for this method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_GetNextAttributeName(global::System.IntPtr Instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_GetNextAttributeName\' from this method. Please" +
					" look for this method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_GetNextProfileName(global::System.IntPtr Instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_GetNextProfileName\' from this method. Please l" +
					"ook for this method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_GetProfile(
					global::System.IntPtr Instance, 
					global::System.IntPtr name, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_GetProfile\' from this method. Please look for " +
					"this method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_GetReadMask(
					global::System.IntPtr Instance, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_GetReadMask\' from this method. Please look for" +
					" this method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_GetWriteMask(
					global::System.IntPtr Instance, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_GetWriteMask\' from this method. Please look fo" +
					"r this method in build warnings for more details. ");
		}

		public static void MagickImage_Grayscale(
					global::System.IntPtr Instance, 
					global::System.UIntPtr method, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_Grayscale\' from this method. Please look for t" +
					"his method in build warnings for more details. ");
		}

		public static void MagickImage_HaldClut(
					global::System.IntPtr Instance, 
					global::System.IntPtr image, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_HaldClut\' from this method. Please look for th" +
					"is method in build warnings for more details. ");
		}

		public static int MagickImage_HasChannel(
					global::System.IntPtr Instance, 
					global::System.UIntPtr channel)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_HasChannel\' from this method. Please look for " +
					"this method in build warnings for more details. ");
		}

		public static int MagickImage_HasProfile(
					global::System.IntPtr Instance, 
					global::System.IntPtr name)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_HasProfile\' from this method. Please look for " +
					"this method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_Histogram(
					global::System.IntPtr Instance, 
					global::System.UIntPtr* length, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_Histogram\' from this method. Please look for t" +
					"his method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_HoughLine(
					global::System.IntPtr Instance, 
					global::System.UIntPtr width, 
					global::System.UIntPtr height, 
					global::System.UIntPtr threshold, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_HoughLine\' from this method. Please look for t" +
					"his method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_Implode(
					global::System.IntPtr Instance, 
					double amount, 
					global::System.UIntPtr method, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_Implode\' from this method. Please look for thi" +
					"s method in build warnings for more details. ");
		}

		public static void MagickImage_Kmeans(
					global::System.IntPtr Instance, 
					global::System.UIntPtr numberColors, 
					global::System.UIntPtr maxIterations, 
					double tolerance, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_Kmeans\' from this method. Please look for this" +
					" method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_Kuwahara(
					global::System.IntPtr Instance, 
					double radius, 
					double sigma, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_Kuwahara\' from this method. Please look for th" +
					"is method in build warnings for more details. ");
		}

		public static void MagickImage_Level(
					global::System.IntPtr Instance, 
					double blackPoint, 
					double whitePoint, 
					double gamma, 
					global::System.UIntPtr channels, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_Level\' from this method. Please look for this " +
					"method in build warnings for more details. ");
		}

		public static void MagickImage_LevelColors(
					global::System.IntPtr Instance, 
					global::System.IntPtr blackColor, 
					global::System.IntPtr whiteColor, 
					global::System.UIntPtr channels, 
					int invert, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_LevelColors\' from this method. Please look for" +
					" this method in build warnings for more details. ");
		}

		public static void MagickImage_Levelize(
					global::System.IntPtr Instance, 
					double blackPoint, 
					double whitePoint, 
					double gamma, 
					global::System.UIntPtr channels, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_Levelize\' from this method. Please look for th" +
					"is method in build warnings for more details. ");
		}

		public static void MagickImage_LinearStretch(
					global::System.IntPtr Instance, 
					double blackPoint, 
					double whitePoint, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_LinearStretch\' from this method. Please look f" +
					"or this method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_LiquidRescale(
					global::System.IntPtr Instance, 
					global::System.IntPtr geometry, 
					double deltaX, 
					double rigidity, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_LiquidRescale\' from this method. Please look f" +
					"or this method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_LocalContrast(
					global::System.IntPtr Instance, 
					double radius, 
					double strength, 
					global::System.UIntPtr channels, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_LocalContrast\' from this method. Please look f" +
					"or this method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_Magnify(
					global::System.IntPtr Instance, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_Magnify\' from this method. Please look for thi" +
					"s method in build warnings for more details. ");
		}

		public static int MagickImage_Map(
					global::System.IntPtr Instance, 
					global::System.IntPtr image, 
					global::System.IntPtr settings, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_Map\' from this method. Please look for this me" +
					"thod in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_MeanShift(
					global::System.IntPtr Instance, 
					global::System.UIntPtr width, 
					global::System.UIntPtr height, 
					double colorDistance, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_MeanShift\' from this method. Please look for t" +
					"his method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_Minify(
					global::System.IntPtr Instance, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_Minify\' from this method. Please look for this" +
					" method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_Moments(
					global::System.IntPtr Instance, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_Moments\' from this method. Please look for thi" +
					"s method in build warnings for more details. ");
		}

		public static void MagickImage_Modulate(
					global::System.IntPtr Instance, 
					global::System.IntPtr modulate, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_Modulate\' from this method. Please look for th" +
					"is method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_MinimumBoundingBox(
					global::System.IntPtr Instance, 
					global::System.UIntPtr* length, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_MinimumBoundingBox\' from this method. Please l" +
					"ook for this method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_Morphology(
					global::System.IntPtr Instance, 
					global::System.UIntPtr method, 
					global::System.IntPtr kernel, 
					global::System.UIntPtr channels, 
					global::System.UIntPtr iterations, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_Morphology\' from this method. Please look for " +
					"this method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_MotionBlur(
					global::System.IntPtr Instance, 
					double radius, 
					double sigma, 
					double angle, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_MotionBlur\' from this method. Please look for " +
					"this method in build warnings for more details. ");
		}

		public static void MagickImage_Negate(
					global::System.IntPtr Instance, 
					int onlyGrayscale, 
					global::System.UIntPtr channels, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_Negate\' from this method. Please look for this" +
					" method in build warnings for more details. ");
		}

		public static void MagickImage_Normalize(
					global::System.IntPtr Instance, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_Normalize\' from this method. Please look for t" +
					"his method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_OilPaint(
					global::System.IntPtr Instance, 
					double radius, 
					double sigma, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_OilPaint\' from this method. Please look for th" +
					"is method in build warnings for more details. ");
		}

		public static void MagickImage_Opaque(
					global::System.IntPtr Instance, 
					global::System.IntPtr target, 
					global::System.IntPtr fill, 
					int invert, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_Opaque\' from this method. Please look for this" +
					" method in build warnings for more details. ");
		}

		public static void MagickImage_OrderedDither(
					global::System.IntPtr Instance, 
					global::System.IntPtr thresholdMap, 
					global::System.UIntPtr channels, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_OrderedDither\' from this method. Please look f" +
					"or this method in build warnings for more details. ");
		}

		public static void MagickImage_Perceptible(
					global::System.IntPtr Instance, 
					double epsilon, 
					global::System.UIntPtr channels, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_Perceptible\' from this method. Please look for" +
					" this method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_PerceptualHash(
					global::System.IntPtr Instance, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_PerceptualHash\' from this method. Please look " +
					"for this method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_Polaroid(
					global::System.IntPtr Instance, 
					global::System.IntPtr settings, 
					global::System.IntPtr caption, 
					double angle, 
					global::System.UIntPtr method, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_Polaroid\' from this method. Please look for th" +
					"is method in build warnings for more details. ");
		}

		public static void MagickImage_Posterize(
					global::System.IntPtr Instance, 
					global::System.UIntPtr levels, 
					global::System.UIntPtr method, 
					global::System.UIntPtr channels, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_Posterize\' from this method. Please look for t" +
					"his method in build warnings for more details. ");
		}

		public static void MagickImage_Quantize(
					global::System.IntPtr Instance, 
					global::System.IntPtr settings, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_Quantize\' from this method. Please look for th" +
					"is method in build warnings for more details. ");
		}

		public static void MagickImage_RaiseOrLower(
					global::System.IntPtr Instance, 
					global::System.UIntPtr size, 
					int raise, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_RaiseOrLower\' from this method. Please look fo" +
					"r this method in build warnings for more details. ");
		}

		public static void MagickImage_RandomThreshold(
					global::System.IntPtr Instance, 
					double low, 
					double high, 
					global::System.UIntPtr channels, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_RandomThreshold\' from this method. Please look" +
					" for this method in build warnings for more details. ");
		}

		public static void MagickImage_RangeThreshold(
					global::System.IntPtr Instance, 
					double low_black, 
					double low_white, 
					double high_white, 
					double high_black, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_RangeThreshold\' from this method. Please look " +
					"for this method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_ReadBlob(
					global::System.IntPtr settings, 
					byte* data, 
					global::System.UIntPtr offset, 
					global::System.UIntPtr length, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_ReadBlob\' from this method. Please look for th" +
					"is method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_ReadFile(
					global::System.IntPtr settings, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_ReadFile\' from this method. Please look for th" +
					"is method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_ReadPixels(
					global::System.UIntPtr width, 
					global::System.UIntPtr height, 
					global::System.IntPtr map, 
					global::System.UIntPtr storageType, 
					byte* data, 
					global::System.UIntPtr offset, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_ReadPixels\' from this method. Please look for " +
					"this method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_ReadStream(
					global::System.IntPtr settings, 
					void* reader, 
					void* seeker, 
					void* teller, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_ReadStream\' from this method. Please look for " +
					"this method in build warnings for more details. ");
		}

		public static void MagickImage_RegionMask(
					global::System.IntPtr Instance, 
					global::System.IntPtr region, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_RegionMask\' from this method. Please look for " +
					"this method in build warnings for more details. ");
		}

		public static void MagickImage_RemoveArtifact(
					global::System.IntPtr Instance, 
					global::System.IntPtr name)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_RemoveArtifact\' from this method. Please look " +
					"for this method in build warnings for more details. ");
		}

		public static void MagickImage_RemoveAttribute(
					global::System.IntPtr Instance, 
					global::System.IntPtr name)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_RemoveAttribute\' from this method. Please look" +
					" for this method in build warnings for more details. ");
		}

		public static void MagickImage_RemoveProfile(
					global::System.IntPtr Instance, 
					global::System.IntPtr name)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_RemoveProfile\' from this method. Please look f" +
					"or this method in build warnings for more details. ");
		}

		public static void MagickImage_ResetArtifactIterator(global::System.IntPtr Instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_ResetArtifactIterator\' from this method. Pleas" +
					"e look for this method in build warnings for more details. ");
		}

		public static void MagickImage_ResetAttributeIterator(global::System.IntPtr Instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_ResetAttributeIterator\' from this method. Plea" +
					"se look for this method in build warnings for more details. ");
		}

		public static void MagickImage_ResetProfileIterator(global::System.IntPtr Instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_ResetProfileIterator\' from this method. Please" +
					" look for this method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_Resample(
					global::System.IntPtr Instance, 
					double resolutionX, 
					double resolutionY, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_Resample\' from this method. Please look for th" +
					"is method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_Resize(
					global::System.IntPtr Instance, 
					global::System.IntPtr geometry, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_Resize\' from this method. Please look for this" +
					" method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_Roll(
					global::System.IntPtr Instance, 
					global::System.IntPtr x, 
					global::System.IntPtr y, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_Roll\' from this method. Please look for this m" +
					"ethod in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_Rotate(
					global::System.IntPtr Instance, 
					double degrees, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_Rotate\' from this method. Please look for this" +
					" method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_RotationalBlur(
					global::System.IntPtr Instance, 
					double angle, 
					global::System.UIntPtr channels, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_RotationalBlur\' from this method. Please look " +
					"for this method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_Sample(
					global::System.IntPtr Instance, 
					global::System.IntPtr geometry, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_Sample\' from this method. Please look for this" +
					" method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_Scale(
					global::System.IntPtr Instance, 
					global::System.IntPtr geometry, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_Scale\' from this method. Please look for this " +
					"method in build warnings for more details. ");
		}

		public static void MagickImage_Segment(
					global::System.IntPtr Instance, 
					global::System.UIntPtr colorSpace, 
					double clusterThreshold, 
					double smoothingThreshold, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_Segment\' from this method. Please look for thi" +
					"s method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_SelectiveBlur(
					global::System.IntPtr Instance, 
					double radius, 
					double sigma, 
					double threshold, 
					global::System.UIntPtr channels, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_SelectiveBlur\' from this method. Please look f" +
					"or this method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_Separate(
					global::System.IntPtr Instance, 
					global::System.UIntPtr channels, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_Separate\' from this method. Please look for th" +
					"is method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_SepiaTone(
					global::System.IntPtr Instance, 
					double threshold, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_SepiaTone\' from this method. Please look for t" +
					"his method in build warnings for more details. ");
		}

		public static void MagickImage_SetAlpha(
					global::System.IntPtr Instance, 
					global::System.UIntPtr value, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_SetAlpha\' from this method. Please look for th" +
					"is method in build warnings for more details. ");
		}

		public static void MagickImage_SetArtifact(
					global::System.IntPtr Instance, 
					global::System.IntPtr name, 
					global::System.IntPtr value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_SetArtifact\' from this method. Please look for" +
					" this method in build warnings for more details. ");
		}

		public static void MagickImage_SetAttribute(
					global::System.IntPtr Instance, 
					global::System.IntPtr name, 
					global::System.IntPtr value, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_SetAttribute\' from this method. Please look fo" +
					"r this method in build warnings for more details. ");
		}

		public static void MagickImage_SetBitDepth(
					global::System.IntPtr Instance, 
					global::System.UIntPtr channels, 
					global::System.UIntPtr value, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_SetBitDepth\' from this method. Please look for" +
					" this method in build warnings for more details. ");
		}

		public static void MagickImage_SetColormap(
					global::System.IntPtr Instance, 
					global::System.UIntPtr index, 
					global::System.IntPtr color, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_SetColormap\' from this method. Please look for" +
					" this method in build warnings for more details. ");
		}

		public static int MagickImage_SetColorMetric(
					global::System.IntPtr Instance, 
					global::System.IntPtr image, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_SetColorMetric\' from this method. Please look " +
					"for this method in build warnings for more details. ");
		}

		public static void MagickImage_SetNext(
					global::System.IntPtr Instance, 
					global::System.IntPtr image)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_SetNext\' from this method. Please look for thi" +
					"s method in build warnings for more details. ");
		}

		public static void MagickImage_SetProgressDelegate(
					global::System.IntPtr Instance, 
					void* method)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_SetProgressDelegate\' from this method. Please " +
					"look for this method in build warnings for more details. ");
		}

		public static void MagickImage_SetReadMask(
					global::System.IntPtr Instance, 
					global::System.IntPtr image, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_SetReadMask\' from this method. Please look for" +
					" this method in build warnings for more details. ");
		}

		public static void MagickImage_SetWriteMask(
					global::System.IntPtr Instance, 
					global::System.IntPtr image, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_SetWriteMask\' from this method. Please look fo" +
					"r this method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_Shade(
					global::System.IntPtr Instance, 
					double azimuth, 
					double elevation, 
					int colorShading, 
					global::System.UIntPtr channels, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_Shade\' from this method. Please look for this " +
					"method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_Shadow(
					global::System.IntPtr Instance, 
					global::System.IntPtr x, 
					global::System.IntPtr y, 
					double sigma, 
					double alphaPercentage, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_Shadow\' from this method. Please look for this" +
					" method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_Sharpen(
					global::System.IntPtr Instance, 
					double radius, 
					double sigma, 
					global::System.UIntPtr channel, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_Sharpen\' from this method. Please look for thi" +
					"s method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_Shave(
					global::System.IntPtr Instance, 
					global::System.UIntPtr leftRight, 
					global::System.UIntPtr topBottom, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_Shave\' from this method. Please look for this " +
					"method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_Shear(
					global::System.IntPtr Instance, 
					double xAngle, 
					double yAngle, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_Shear\' from this method. Please look for this " +
					"method in build warnings for more details. ");
		}

		public static void MagickImage_SigmoidalContrast(
					global::System.IntPtr Instance, 
					int sharpen, 
					double contrast, 
					double midpoint, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_SigmoidalContrast\' from this method. Please lo" +
					"ok for this method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_SparseColor(
					global::System.IntPtr Instance, 
					global::System.UIntPtr channel, 
					global::System.UIntPtr method, 
					double* values, 
					global::System.UIntPtr length, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_SparseColor\' from this method. Please look for" +
					" this method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_Sketch(
					global::System.IntPtr Instance, 
					double radius, 
					double sigma, 
					double angle, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_Sketch\' from this method. Please look for this" +
					" method in build warnings for more details. ");
		}

		public static void MagickImage_Solarize(
					global::System.IntPtr Instance, 
					double factor, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_Solarize\' from this method. Please look for th" +
					"is method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_Splice(
					global::System.IntPtr Instance, 
					global::System.IntPtr geometry, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_Splice\' from this method. Please look for this" +
					" method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_Spread(
					global::System.IntPtr Instance, 
					global::System.UIntPtr method, 
					double radius, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_Spread\' from this method. Please look for this" +
					" method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_Statistic(
					global::System.IntPtr Instance, 
					global::System.UIntPtr type, 
					global::System.UIntPtr width, 
					global::System.UIntPtr height, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_Statistic\' from this method. Please look for t" +
					"his method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_Statistics(
					global::System.IntPtr Instance, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_Statistics\' from this method. Please look for " +
					"this method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_Stegano(
					global::System.IntPtr Instance, 
					global::System.IntPtr watermark, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_Stegano\' from this method. Please look for thi" +
					"s method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_Stereo(
					global::System.IntPtr Instance, 
					global::System.IntPtr rightImage, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_Stereo\' from this method. Please look for this" +
					" method in build warnings for more details. ");
		}

		public static void MagickImage_Strip(
					global::System.IntPtr Instance, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_Strip\' from this method. Please look for this " +
					"method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_SubImageSearch(
					global::System.IntPtr Instance, 
					global::System.IntPtr reference, 
					global::System.UIntPtr metric, 
					double similarityThreshold, 
					global::System.IntPtr offset, 
					double* similarityMetric, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_SubImageSearch\' from this method. Please look " +
					"for this method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_Swirl(
					global::System.IntPtr Instance, 
					global::System.UIntPtr method, 
					double degrees, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_Swirl\' from this method. Please look for this " +
					"method in build warnings for more details. ");
		}

		public static void MagickImage_Texture(
					global::System.IntPtr Instance, 
					global::System.IntPtr image, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_Texture\' from this method. Please look for thi" +
					"s method in build warnings for more details. ");
		}

		public static void MagickImage_Threshold(
					global::System.IntPtr Instance, 
					double threshold, 
					global::System.UIntPtr channels, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_Threshold\' from this method. Please look for t" +
					"his method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_Thumbnail(
					global::System.IntPtr Instance, 
					global::System.IntPtr geometry, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_Thumbnail\' from this method. Please look for t" +
					"his method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_Tint(
					global::System.IntPtr Instance, 
					global::System.IntPtr opacity, 
					global::System.IntPtr tint, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_Tint\' from this method. Please look for this m" +
					"ethod in build warnings for more details. ");
		}

		public static void MagickImage_Transparent(
					global::System.IntPtr Instance, 
					global::System.IntPtr color, 
					int invert, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_Transparent\' from this method. Please look for" +
					" this method in build warnings for more details. ");
		}

		public static void MagickImage_TransparentChroma(
					global::System.IntPtr Instance, 
					global::System.IntPtr colorLow, 
					global::System.IntPtr colorHigh, 
					int invert, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_TransparentChroma\' from this method. Please lo" +
					"ok for this method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_Transpose(
					global::System.IntPtr Instance, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_Transpose\' from this method. Please look for t" +
					"his method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_Transverse(
					global::System.IntPtr Instance, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_Transverse\' from this method. Please look for " +
					"this method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_Trim(
					global::System.IntPtr Instance, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_Trim\' from this method. Please look for this m" +
					"ethod in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_UniqueColors(
					global::System.IntPtr Instance, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_UniqueColors\' from this method. Please look fo" +
					"r this method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_UnsharpMask(
					global::System.IntPtr Instance, 
					double radius, 
					double sigma, 
					double amount, 
					double threshold, 
					global::System.UIntPtr channels, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_UnsharpMask\' from this method. Please look for" +
					" this method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_Vignette(
					global::System.IntPtr Instance, 
					double radius, 
					double sigma, 
					global::System.IntPtr x, 
					global::System.IntPtr y, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_Vignette\' from this method. Please look for th" +
					"is method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_Wave(
					global::System.IntPtr Instance, 
					global::System.UIntPtr method, 
					double amplitude, 
					double length, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_Wave\' from this method. Please look for this m" +
					"ethod in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImage_WaveletDenoise(
					global::System.IntPtr Instance, 
					double threshold, 
					double softness, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_WaveletDenoise\' from this method. Please look " +
					"for this method in build warnings for more details. ");
		}

		public static void MagickImage_WhiteThreshold(
					global::System.IntPtr Instance, 
					global::System.IntPtr threshold, 
					global::System.UIntPtr channels, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_WhiteThreshold\' from this method. Please look " +
					"for this method in build warnings for more details. ");
		}

		public static void MagickImage_WriteFile(
					global::System.IntPtr Instance, 
					global::System.IntPtr settings, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_WriteFile\' from this method. Please look for t" +
					"his method in build warnings for more details. ");
		}

		public static void MagickImage_WriteStream(
					global::System.IntPtr Instance, 
					global::System.IntPtr settings, 
					void* writer, 
					void* seeker, 
					void* teller, 
					void* reader, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImage_WriteStream\' from this method. Please look for" +
					" this method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImageCollection_Append(
					global::System.IntPtr image, 
					int stack, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImageCollection_Append\' from this method. Please loo" +
					"k for this method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImageCollection_Coalesce(
					global::System.IntPtr image, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImageCollection_Coalesce\' from this method. Please l" +
					"ook for this method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImageCollection_Combine(
					global::System.IntPtr image, 
					global::System.UIntPtr colorSpace, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImageCollection_Combine\' from this method. Please lo" +
					"ok for this method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImageCollection_Complex(
					global::System.IntPtr image, 
					global::System.UIntPtr complexOperator, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImageCollection_Complex\' from this method. Please lo" +
					"ok for this method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImageCollection_Deconstruct(
					global::System.IntPtr image, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImageCollection_Deconstruct\' from this method. Pleas" +
					"e look for this method in build warnings for more details. ");
		}

		public static void MagickImageCollection_Dispose(global::System.IntPtr value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImageCollection_Dispose\' from this method. Please lo" +
					"ok for this method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImageCollection_Evaluate(
					global::System.IntPtr image, 
					global::System.UIntPtr evaluateOperator, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImageCollection_Evaluate\' from this method. Please l" +
					"ook for this method in build warnings for more details. ");
		}

		public static void MagickImageCollection_Map(
					global::System.IntPtr image, 
					global::System.IntPtr settings, 
					global::System.IntPtr remapImage, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImageCollection_Map\' from this method. Please look f" +
					"or this method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImageCollection_Merge(
					global::System.IntPtr image, 
					global::System.UIntPtr method, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImageCollection_Merge\' from this method. Please look" +
					" for this method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImageCollection_Montage(
					global::System.IntPtr image, 
					global::System.IntPtr settings, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImageCollection_Montage\' from this method. Please lo" +
					"ok for this method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImageCollection_Morph(
					global::System.IntPtr image, 
					global::System.UIntPtr frames, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImageCollection_Morph\' from this method. Please look" +
					" for this method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImageCollection_Optimize(
					global::System.IntPtr image, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImageCollection_Optimize\' from this method. Please l" +
					"ook for this method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImageCollection_OptimizePlus(
					global::System.IntPtr image, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImageCollection_OptimizePlus\' from this method. Plea" +
					"se look for this method in build warnings for more details. ");
		}

		public static void MagickImageCollection_OptimizeTransparency(
					global::System.IntPtr image, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImageCollection_OptimizeTransparency\' from this meth" +
					"od. Please look for this method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImageCollection_Polynomial(
					global::System.IntPtr image, 
					double* terms, 
					global::System.UIntPtr length, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImageCollection_Polynomial\' from this method. Please" +
					" look for this method in build warnings for more details. ");
		}

		public static void MagickImageCollection_Quantize(
					global::System.IntPtr image, 
					global::System.IntPtr settings, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImageCollection_Quantize\' from this method. Please l" +
					"ook for this method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImageCollection_ReadBlob(
					global::System.IntPtr settings, 
					byte* data, 
					global::System.UIntPtr offset, 
					global::System.UIntPtr length, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImageCollection_ReadBlob\' from this method. Please l" +
					"ook for this method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImageCollection_ReadFile(
					global::System.IntPtr settings, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImageCollection_ReadFile\' from this method. Please l" +
					"ook for this method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImageCollection_ReadStream(
					global::System.IntPtr settings, 
					void* reader, 
					void* seeker, 
					void* teller, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImageCollection_ReadStream\' from this method. Please" +
					" look for this method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickImageCollection_Smush(
					global::System.IntPtr image, 
					global::System.IntPtr offset, 
					int stack, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImageCollection_Smush\' from this method. Please look" +
					" for this method in build warnings for more details. ");
		}

		public static void MagickImageCollection_WriteFile(
					global::System.IntPtr image, 
					global::System.IntPtr settings, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImageCollection_WriteFile\' from this method. Please " +
					"look for this method in build warnings for more details. ");
		}

		public static void MagickImageCollection_WriteStream(
					global::System.IntPtr image, 
					global::System.IntPtr settings, 
					void* writer, 
					void* seeker, 
					void* teller, 
					void* reader, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickImageCollection_WriteStream\' from this method. Pleas" +
					"e look for this method in build warnings for more details. ");
		}

		public static global::System.IntPtr DoubleMatrix_Create(
					double* values, 
					global::System.UIntPtr order)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!DoubleMatrix_Create\' from this method. Please look for thi" +
					"s method in build warnings for more details. ");
		}

		public static void DoubleMatrix_Dispose(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!DoubleMatrix_Dispose\' from this method. Please look for th" +
					"is method in build warnings for more details. ");
		}

		public static global::System.IntPtr OpenCL_GetDevices(global::System.UIntPtr* length)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!OpenCL_GetDevices\' from this method. Please look for this " +
					"method in build warnings for more details. ");
		}

		public static global::System.IntPtr OpenCL_GetDevice(
					global::System.IntPtr list, 
					global::System.UIntPtr index)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!OpenCL_GetDevice\' from this method. Please look for this m" +
					"ethod in build warnings for more details. ");
		}

		public static int OpenCL_SetEnabled(int value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!OpenCL_SetEnabled\' from this method. Please look for this " +
					"method in build warnings for more details. ");
		}

		public static double OpenCLDevice_BenchmarkScore_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!OpenCLDevice_BenchmarkScore_Get\' from this method. Please " +
					"look for this method in build warnings for more details. ");
		}

		public static global::System.UIntPtr OpenCLDevice_DeviceType_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!OpenCLDevice_DeviceType_Get\' from this method. Please look" +
					" for this method in build warnings for more details. ");
		}

		public static int OpenCLDevice_IsEnabled_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!OpenCLDevice_IsEnabled_Get\' from this method. Please look " +
					"for this method in build warnings for more details. ");
		}

		public static void OpenCLDevice_IsEnabled_Set(
					global::System.IntPtr instance, 
					int value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!OpenCLDevice_IsEnabled_Set\' from this method. Please look " +
					"for this method in build warnings for more details. ");
		}

		public static global::System.IntPtr OpenCLDevice_Name_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!OpenCLDevice_Name_Get\' from this method. Please look for t" +
					"his method in build warnings for more details. ");
		}

		public static global::System.IntPtr OpenCLDevice_Version_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!OpenCLDevice_Version_Get\' from this method. Please look fo" +
					"r this method in build warnings for more details. ");
		}

		public static global::System.IntPtr OpenCLDevice_GetKernelProfileRecords(
					global::System.IntPtr Instance, 
					global::System.UIntPtr* length)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!OpenCLDevice_GetKernelProfileRecords\' from this method. Pl" +
					"ease look for this method in build warnings for more details. ");
		}

		public static global::System.IntPtr OpenCLDevice_GetKernelProfileRecord(
					global::System.IntPtr list, 
					global::System.UIntPtr index)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!OpenCLDevice_GetKernelProfileRecord\' from this method. Ple" +
					"ase look for this method in build warnings for more details. ");
		}

		public static void OpenCLDevice_SetProfileKernels(
					global::System.IntPtr Instance, 
					int value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!OpenCLDevice_SetProfileKernels\' from this method. Please l" +
					"ook for this method in build warnings for more details. ");
		}

		public static long OpenCLKernelProfileRecord_Count_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!OpenCLKernelProfileRecord_Count_Get\' from this method. Ple" +
					"ase look for this method in build warnings for more details. ");
		}

		public static long OpenCLKernelProfileRecord_MaximumDuration_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!OpenCLKernelProfileRecord_MaximumDuration_Get\' from this m" +
					"ethod. Please look for this method in build warnings for more details. ");
		}

		public static long OpenCLKernelProfileRecord_MinimumDuration_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!OpenCLKernelProfileRecord_MinimumDuration_Get\' from this m" +
					"ethod. Please look for this method in build warnings for more details. ");
		}

		public static global::System.IntPtr OpenCLKernelProfileRecord_Name_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!OpenCLKernelProfileRecord_Name_Get\' from this method. Plea" +
					"se look for this method in build warnings for more details. ");
		}

		public static long OpenCLKernelProfileRecord_TotalDuration_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!OpenCLKernelProfileRecord_TotalDuration_Get\' from this met" +
					"hod. Please look for this method in build warnings for more details. ");
		}

		public static global::System.IntPtr PixelCollection_Create(
					global::System.IntPtr image, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!PixelCollection_Create\' from this method. Please look for " +
					"this method in build warnings for more details. ");
		}

		public static void PixelCollection_Dispose(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!PixelCollection_Dispose\' from this method. Please look for" +
					" this method in build warnings for more details. ");
		}

		public static global::System.IntPtr PixelCollection_GetArea(
					global::System.IntPtr Instance, 
					global::System.UIntPtr x, 
					global::System.UIntPtr y, 
					global::System.UIntPtr width, 
					global::System.UIntPtr height, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!PixelCollection_GetArea\' from this method. Please look for" +
					" this method in build warnings for more details. ");
		}

		public static void PixelCollection_SetArea(
					global::System.IntPtr Instance, 
					global::System.UIntPtr x, 
					global::System.UIntPtr y, 
					global::System.UIntPtr width, 
					global::System.UIntPtr height, 
					ushort* values, 
					global::System.UIntPtr length, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!PixelCollection_SetArea\' from this method. Please look for" +
					" this method in build warnings for more details. ");
		}

		public static global::System.IntPtr PixelCollection_ToByteArray(
					global::System.IntPtr Instance, 
					global::System.UIntPtr x, 
					global::System.UIntPtr y, 
					global::System.UIntPtr width, 
					global::System.UIntPtr height, 
					global::System.IntPtr mapping, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!PixelCollection_ToByteArray\' from this method. Please look" +
					" for this method in build warnings for more details. ");
		}

		public static global::System.IntPtr PixelCollection_ToShortArray(
					global::System.IntPtr Instance, 
					global::System.UIntPtr x, 
					global::System.UIntPtr y, 
					global::System.UIntPtr width, 
					global::System.UIntPtr height, 
					global::System.IntPtr mapping, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!PixelCollection_ToShortArray\' from this method. Please loo" +
					"k for this method in build warnings for more details. ");
		}

		public static global::System.UIntPtr Quantum_Depth_Get()
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!Quantum_Depth_Get\' from this method. Please look for this " +
					"method in build warnings for more details. ");
		}

		public static ushort Quantum_Max_Get()
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!Quantum_Max_Get\' from this method. Please look for this me" +
					"thod in build warnings for more details. ");
		}

		public static byte Quantum_ScaleToByte(ushort value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!Quantum_ScaleToByte\' from this method. Please look for thi" +
					"s method in build warnings for more details. ");
		}

		public static ulong ResourceLimits_Area_Get()
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!ResourceLimits_Area_Get\' from this method. Please look for" +
					" this method in build warnings for more details. ");
		}

		public static void ResourceLimits_Area_Set(ulong value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!ResourceLimits_Area_Set\' from this method. Please look for" +
					" this method in build warnings for more details. ");
		}

		public static ulong ResourceLimits_Disk_Get()
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!ResourceLimits_Disk_Get\' from this method. Please look for" +
					" this method in build warnings for more details. ");
		}

		public static void ResourceLimits_Disk_Set(ulong value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!ResourceLimits_Disk_Set\' from this method. Please look for" +
					" this method in build warnings for more details. ");
		}

		public static ulong ResourceLimits_Height_Get()
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!ResourceLimits_Height_Get\' from this method. Please look f" +
					"or this method in build warnings for more details. ");
		}

		public static void ResourceLimits_Height_Set(ulong value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!ResourceLimits_Height_Set\' from this method. Please look f" +
					"or this method in build warnings for more details. ");
		}

		public static ulong ResourceLimits_ListLength_Get()
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!ResourceLimits_ListLength_Get\' from this method. Please lo" +
					"ok for this method in build warnings for more details. ");
		}

		public static void ResourceLimits_ListLength_Set(ulong value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!ResourceLimits_ListLength_Set\' from this method. Please lo" +
					"ok for this method in build warnings for more details. ");
		}

		public static ulong ResourceLimits_Memory_Get()
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!ResourceLimits_Memory_Get\' from this method. Please look f" +
					"or this method in build warnings for more details. ");
		}

		public static void ResourceLimits_Memory_Set(ulong value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!ResourceLimits_Memory_Set\' from this method. Please look f" +
					"or this method in build warnings for more details. ");
		}

		public static ulong ResourceLimits_Thread_Get()
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!ResourceLimits_Thread_Get\' from this method. Please look f" +
					"or this method in build warnings for more details. ");
		}

		public static void ResourceLimits_Thread_Set(ulong value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!ResourceLimits_Thread_Set\' from this method. Please look f" +
					"or this method in build warnings for more details. ");
		}

		public static ulong ResourceLimits_Throttle_Get()
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!ResourceLimits_Throttle_Get\' from this method. Please look" +
					" for this method in build warnings for more details. ");
		}

		public static void ResourceLimits_Throttle_Set(ulong value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!ResourceLimits_Throttle_Set\' from this method. Please look" +
					" for this method in build warnings for more details. ");
		}

		public static ulong ResourceLimits_Width_Get()
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!ResourceLimits_Width_Get\' from this method. Please look fo" +
					"r this method in build warnings for more details. ");
		}

		public static void ResourceLimits_Width_Set(ulong value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!ResourceLimits_Width_Set\' from this method. Please look fo" +
					"r this method in build warnings for more details. ");
		}

		public static void ResourceLimits_LimitMemory(double percentage)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!ResourceLimits_LimitMemory\' from this method. Please look " +
					"for this method in build warnings for more details. ");
		}

		public static global::System.IntPtr DrawingSettings_Create()
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!DrawingSettings_Create\' from this method. Please look for " +
					"this method in build warnings for more details. ");
		}

		public static void DrawingSettings_Dispose(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!DrawingSettings_Dispose\' from this method. Please look for" +
					" this method in build warnings for more details. ");
		}

		public static global::System.IntPtr DrawingSettings_BorderColor_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!DrawingSettings_BorderColor_Get\' from this method. Please " +
					"look for this method in build warnings for more details. ");
		}

		public static void DrawingSettings_BorderColor_Set(
					global::System.IntPtr instance, 
					global::System.IntPtr value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!DrawingSettings_BorderColor_Set\' from this method. Please " +
					"look for this method in build warnings for more details. ");
		}

		public static global::System.IntPtr DrawingSettings_FillColor_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!DrawingSettings_FillColor_Get\' from this method. Please lo" +
					"ok for this method in build warnings for more details. ");
		}

		public static void DrawingSettings_FillColor_Set(
					global::System.IntPtr instance, 
					global::System.IntPtr value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!DrawingSettings_FillColor_Set\' from this method. Please lo" +
					"ok for this method in build warnings for more details. ");
		}

		public static global::System.UIntPtr DrawingSettings_FillRule_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!DrawingSettings_FillRule_Get\' from this method. Please loo" +
					"k for this method in build warnings for more details. ");
		}

		public static void DrawingSettings_FillRule_Set(
					global::System.IntPtr instance, 
					global::System.UIntPtr value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!DrawingSettings_FillRule_Set\' from this method. Please loo" +
					"k for this method in build warnings for more details. ");
		}

		public static global::System.IntPtr DrawingSettings_Font_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!DrawingSettings_Font_Get\' from this method. Please look fo" +
					"r this method in build warnings for more details. ");
		}

		public static void DrawingSettings_Font_Set(
					global::System.IntPtr instance, 
					global::System.IntPtr value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!DrawingSettings_Font_Set\' from this method. Please look fo" +
					"r this method in build warnings for more details. ");
		}

		public static global::System.IntPtr DrawingSettings_FontFamily_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!DrawingSettings_FontFamily_Get\' from this method. Please l" +
					"ook for this method in build warnings for more details. ");
		}

		public static void DrawingSettings_FontFamily_Set(
					global::System.IntPtr instance, 
					global::System.IntPtr value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!DrawingSettings_FontFamily_Set\' from this method. Please l" +
					"ook for this method in build warnings for more details. ");
		}

		public static double DrawingSettings_FontPointsize_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!DrawingSettings_FontPointsize_Get\' from this method. Pleas" +
					"e look for this method in build warnings for more details. ");
		}

		public static void DrawingSettings_FontPointsize_Set(
					global::System.IntPtr instance, 
					double value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!DrawingSettings_FontPointsize_Set\' from this method. Pleas" +
					"e look for this method in build warnings for more details. ");
		}

		public static global::System.UIntPtr DrawingSettings_FontStyle_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!DrawingSettings_FontStyle_Get\' from this method. Please lo" +
					"ok for this method in build warnings for more details. ");
		}

		public static void DrawingSettings_FontStyle_Set(
					global::System.IntPtr instance, 
					global::System.UIntPtr value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!DrawingSettings_FontStyle_Set\' from this method. Please lo" +
					"ok for this method in build warnings for more details. ");
		}

		public static global::System.UIntPtr DrawingSettings_FontWeight_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!DrawingSettings_FontWeight_Get\' from this method. Please l" +
					"ook for this method in build warnings for more details. ");
		}

		public static void DrawingSettings_FontWeight_Set(
					global::System.IntPtr instance, 
					global::System.UIntPtr value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!DrawingSettings_FontWeight_Set\' from this method. Please l" +
					"ook for this method in build warnings for more details. ");
		}

		public static int DrawingSettings_StrokeAntiAlias_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!DrawingSettings_StrokeAntiAlias_Get\' from this method. Ple" +
					"ase look for this method in build warnings for more details. ");
		}

		public static void DrawingSettings_StrokeAntiAlias_Set(
					global::System.IntPtr instance, 
					int value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!DrawingSettings_StrokeAntiAlias_Set\' from this method. Ple" +
					"ase look for this method in build warnings for more details. ");
		}

		public static global::System.IntPtr DrawingSettings_StrokeColor_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!DrawingSettings_StrokeColor_Get\' from this method. Please " +
					"look for this method in build warnings for more details. ");
		}

		public static void DrawingSettings_StrokeColor_Set(
					global::System.IntPtr instance, 
					global::System.IntPtr value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!DrawingSettings_StrokeColor_Set\' from this method. Please " +
					"look for this method in build warnings for more details. ");
		}

		public static double DrawingSettings_StrokeDashOffset_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!DrawingSettings_StrokeDashOffset_Get\' from this method. Pl" +
					"ease look for this method in build warnings for more details. ");
		}

		public static void DrawingSettings_StrokeDashOffset_Set(
					global::System.IntPtr instance, 
					double value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!DrawingSettings_StrokeDashOffset_Set\' from this method. Pl" +
					"ease look for this method in build warnings for more details. ");
		}

		public static global::System.UIntPtr DrawingSettings_StrokeLineCap_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!DrawingSettings_StrokeLineCap_Get\' from this method. Pleas" +
					"e look for this method in build warnings for more details. ");
		}

		public static void DrawingSettings_StrokeLineCap_Set(
					global::System.IntPtr instance, 
					global::System.UIntPtr value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!DrawingSettings_StrokeLineCap_Set\' from this method. Pleas" +
					"e look for this method in build warnings for more details. ");
		}

		public static global::System.UIntPtr DrawingSettings_StrokeLineJoin_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!DrawingSettings_StrokeLineJoin_Get\' from this method. Plea" +
					"se look for this method in build warnings for more details. ");
		}

		public static void DrawingSettings_StrokeLineJoin_Set(
					global::System.IntPtr instance, 
					global::System.UIntPtr value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!DrawingSettings_StrokeLineJoin_Set\' from this method. Plea" +
					"se look for this method in build warnings for more details. ");
		}

		public static global::System.UIntPtr DrawingSettings_StrokeMiterLimit_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!DrawingSettings_StrokeMiterLimit_Get\' from this method. Pl" +
					"ease look for this method in build warnings for more details. ");
		}

		public static void DrawingSettings_StrokeMiterLimit_Set(
					global::System.IntPtr instance, 
					global::System.UIntPtr value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!DrawingSettings_StrokeMiterLimit_Set\' from this method. Pl" +
					"ease look for this method in build warnings for more details. ");
		}

		public static double DrawingSettings_StrokeWidth_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!DrawingSettings_StrokeWidth_Get\' from this method. Please " +
					"look for this method in build warnings for more details. ");
		}

		public static void DrawingSettings_StrokeWidth_Set(
					global::System.IntPtr instance, 
					double value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!DrawingSettings_StrokeWidth_Set\' from this method. Please " +
					"look for this method in build warnings for more details. ");
		}

		public static int DrawingSettings_TextAntiAlias_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!DrawingSettings_TextAntiAlias_Get\' from this method. Pleas" +
					"e look for this method in build warnings for more details. ");
		}

		public static void DrawingSettings_TextAntiAlias_Set(
					global::System.IntPtr instance, 
					int value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!DrawingSettings_TextAntiAlias_Set\' from this method. Pleas" +
					"e look for this method in build warnings for more details. ");
		}

		public static global::System.UIntPtr DrawingSettings_TextDirection_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!DrawingSettings_TextDirection_Get\' from this method. Pleas" +
					"e look for this method in build warnings for more details. ");
		}

		public static void DrawingSettings_TextDirection_Set(
					global::System.IntPtr instance, 
					global::System.UIntPtr value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!DrawingSettings_TextDirection_Set\' from this method. Pleas" +
					"e look for this method in build warnings for more details. ");
		}

		public static global::System.IntPtr DrawingSettings_TextEncoding_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!DrawingSettings_TextEncoding_Get\' from this method. Please" +
					" look for this method in build warnings for more details. ");
		}

		public static void DrawingSettings_TextEncoding_Set(
					global::System.IntPtr instance, 
					global::System.IntPtr value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!DrawingSettings_TextEncoding_Set\' from this method. Please" +
					" look for this method in build warnings for more details. ");
		}

		public static global::System.UIntPtr DrawingSettings_TextGravity_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!DrawingSettings_TextGravity_Get\' from this method. Please " +
					"look for this method in build warnings for more details. ");
		}

		public static void DrawingSettings_TextGravity_Set(
					global::System.IntPtr instance, 
					global::System.UIntPtr value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!DrawingSettings_TextGravity_Set\' from this method. Please " +
					"look for this method in build warnings for more details. ");
		}

		public static double DrawingSettings_TextInterlineSpacing_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!DrawingSettings_TextInterlineSpacing_Get\' from this method" +
					". Please look for this method in build warnings for more details. ");
		}

		public static void DrawingSettings_TextInterlineSpacing_Set(
					global::System.IntPtr instance, 
					double value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!DrawingSettings_TextInterlineSpacing_Set\' from this method" +
					". Please look for this method in build warnings for more details. ");
		}

		public static double DrawingSettings_TextInterwordSpacing_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!DrawingSettings_TextInterwordSpacing_Get\' from this method" +
					". Please look for this method in build warnings for more details. ");
		}

		public static void DrawingSettings_TextInterwordSpacing_Set(
					global::System.IntPtr instance, 
					double value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!DrawingSettings_TextInterwordSpacing_Set\' from this method" +
					". Please look for this method in build warnings for more details. ");
		}

		public static double DrawingSettings_TextKerning_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!DrawingSettings_TextKerning_Get\' from this method. Please " +
					"look for this method in build warnings for more details. ");
		}

		public static void DrawingSettings_TextKerning_Set(
					global::System.IntPtr instance, 
					double value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!DrawingSettings_TextKerning_Set\' from this method. Please " +
					"look for this method in build warnings for more details. ");
		}

		public static global::System.IntPtr DrawingSettings_TextUnderColor_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!DrawingSettings_TextUnderColor_Get\' from this method. Plea" +
					"se look for this method in build warnings for more details. ");
		}

		public static void DrawingSettings_TextUnderColor_Set(
					global::System.IntPtr instance, 
					global::System.IntPtr value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!DrawingSettings_TextUnderColor_Set\' from this method. Plea" +
					"se look for this method in build warnings for more details. ");
		}

		public static void DrawingSettings_SetFillPattern(
					global::System.IntPtr Instance, 
					global::System.IntPtr value, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!DrawingSettings_SetFillPattern\' from this method. Please l" +
					"ook for this method in build warnings for more details. ");
		}

		public static void DrawingSettings_SetAffine(
					global::System.IntPtr Instance, 
					double scaleX, 
					double scaleY, 
					double shearX, 
					double shearY, 
					double translateX, 
					double translateY, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!DrawingSettings_SetAffine\' from this method. Please look f" +
					"or this method in build warnings for more details. ");
		}

		public static void DrawingSettings_SetStrokeDashArray(
					global::System.IntPtr Instance, 
					double* dash, 
					global::System.UIntPtr length)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!DrawingSettings_SetStrokeDashArray\' from this method. Plea" +
					"se look for this method in build warnings for more details. ");
		}

		public static void DrawingSettings_SetStrokePattern(
					global::System.IntPtr Instance, 
					global::System.IntPtr value, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!DrawingSettings_SetStrokePattern\' from this method. Please" +
					" look for this method in build warnings for more details. ");
		}

		public static void DrawingSettings_SetText(
					global::System.IntPtr Instance, 
					global::System.IntPtr value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!DrawingSettings_SetText\' from this method. Please look for" +
					" this method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickSettings_Create()
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickSettings_Create\' from this method. Please look for t" +
					"his method in build warnings for more details. ");
		}

		public static void MagickSettings_Dispose(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickSettings_Dispose\' from this method. Please look for " +
					"this method in build warnings for more details. ");
		}

		public static int MagickSettings_AntiAlias_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickSettings_AntiAlias_Get\' from this method. Please loo" +
					"k for this method in build warnings for more details. ");
		}

		public static void MagickSettings_AntiAlias_Set(
					global::System.IntPtr instance, 
					int value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickSettings_AntiAlias_Set\' from this method. Please loo" +
					"k for this method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickSettings_BackgroundColor_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickSettings_BackgroundColor_Get\' from this method. Plea" +
					"se look for this method in build warnings for more details. ");
		}

		public static void MagickSettings_BackgroundColor_Set(
					global::System.IntPtr instance, 
					global::System.IntPtr value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickSettings_BackgroundColor_Set\' from this method. Plea" +
					"se look for this method in build warnings for more details. ");
		}

		public static global::System.UIntPtr MagickSettings_ColorSpace_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickSettings_ColorSpace_Get\' from this method. Please lo" +
					"ok for this method in build warnings for more details. ");
		}

		public static void MagickSettings_ColorSpace_Set(
					global::System.IntPtr instance, 
					global::System.UIntPtr value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickSettings_ColorSpace_Set\' from this method. Please lo" +
					"ok for this method in build warnings for more details. ");
		}

		public static global::System.UIntPtr MagickSettings_ColorType_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickSettings_ColorType_Get\' from this method. Please loo" +
					"k for this method in build warnings for more details. ");
		}

		public static void MagickSettings_ColorType_Set(
					global::System.IntPtr instance, 
					global::System.UIntPtr value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickSettings_ColorType_Set\' from this method. Please loo" +
					"k for this method in build warnings for more details. ");
		}

		public static global::System.UIntPtr MagickSettings_Compression_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickSettings_Compression_Get\' from this method. Please l" +
					"ook for this method in build warnings for more details. ");
		}

		public static void MagickSettings_Compression_Set(
					global::System.IntPtr instance, 
					global::System.UIntPtr value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickSettings_Compression_Set\' from this method. Please l" +
					"ook for this method in build warnings for more details. ");
		}

		public static int MagickSettings_Debug_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickSettings_Debug_Get\' from this method. Please look fo" +
					"r this method in build warnings for more details. ");
		}

		public static void MagickSettings_Debug_Set(
					global::System.IntPtr instance, 
					int value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickSettings_Debug_Set\' from this method. Please look fo" +
					"r this method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickSettings_Density_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickSettings_Density_Get\' from this method. Please look " +
					"for this method in build warnings for more details. ");
		}

		public static void MagickSettings_Density_Set(
					global::System.IntPtr instance, 
					global::System.IntPtr value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickSettings_Density_Set\' from this method. Please look " +
					"for this method in build warnings for more details. ");
		}

		public static global::System.UIntPtr MagickSettings_Depth_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickSettings_Depth_Get\' from this method. Please look fo" +
					"r this method in build warnings for more details. ");
		}

		public static void MagickSettings_Depth_Set(
					global::System.IntPtr instance, 
					global::System.UIntPtr value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickSettings_Depth_Set\' from this method. Please look fo" +
					"r this method in build warnings for more details. ");
		}

		public static global::System.UIntPtr MagickSettings_Endian_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickSettings_Endian_Get\' from this method. Please look f" +
					"or this method in build warnings for more details. ");
		}

		public static void MagickSettings_Endian_Set(
					global::System.IntPtr instance, 
					global::System.UIntPtr value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickSettings_Endian_Set\' from this method. Please look f" +
					"or this method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickSettings_Extract_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickSettings_Extract_Get\' from this method. Please look " +
					"for this method in build warnings for more details. ");
		}

		public static void MagickSettings_Extract_Set(
					global::System.IntPtr instance, 
					global::System.IntPtr value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickSettings_Extract_Set\' from this method. Please look " +
					"for this method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickSettings_Format_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickSettings_Format_Get\' from this method. Please look f" +
					"or this method in build warnings for more details. ");
		}

		public static void MagickSettings_Format_Set(
					global::System.IntPtr instance, 
					global::System.IntPtr value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickSettings_Format_Set\' from this method. Please look f" +
					"or this method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickSettings_Font_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickSettings_Font_Get\' from this method. Please look for" +
					" this method in build warnings for more details. ");
		}

		public static void MagickSettings_Font_Set(
					global::System.IntPtr instance, 
					global::System.IntPtr value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickSettings_Font_Set\' from this method. Please look for" +
					" this method in build warnings for more details. ");
		}

		public static double MagickSettings_FontPointsize_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickSettings_FontPointsize_Get\' from this method. Please" +
					" look for this method in build warnings for more details. ");
		}

		public static void MagickSettings_FontPointsize_Set(
					global::System.IntPtr instance, 
					double value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickSettings_FontPointsize_Set\' from this method. Please" +
					" look for this method in build warnings for more details. ");
		}

		public static int MagickSettings_Monochrome_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickSettings_Monochrome_Get\' from this method. Please lo" +
					"ok for this method in build warnings for more details. ");
		}

		public static void MagickSettings_Monochrome_Set(
					global::System.IntPtr instance, 
					int value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickSettings_Monochrome_Set\' from this method. Please lo" +
					"ok for this method in build warnings for more details. ");
		}

		public static global::System.UIntPtr MagickSettings_Interlace_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickSettings_Interlace_Get\' from this method. Please loo" +
					"k for this method in build warnings for more details. ");
		}

		public static void MagickSettings_Interlace_Set(
					global::System.IntPtr instance, 
					global::System.UIntPtr value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickSettings_Interlace_Set\' from this method. Please loo" +
					"k for this method in build warnings for more details. ");
		}

		public static int MagickSettings_Verbose_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickSettings_Verbose_Get\' from this method. Please look " +
					"for this method in build warnings for more details. ");
		}

		public static void MagickSettings_Verbose_Set(
					global::System.IntPtr instance, 
					int value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickSettings_Verbose_Set\' from this method. Please look " +
					"for this method in build warnings for more details. ");
		}

		public static void MagickSettings_SetColorFuzz(
					global::System.IntPtr Instance, 
					double value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickSettings_SetColorFuzz\' from this method. Please look" +
					" for this method in build warnings for more details. ");
		}

		public static void MagickSettings_SetFileName(
					global::System.IntPtr Instance, 
					global::System.IntPtr value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickSettings_SetFileName\' from this method. Please look " +
					"for this method in build warnings for more details. ");
		}

		public static void MagickSettings_SetNumberScenes(
					global::System.IntPtr Instance, 
					global::System.UIntPtr value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickSettings_SetNumberScenes\' from this method. Please l" +
					"ook for this method in build warnings for more details. ");
		}

		public static void MagickSettings_SetOption(
					global::System.IntPtr Instance, 
					global::System.IntPtr key, 
					global::System.IntPtr value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickSettings_SetOption\' from this method. Please look fo" +
					"r this method in build warnings for more details. ");
		}

		public static void MagickSettings_SetPage(
					global::System.IntPtr Instance, 
					global::System.IntPtr value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickSettings_SetPage\' from this method. Please look for " +
					"this method in build warnings for more details. ");
		}

		public static void MagickSettings_SetPing(
					global::System.IntPtr Instance, 
					int value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickSettings_SetPing\' from this method. Please look for " +
					"this method in build warnings for more details. ");
		}

		public static void MagickSettings_SetQuality(
					global::System.IntPtr Instance, 
					global::System.UIntPtr value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickSettings_SetQuality\' from this method. Please look f" +
					"or this method in build warnings for more details. ");
		}

		public static void MagickSettings_SetScenes(
					global::System.IntPtr Instance, 
					global::System.IntPtr value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickSettings_SetScenes\' from this method. Please look fo" +
					"r this method in build warnings for more details. ");
		}

		public static void MagickSettings_SetScene(
					global::System.IntPtr Instance, 
					global::System.UIntPtr value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickSettings_SetScene\' from this method. Please look for" +
					" this method in build warnings for more details. ");
		}

		public static void MagickSettings_SetSize(
					global::System.IntPtr Instance, 
					global::System.IntPtr value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickSettings_SetSize\' from this method. Please look for " +
					"this method in build warnings for more details. ");
		}

		public static global::System.IntPtr MontageSettings_Create()
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MontageSettings_Create\' from this method. Please look for " +
					"this method in build warnings for more details. ");
		}

		public static void MontageSettings_Dispose(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MontageSettings_Dispose\' from this method. Please look for" +
					" this method in build warnings for more details. ");
		}

		public static void MontageSettings_SetBackgroundColor(
					global::System.IntPtr Instance, 
					global::System.IntPtr value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MontageSettings_SetBackgroundColor\' from this method. Plea" +
					"se look for this method in build warnings for more details. ");
		}

		public static void MontageSettings_SetBorderColor(
					global::System.IntPtr Instance, 
					global::System.IntPtr value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MontageSettings_SetBorderColor\' from this method. Please l" +
					"ook for this method in build warnings for more details. ");
		}

		public static void MontageSettings_SetBorderWidth(
					global::System.IntPtr Instance, 
					global::System.UIntPtr value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MontageSettings_SetBorderWidth\' from this method. Please l" +
					"ook for this method in build warnings for more details. ");
		}

		public static void MontageSettings_SetFillColor(
					global::System.IntPtr Instance, 
					global::System.IntPtr value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MontageSettings_SetFillColor\' from this method. Please loo" +
					"k for this method in build warnings for more details. ");
		}

		public static void MontageSettings_SetFont(
					global::System.IntPtr Instance, 
					global::System.IntPtr value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MontageSettings_SetFont\' from this method. Please look for" +
					" this method in build warnings for more details. ");
		}

		public static void MontageSettings_SetFontPointsize(
					global::System.IntPtr Instance, 
					double value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MontageSettings_SetFontPointsize\' from this method. Please" +
					" look for this method in build warnings for more details. ");
		}

		public static void MontageSettings_SetFrameGeometry(
					global::System.IntPtr Instance, 
					global::System.IntPtr value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MontageSettings_SetFrameGeometry\' from this method. Please" +
					" look for this method in build warnings for more details. ");
		}

		public static void MontageSettings_SetGeometry(
					global::System.IntPtr Instance, 
					global::System.IntPtr value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MontageSettings_SetGeometry\' from this method. Please look" +
					" for this method in build warnings for more details. ");
		}

		public static void MontageSettings_SetGravity(
					global::System.IntPtr Instance, 
					global::System.UIntPtr value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MontageSettings_SetGravity\' from this method. Please look " +
					"for this method in build warnings for more details. ");
		}

		public static void MontageSettings_SetShadow(
					global::System.IntPtr Instance, 
					int value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MontageSettings_SetShadow\' from this method. Please look f" +
					"or this method in build warnings for more details. ");
		}

		public static void MontageSettings_SetStrokeColor(
					global::System.IntPtr Instance, 
					global::System.IntPtr value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MontageSettings_SetStrokeColor\' from this method. Please l" +
					"ook for this method in build warnings for more details. ");
		}

		public static void MontageSettings_SetTextureFileName(
					global::System.IntPtr Instance, 
					global::System.IntPtr value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MontageSettings_SetTextureFileName\' from this method. Plea" +
					"se look for this method in build warnings for more details. ");
		}

		public static void MontageSettings_SetTileGeometry(
					global::System.IntPtr Instance, 
					global::System.IntPtr value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MontageSettings_SetTileGeometry\' from this method. Please " +
					"look for this method in build warnings for more details. ");
		}

		public static void MontageSettings_SetTitle(
					global::System.IntPtr Instance, 
					global::System.IntPtr value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MontageSettings_SetTitle\' from this method. Please look fo" +
					"r this method in build warnings for more details. ");
		}

		public static global::System.IntPtr QuantizeSettings_Create()
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!QuantizeSettings_Create\' from this method. Please look for" +
					" this method in build warnings for more details. ");
		}

		public static void QuantizeSettings_Dispose(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!QuantizeSettings_Dispose\' from this method. Please look fo" +
					"r this method in build warnings for more details. ");
		}

		public static void QuantizeSettings_SetColors(
					global::System.IntPtr Instance, 
					global::System.UIntPtr value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!QuantizeSettings_SetColors\' from this method. Please look " +
					"for this method in build warnings for more details. ");
		}

		public static void QuantizeSettings_SetColorSpace(
					global::System.IntPtr Instance, 
					global::System.UIntPtr value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!QuantizeSettings_SetColorSpace\' from this method. Please l" +
					"ook for this method in build warnings for more details. ");
		}

		public static void QuantizeSettings_SetDitherMethod(
					global::System.IntPtr Instance, 
					global::System.UIntPtr value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!QuantizeSettings_SetDitherMethod\' from this method. Please" +
					" look for this method in build warnings for more details. ");
		}

		public static void QuantizeSettings_SetMeasureErrors(
					global::System.IntPtr Instance, 
					int value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!QuantizeSettings_SetMeasureErrors\' from this method. Pleas" +
					"e look for this method in build warnings for more details. ");
		}

		public static void QuantizeSettings_SetTreeDepth(
					global::System.IntPtr Instance, 
					global::System.UIntPtr value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!QuantizeSettings_SetTreeDepth\' from this method. Please lo" +
					"ok for this method in build warnings for more details. ");
		}

		public static global::System.IntPtr ChannelMoments_Centroid_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!ChannelMoments_Centroid_Get\' from this method. Please look" +
					" for this method in build warnings for more details. ");
		}

		public static double ChannelMoments_EllipseAngle_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!ChannelMoments_EllipseAngle_Get\' from this method. Please " +
					"look for this method in build warnings for more details. ");
		}

		public static global::System.IntPtr ChannelMoments_EllipseAxis_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!ChannelMoments_EllipseAxis_Get\' from this method. Please l" +
					"ook for this method in build warnings for more details. ");
		}

		public static double ChannelMoments_EllipseEccentricity_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!ChannelMoments_EllipseEccentricity_Get\' from this method. " +
					"Please look for this method in build warnings for more details. ");
		}

		public static double ChannelMoments_EllipseIntensity_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!ChannelMoments_EllipseIntensity_Get\' from this method. Ple" +
					"ase look for this method in build warnings for more details. ");
		}

		public static double ChannelMoments_GetHuInvariants(
					global::System.IntPtr Instance, 
					global::System.UIntPtr index)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!ChannelMoments_GetHuInvariants\' from this method. Please l" +
					"ook for this method in build warnings for more details. ");
		}

		public static double ChannelPerceptualHash_GetSrgbHuPhash(
					global::System.IntPtr Instance, 
					global::System.UIntPtr index)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!ChannelPerceptualHash_GetSrgbHuPhash\' from this method. Pl" +
					"ease look for this method in build warnings for more details. ");
		}

		public static double ChannelPerceptualHash_GetHclpHuPhash(
					global::System.IntPtr Instance, 
					global::System.UIntPtr index)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!ChannelPerceptualHash_GetHclpHuPhash\' from this method. Pl" +
					"ease look for this method in build warnings for more details. ");
		}

		public static global::System.UIntPtr ChannelStatistics_Depth_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!ChannelStatistics_Depth_Get\' from this method. Please look" +
					" for this method in build warnings for more details. ");
		}

		public static double ChannelStatistics_Entropy_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!ChannelStatistics_Entropy_Get\' from this method. Please lo" +
					"ok for this method in build warnings for more details. ");
		}

		public static double ChannelStatistics_Kurtosis_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!ChannelStatistics_Kurtosis_Get\' from this method. Please l" +
					"ook for this method in build warnings for more details. ");
		}

		public static double ChannelStatistics_Maximum_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!ChannelStatistics_Maximum_Get\' from this method. Please lo" +
					"ok for this method in build warnings for more details. ");
		}

		public static double ChannelStatistics_Mean_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!ChannelStatistics_Mean_Get\' from this method. Please look " +
					"for this method in build warnings for more details. ");
		}

		public static double ChannelStatistics_Minimum_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!ChannelStatistics_Minimum_Get\' from this method. Please lo" +
					"ok for this method in build warnings for more details. ");
		}

		public static double ChannelStatistics_Skewness_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!ChannelStatistics_Skewness_Get\' from this method. Please l" +
					"ook for this method in build warnings for more details. ");
		}

		public static double ChannelStatistics_StandardDeviation_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!ChannelStatistics_StandardDeviation_Get\' from this method." +
					" Please look for this method in build warnings for more details. ");
		}

		public static double ChannelStatistics_Sum_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!ChannelStatistics_Sum_Get\' from this method. Please look f" +
					"or this method in build warnings for more details. ");
		}

		public static double ChannelStatistics_SumCubed_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!ChannelStatistics_SumCubed_Get\' from this method. Please l" +
					"ook for this method in build warnings for more details. ");
		}

		public static double ChannelStatistics_SumFourthPower_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!ChannelStatistics_SumFourthPower_Get\' from this method. Pl" +
					"ease look for this method in build warnings for more details. ");
		}

		public static double ChannelStatistics_SumSquared_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!ChannelStatistics_SumSquared_Get\' from this method. Please" +
					" look for this method in build warnings for more details. ");
		}

		public static double ChannelStatistics_Variance_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!ChannelStatistics_Variance_Get\' from this method. Please l" +
					"ook for this method in build warnings for more details. ");
		}

		public static void Moments_DisposeList(global::System.IntPtr list)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!Moments_DisposeList\' from this method. Please look for thi" +
					"s method in build warnings for more details. ");
		}

		public static global::System.IntPtr Moments_GetInstance(
					global::System.IntPtr list, 
					global::System.UIntPtr channel)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!Moments_GetInstance\' from this method. Please look for thi" +
					"s method in build warnings for more details. ");
		}

		public static void PerceptualHash_DisposeList(global::System.IntPtr list)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!PerceptualHash_DisposeList\' from this method. Please look " +
					"for this method in build warnings for more details. ");
		}

		public static global::System.IntPtr PerceptualHash_GetInstance(
					global::System.IntPtr image, 
					global::System.IntPtr list, 
					global::System.UIntPtr channel)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!PerceptualHash_GetInstance\' from this method. Please look " +
					"for this method in build warnings for more details. ");
		}

		public static void Statistics_DisposeList(global::System.IntPtr list)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!Statistics_DisposeList\' from this method. Please look for " +
					"this method in build warnings for more details. ");
		}

		public static global::System.IntPtr Statistics_GetInstance(
					global::System.IntPtr list, 
					global::System.UIntPtr channel)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!Statistics_GetInstance\' from this method. Please look for " +
					"this method in build warnings for more details. ");
		}

		public static void ConnectedComponent_DisposeList(global::System.IntPtr list)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!ConnectedComponent_DisposeList\' from this method. Please l" +
					"ook for this method in build warnings for more details. ");
		}

		public static global::System.UIntPtr ConnectedComponent_GetArea(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!ConnectedComponent_GetArea\' from this method. Please look " +
					"for this method in build warnings for more details. ");
		}

		public static global::System.IntPtr ConnectedComponent_GetCentroid(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!ConnectedComponent_GetCentroid\' from this method. Please l" +
					"ook for this method in build warnings for more details. ");
		}

		public static global::System.IntPtr ConnectedComponent_GetColor(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!ConnectedComponent_GetColor\' from this method. Please look" +
					" for this method in build warnings for more details. ");
		}

		public static global::System.UIntPtr ConnectedComponent_GetHeight(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!ConnectedComponent_GetHeight\' from this method. Please loo" +
					"k for this method in build warnings for more details. ");
		}

		public static global::System.IntPtr ConnectedComponent_GetId(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!ConnectedComponent_GetId\' from this method. Please look fo" +
					"r this method in build warnings for more details. ");
		}

		public static global::System.IntPtr ConnectedComponent_GetInstance(
					global::System.IntPtr list, 
					global::System.UIntPtr index)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!ConnectedComponent_GetInstance\' from this method. Please l" +
					"ook for this method in build warnings for more details. ");
		}

		public static global::System.UIntPtr ConnectedComponent_GetWidth(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!ConnectedComponent_GetWidth\' from this method. Please look" +
					" for this method in build warnings for more details. ");
		}

		public static global::System.IntPtr ConnectedComponent_GetX(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!ConnectedComponent_GetX\' from this method. Please look for" +
					" this method in build warnings for more details. ");
		}

		public static global::System.IntPtr ConnectedComponent_GetY(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!ConnectedComponent_GetY\' from this method. Please look for" +
					" this method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickGeometry_Create()
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickGeometry_Create\' from this method. Please look for t" +
					"his method in build warnings for more details. ");
		}

		public static void MagickGeometry_Dispose(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickGeometry_Dispose\' from this method. Please look for " +
					"this method in build warnings for more details. ");
		}

		public static double MagickGeometry_X_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickGeometry_X_Get\' from this method. Please look for th" +
					"is method in build warnings for more details. ");
		}

		public static double MagickGeometry_Y_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickGeometry_Y_Get\' from this method. Please look for th" +
					"is method in build warnings for more details. ");
		}

		public static double MagickGeometry_Width_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickGeometry_Width_Get\' from this method. Please look fo" +
					"r this method in build warnings for more details. ");
		}

		public static double MagickGeometry_Height_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickGeometry_Height_Get\' from this method. Please look f" +
					"or this method in build warnings for more details. ");
		}

		public static global::System.UIntPtr MagickGeometry_Initialize(
					global::System.IntPtr Instance, 
					global::System.IntPtr value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickGeometry_Initialize\' from this method. Please look f" +
					"or this method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickRectangle_Create()
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickRectangle_Create\' from this method. Please look for " +
					"this method in build warnings for more details. ");
		}

		public static void MagickRectangle_Dispose(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickRectangle_Dispose\' from this method. Please look for" +
					" this method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickRectangle_X_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickRectangle_X_Get\' from this method. Please look for t" +
					"his method in build warnings for more details. ");
		}

		public static void MagickRectangle_X_Set(
					global::System.IntPtr instance, 
					global::System.IntPtr value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickRectangle_X_Set\' from this method. Please look for t" +
					"his method in build warnings for more details. ");
		}

		public static global::System.IntPtr MagickRectangle_Y_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickRectangle_Y_Get\' from this method. Please look for t" +
					"his method in build warnings for more details. ");
		}

		public static void MagickRectangle_Y_Set(
					global::System.IntPtr instance, 
					global::System.IntPtr value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickRectangle_Y_Set\' from this method. Please look for t" +
					"his method in build warnings for more details. ");
		}

		public static global::System.UIntPtr MagickRectangle_Width_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickRectangle_Width_Get\' from this method. Please look f" +
					"or this method in build warnings for more details. ");
		}

		public static void MagickRectangle_Width_Set(
					global::System.IntPtr instance, 
					global::System.UIntPtr value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickRectangle_Width_Set\' from this method. Please look f" +
					"or this method in build warnings for more details. ");
		}

		public static global::System.UIntPtr MagickRectangle_Height_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickRectangle_Height_Get\' from this method. Please look " +
					"for this method in build warnings for more details. ");
		}

		public static void MagickRectangle_Height_Set(
					global::System.IntPtr instance, 
					global::System.UIntPtr value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!MagickRectangle_Height_Set\' from this method. Please look " +
					"for this method in build warnings for more details. ");
		}

		public static global::System.IntPtr OffsetInfo_Create()
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!OffsetInfo_Create\' from this method. Please look for this " +
					"method in build warnings for more details. ");
		}

		public static void OffsetInfo_Dispose(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!OffsetInfo_Dispose\' from this method. Please look for this" +
					" method in build warnings for more details. ");
		}

		public static void OffsetInfo_SetX(
					global::System.IntPtr Instance, 
					global::System.UIntPtr value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!OffsetInfo_SetX\' from this method. Please look for this me" +
					"thod in build warnings for more details. ");
		}

		public static void OffsetInfo_SetY(
					global::System.IntPtr Instance, 
					global::System.UIntPtr value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!OffsetInfo_SetY\' from this method. Please look for this me" +
					"thod in build warnings for more details. ");
		}

		public static double PointInfo_X_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!PointInfo_X_Get\' from this method. Please look for this me" +
					"thod in build warnings for more details. ");
		}

		public static double PointInfo_Y_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!PointInfo_Y_Get\' from this method. Please look for this me" +
					"thod in build warnings for more details. ");
		}

		public static global::System.IntPtr PointInfoCollection_Create(global::System.UIntPtr length)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!PointInfoCollection_Create\' from this method. Please look " +
					"for this method in build warnings for more details. ");
		}

		public static void PointInfoCollection_Dispose(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!PointInfoCollection_Dispose\' from this method. Please look" +
					" for this method in build warnings for more details. ");
		}

		public static double PointInfoCollection_GetX(
					global::System.IntPtr Instance, 
					global::System.UIntPtr index)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!PointInfoCollection_GetX\' from this method. Please look fo" +
					"r this method in build warnings for more details. ");
		}

		public static double PointInfoCollection_GetY(
					global::System.IntPtr Instance, 
					global::System.UIntPtr index)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!PointInfoCollection_GetY\' from this method. Please look fo" +
					"r this method in build warnings for more details. ");
		}

		public static void PointInfoCollection_Set(
					global::System.IntPtr Instance, 
					global::System.UIntPtr index, 
					double x, 
					double y)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!PointInfoCollection_Set\' from this method. Please look for" +
					" this method in build warnings for more details. ");
		}

		public static global::System.IntPtr PrimaryInfo_Create()
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!PrimaryInfo_Create\' from this method. Please look for this" +
					" method in build warnings for more details. ");
		}

		public static void PrimaryInfo_Dispose(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!PrimaryInfo_Dispose\' from this method. Please look for thi" +
					"s method in build warnings for more details. ");
		}

		public static double PrimaryInfo_X_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!PrimaryInfo_X_Get\' from this method. Please look for this " +
					"method in build warnings for more details. ");
		}

		public static void PrimaryInfo_X_Set(
					global::System.IntPtr instance, 
					double value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!PrimaryInfo_X_Set\' from this method. Please look for this " +
					"method in build warnings for more details. ");
		}

		public static double PrimaryInfo_Y_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!PrimaryInfo_Y_Get\' from this method. Please look for this " +
					"method in build warnings for more details. ");
		}

		public static void PrimaryInfo_Y_Set(
					global::System.IntPtr instance, 
					double value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!PrimaryInfo_Y_Set\' from this method. Please look for this " +
					"method in build warnings for more details. ");
		}

		public static double PrimaryInfo_Z_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!PrimaryInfo_Z_Get\' from this method. Please look for this " +
					"method in build warnings for more details. ");
		}

		public static void PrimaryInfo_Z_Set(
					global::System.IntPtr instance, 
					double value)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!PrimaryInfo_Z_Set\' from this method. Please look for this " +
					"method in build warnings for more details. ");
		}

		public static global::System.IntPtr StringInfo_Datum_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!StringInfo_Datum_Get\' from this method. Please look for th" +
					"is method in build warnings for more details. ");
		}

		public static global::System.UIntPtr StringInfo_Length_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!StringInfo_Length_Get\' from this method. Please look for t" +
					"his method in build warnings for more details. ");
		}

		public static void TypeMetric_Dispose(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!TypeMetric_Dispose\' from this method. Please look for this" +
					" method in build warnings for more details. ");
		}

		public static double TypeMetric_Ascent_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!TypeMetric_Ascent_Get\' from this method. Please look for t" +
					"his method in build warnings for more details. ");
		}

		public static double TypeMetric_Descent_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!TypeMetric_Descent_Get\' from this method. Please look for " +
					"this method in build warnings for more details. ");
		}

		public static double TypeMetric_MaxHorizontalAdvance_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!TypeMetric_MaxHorizontalAdvance_Get\' from this method. Ple" +
					"ase look for this method in build warnings for more details. ");
		}

		public static double TypeMetric_TextHeight_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!TypeMetric_TextHeight_Get\' from this method. Please look f" +
					"or this method in build warnings for more details. ");
		}

		public static double TypeMetric_TextWidth_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!TypeMetric_TextWidth_Get\' from this method. Please look fo" +
					"r this method in build warnings for more details. ");
		}

		public static double TypeMetric_UnderlinePosition_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!TypeMetric_UnderlinePosition_Get\' from this method. Please" +
					" look for this method in build warnings for more details. ");
		}

		public static double TypeMetric_UnderlineThickness_Get(global::System.IntPtr instance)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!TypeMetric_UnderlineThickness_Get\' from this method. Pleas" +
					"e look for this method in build warnings for more details. ");
		}

		public static void JpegOptimizer_CompressFile(
					global::System.IntPtr input, 
					global::System.IntPtr output, 
					int progressive, 
					int lossless, 
					global::System.UIntPtr quality, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!JpegOptimizer_CompressFile\' from this method. Please look " +
					"for this method in build warnings for more details. ");
		}

		public static void JpegOptimizer_CompressStream(
					void* reader, 
					void* writer, 
					int progressive, 
					int lossless, 
					global::System.UIntPtr quality, 
					global::System.IntPtr* exception)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'Magick.Native-Q16-x86.dll!JpegOptimizer_CompressStream\' from this method. Please loo" +
					"k for this method in build warnings for more details. ");
		}
	}

	public unsafe static partial class libdl_so_PInvokes
	{
		public static global::System.IntPtr UnixLoadLibrary(
					byte* fileName, 
					int flags)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'libdl.so!UnixLoadLibrary\' from this method. Please look for this method in build war" +
					"nings for more details. ");
		}

		public static int UnixFreeLibrary(global::System.IntPtr handle)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'libdl.so!UnixFreeLibrary\' from this method. Please look for this method in build war" +
					"nings for more details. ");
		}

		public static global::System.IntPtr UnixGetProcAddress(
					global::System.IntPtr handle, 
					byte* symbol)
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'libdl.so!UnixGetProcAddress\' from this method. Please look for this method in build " +
					"warnings for more details. ");
		}

		public static global::System.IntPtr UnixGetLastError()
		{
			throw new global::System.TypeLoadException("Unresolved P/Invoke method \'libdl.so!UnixGetLastError\' from this method. Please look for this method in build wa" +
					"rnings for more details. ");
		}
	}

	public unsafe static partial class kernel32_PInvokes
	{
		[global::System.Runtime.InteropServices.DllImport("kernel32", EntryPoint="LoadLibraryW", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System.IntPtr WindowsLoadLibrary(ushort* dllPath);

		[global::System.Runtime.InteropServices.DllImport("kernel32", EntryPoint="FreeLibrary", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int WindowsFreeLibrary(global::System.IntPtr handle);

		[global::System.Runtime.InteropServices.DllImport("kernel32", EntryPoint="GetProcAddress", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System.IntPtr WindowsGetProcAddress(
					global::System.IntPtr handle, 
					byte* procedureName);
	}

	public unsafe static partial class _MRT__PInvokes
	{
		[global::System.Runtime.InteropServices.DllImport("[MRT]", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static uint RhpGetFuncEvalParameterBufferSize();

		[global::System.Runtime.InteropServices.DllImport("[MRT]", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static uint RhpGetFuncEvalMode();

		[global::System.Runtime.InteropServices.DllImport("[MRT]", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static uint RhpRecordDebuggeeInitiatedHandle(void* objectHandle);

		[global::System.Runtime.InteropServices.DllImport("[MRT]", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void RhpVerifyDebuggerCleanup();

		[global::System.Runtime.InteropServices.DllImport("[MRT]", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr RhpGetCurrentThread();

		[global::System.Runtime.InteropServices.DllImport("[MRT]", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static void RhWaitForPendingFinalizers(int allowReentrantWait);

		[global::System.Runtime.InteropServices.DllImport("[MRT]", EntryPoint="RhYield", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static int _RhYield();

		[global::System.Runtime.InteropServices.DllImport("[MRT]", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void RhFlushProcessWriteBuffers();

		[global::System.Runtime.InteropServices.DllImport("[MRT]", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int RhCompatibleReentrantWaitAny(
					int alertable, 
					int timeout, 
					int count, 
					global::System.IntPtr* handles);

		[global::System.Runtime.InteropServices.DllImport("[MRT]", EntryPoint="RhCallDescrWorker", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static void RhCallDescrWorkerNative(global::System.IntPtr callDescr);

		[global::System.Runtime.InteropServices.DllImport("[MRT]", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static void _ecvt_s(
					byte* buffer, 
					int sizeInBytes, 
					double value, 
					int count, 
					int* dec, 
					int* sign);

		[global::System.Runtime.InteropServices.DllImport("[MRT]", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static void memmove(
					byte* dmem, 
					byte* smem, 
					ulong size);

		[global::System.Runtime.InteropServices.DllImport("[MRT]", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static void memset(
					byte* mem, 
					int value, 
					ulong size);
	}

	public unsafe static partial class __PInvokes
	{
		[global::System.Runtime.InteropServices.DllImport("*", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static void CallingConventionConverter_GetStubs(
					global::System.IntPtr* returnVoidStub, 
					global::System.IntPtr* returnIntegerStub, 
					global::System.IntPtr* commonStub);
	}

	public unsafe static partial class api_ms_win_core_winrt_string_l1_1_0_dll_PInvokes
	{
		[global::System.Runtime.InteropServices.DllImport("api-ms-win-core-winrt-string-l1-1-0.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int WindowsCreateStringReference(
					ushort* sourceString, 
					uint length, 
					global::System_Runtime_InteropServices.HSTRING_HEADER__System_Private_Interop* phstringHeader, 
					void* hstring);
	}

	public unsafe static partial class api_ms_win_core_errorhandling_l1_1_0_dll_PInvokes
	{
		[global::System.Runtime.InteropServices.DllImport("api-ms-win-core-errorhandling-l1-1-0.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int GetLastError();

		[global::System.Runtime.InteropServices.DllImport("api-ms-win-core-errorhandling-l1-1-0.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static void SetLastError(uint dwErrCode);
	}

	public unsafe static partial class api_ms_win_core_winrt_l1_1_0_dll_PInvokes
	{
		[global::System.Runtime.InteropServices.DllImport("api-ms-win-core-winrt-l1-1-0.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int RoInitialize(uint initType);
	}

	public unsafe static partial class api_ms_win_core_localization_l1_2_0_dll_PInvokes
	{
		[global::System.Runtime.InteropServices.DllImport("api-ms-win-core-localization-l1-2-0.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int IsValidLocaleName(ushort* lpLocaleName);

		[global::System.Runtime.InteropServices.DllImport("api-ms-win-core-localization-l1-2-0.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int ResolveLocaleName(
					ushort* lpNameToResolve, 
					ushort* lpLocaleName, 
					int cchLocaleName);
	}

	public unsafe static partial class crypt32_dll_PInvokes
	{
		[global::System.Runtime.InteropServices.DllImport("crypt32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System.IntPtr CertDuplicateCertificateContext(global::System.IntPtr pCertContext);

		[global::System.Runtime.InteropServices.DllImport("crypt32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int CertGetCertificateContextProperty(
					global::System.IntPtr pCertContext, 
					global::Internal_Cryptography_Pal_Native.CertContextPropId__System_Security_Cryptography_X509Certificates dwPropId, 
					global::Internal_Cryptography_Pal_Native.CRYPTOAPI_BLOB__System_Security_Cryptography_X509Certificates* pvData, 
					int* pcbData);

		[global::System.Runtime.InteropServices.DllImport("crypt32.dll", EntryPoint="CertDuplicateCertificateContext", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System.IntPtr CertDuplicateCertificateContextWithKeyContainerDeletion(global::System.IntPtr pCertContext);

		[global::System.Runtime.InteropServices.DllImport("crypt32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int CryptQueryObject(
					global::Internal_Cryptography_Pal_Native.CertQueryObjectType__System_Security_Cryptography_X509Certificates dwObjectType, 
					void* pvObject, 
					global::Internal_Cryptography_Pal_Native.ExpectedContentTypeFlags__System_Security_Cryptography_X509Certificates dwExpectedContentTypeFlags, 
					global::Internal_Cryptography_Pal_Native.ExpectedFormatTypeFlags__System_Security_Cryptography_X509Certificates dwExpectedFormatTypeFlags, 
					int dwFlags, 
					global::Internal_Cryptography_Pal_Native.CertEncodingType__System_Security_Cryptography_X509Certificates* pdwMsgAndCertEncodingType, 
					global::Internal_Cryptography_Pal_Native.ContentType__System_Security_Cryptography_X509Certificates* pdwContentType, 
					global::Internal_Cryptography_Pal_Native.FormatType__System_Security_Cryptography_X509Certificates* pdwFormatType, 
					global::System.IntPtr* phCertStore, 
					global::System.IntPtr* phMsg, 
					global::System.IntPtr* ppvContext);

		[global::System.Runtime.InteropServices.DllImport("crypt32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int CertFreeCertificateContext(global::System.IntPtr pCertContext);

		[global::System.Runtime.InteropServices.DllImport("crypt32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int CryptMsgGetParam(
					global::System.IntPtr hCryptMsg, 
					global::Internal_Cryptography_Pal_Native.CryptMessageParameterType__System_Security_Cryptography_X509Certificates dwParamType, 
					int dwIndex, 
					int* pvData, 
					int* pcbData);

		[global::System.Runtime.InteropServices.DllImport("crypt32.dll", EntryPoint="CryptMsgGetParam", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int CryptMsgGetParam__0(
					global::System.IntPtr hCryptMsg, 
					global::Internal_Cryptography_Pal_Native.CryptMessageParameterType__System_Security_Cryptography_X509Certificates dwParamType, 
					int dwIndex, 
					byte* pvData, 
					int* pcbData);

		[global::System.Runtime.InteropServices.DllImport("crypt32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System.IntPtr PFXImportCertStore(
					global::Internal_Cryptography_Pal_Native.CRYPTOAPI_BLOB__System_Security_Cryptography_X509Certificates* pPFX, 
					global::System.IntPtr password, 
					global::Internal_Cryptography_Pal_Native.PfxCertStoreFlags__System_Security_Cryptography_X509Certificates dwFlags);

		[global::System.Runtime.InteropServices.DllImport("crypt32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System.IntPtr CryptFindOIDInfo(
					global::_.Interop_Crypt32_CryptOidInfoKeyType__System_Security_Cryptography_Encoding dwKeyType, 
					global::System.IntPtr pvKey, 
					global::System_Security_Cryptography.OidGroup__System_Security_Cryptography_Encoding group);

		[global::System.Runtime.InteropServices.DllImport("crypt32.dll", EntryPoint="CertGetCertificateContextProperty", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int CertGetCertificateContextProperty__0(
					global::System.IntPtr pCertContext, 
					global::Internal_Cryptography_Pal_Native.CertContextPropId__System_Security_Cryptography_X509Certificates dwPropId, 
					byte* pvData, 
					int* pcbData);

		[global::System.Runtime.InteropServices.DllImport("crypt32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int CertCloseStore(
					global::System.IntPtr hCertStore, 
					int dwFlags);

		[global::System.Runtime.InteropServices.DllImport("crypt32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int CryptMsgClose(global::System.IntPtr hCryptMsg);

		[global::System.Runtime.InteropServices.DllImport("crypt32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System.IntPtr CertFindCertificateInStore(
					global::System.IntPtr hCertStore, 
					global::Internal_Cryptography_Pal_Native.CertEncodingType__System_Security_Cryptography_X509Certificates dwCertEncodingType, 
					global::Internal_Cryptography_Pal_Native.CertFindFlags__System_Security_Cryptography_X509Certificates dwFindFlags, 
					global::Internal_Cryptography_Pal_Native.CertFindType__System_Security_Cryptography_X509Certificates dwFindType, 
					void* pvFindPara, 
					global::Internal_Cryptography_Pal_Native.CERT_CONTEXT__System_Security_Cryptography_X509Certificates* pPrevCertContext);

		[global::System.Runtime.InteropServices.DllImport("crypt32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System.IntPtr CertEnumCertificatesInStore(
					global::System.IntPtr hCertStore, 
					global::Internal_Cryptography_Pal_Native.CERT_CONTEXT__System_Security_Cryptography_X509Certificates* pPrevCertContext);

		[global::System.Runtime.InteropServices.DllImport("crypt32.dll", EntryPoint="CertGetNameStringW", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int CertGetNameString(
					global::System.IntPtr pCertContext, 
					global::Internal_Cryptography_Pal_Native.CertNameType__System_Security_Cryptography_X509Certificates dwType, 
					global::Internal_Cryptography_Pal_Native.CertNameFlags__System_Security_Cryptography_X509Certificates dwFlags, 
					global::Internal_Cryptography_Pal_Native.CertNameStringType__System_Security_Cryptography_X509Certificates* pvTypePara, 
					ushort* pszNameString, 
					int cchNameString);

		[global::System.Runtime.InteropServices.DllImport("crypt32.dll", EntryPoint="CertGetNameStringW", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int CertGetNameString__0(
					global::System.IntPtr pCertContext, 
					global::Internal_Cryptography_Pal_Native.CertNameType__System_Security_Cryptography_X509Certificates dwType, 
					global::Internal_Cryptography_Pal_Native.CertNameFlags__System_Security_Cryptography_X509Certificates dwFlags, 
					global::Internal_Cryptography_Pal_Native.CertNameStrTypeAndFlags__System_Security_Cryptography_X509Certificates* pvPara, 
					ushort* pszNameString, 
					int cchNameString);

		[global::System.Runtime.InteropServices.DllImport("crypt32.dll", EntryPoint="CryptFindOIDInfo", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System.IntPtr CryptFindOIDInfo__0(
					global::_.Interop_Crypt32_CryptOidInfoKeyType__System_Security_Cryptography_X509Certificates dwKeyType, 
					global::System.IntPtr pvKey, 
					global::System_Security_Cryptography.OidGroup__System_Security_Cryptography_Encoding group);

		[global::System.Runtime.InteropServices.DllImport("crypt32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int CertGetCertificateChain(
					global::System.IntPtr hChainEngine, 
					global::System.IntPtr pCertContext, 
					global::Internal_Cryptography_Pal_Native.FILETIME__System_Security_Cryptography_X509Certificates* pTime, 
					global::System.IntPtr hStore, 
					global::Internal_Cryptography_Pal_Native.CERT_CHAIN_PARA__System_Security_Cryptography_X509Certificates* pChainPara, 
					global::Internal_Cryptography_Pal_Native.CertChainFlags__System_Security_Cryptography_X509Certificates dwFlags, 
					global::System.IntPtr pvReserved, 
					global::System.IntPtr* ppChainContext);

		[global::System.Runtime.InteropServices.DllImport("crypt32.dll", EntryPoint="CertNameToStrW", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int CertNameToStr(
					global::Internal_Cryptography_Pal_Native.CertEncodingType__System_Security_Cryptography_X509Certificates dwCertEncodingType, 
					global::Internal_Cryptography_Pal_Native.CRYPTOAPI_BLOB__System_Security_Cryptography_X509Certificates* pName, 
					global::Internal_Cryptography_Pal_Native.CertNameStrTypeAndFlags__System_Security_Cryptography_X509Certificates dwStrType, 
					ushort* psz, 
					int csz);

		[global::System.Runtime.InteropServices.DllImport("crypt32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int CryptFormatObject(
					int dwCertEncodingType, 
					int dwFormatType, 
					int dwFormatStrType, 
					global::System.IntPtr pFormatStruct, 
					byte* lpszStructType, 
					byte* pbEncoded, 
					int cbEncoded, 
					ushort* pbFormat, 
					int* pcbFormat);

		[global::System.Runtime.InteropServices.DllImport("crypt32.dll", EntryPoint="CryptFormatObject", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int CryptFormatObject__0(
					global::Internal_Cryptography_Pal_Native.CertEncodingType__System_Security_Cryptography_X509Certificates dwCertEncodingType, 
					global::Internal_Cryptography_Pal_Native.FormatObjectType__System_Security_Cryptography_X509Certificates dwFormatType, 
					global::Internal_Cryptography_Pal_Native.FormatObjectStringType__System_Security_Cryptography_X509Certificates dwFormatStrType, 
					global::System.IntPtr pFormatStruct, 
					global::System.IntPtr lpszStructType, 
					byte* pbEncoded, 
					int cbEncoded, 
					ushort* pbFormat, 
					int* pcbFormat);

		[global::System.Runtime.InteropServices.DllImport("crypt32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int CryptImportPublicKeyInfoEx2(
					global::Internal_Cryptography_Pal_Native.CertEncodingType__System_Security_Cryptography_X509Certificates dwCertEncodingType, 
					global::Internal_Cryptography_Pal_Native.CERT_PUBLIC_KEY_INFO__System_Security_Cryptography_X509Certificates* pInfo, 
					int dwFlags, 
					void* pvAuxInfo, 
					global::System.IntPtr* phKey);

		[global::System.Runtime.InteropServices.DllImport("crypt32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int CryptDecodeObject(
					global::Internal_Cryptography_Pal_Native.CertEncodingType__System_Security_Cryptography_X509Certificates dwCertEncodingType, 
					global::System.IntPtr lpszStructType, 
					byte* pbEncoded, 
					int cbEncoded, 
					global::Internal_Cryptography_Pal_Native.CryptDecodeObjectFlags__System_Security_Cryptography_X509Certificates dwFlags, 
					byte* pvStructInfo, 
					int* pcbStructInfo);

		[global::System.Runtime.InteropServices.DllImport("crypt32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static void CertFreeCertificateChain(global::System.IntPtr pChainContext);

		[global::System.Runtime.InteropServices.DllImport("crypt32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int CertVerifyCertificateChainPolicy(
					global::System.IntPtr pszPolicyOID, 
					global::System.IntPtr pChainContext, 
					global::Internal_Cryptography_Pal_Native.CERT_CHAIN_POLICY_PARA__System_Security_Cryptography_X509Certificates* pPolicyPara, 
					global::Internal_Cryptography_Pal_Native.CERT_CHAIN_POLICY_STATUS__System_Security_Cryptography_X509Certificates* pPolicyStatus);

		[global::System.Runtime.InteropServices.DllImport("crypt32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int CertAddCertificateLinkToStore(
					global::System.IntPtr hCertStore, 
					global::System.IntPtr pCertContext, 
					global::Internal_Cryptography_Pal_Native.CertStoreAddDisposition__System_Security_Cryptography_X509Certificates dwAddDisposition, 
					global::System.IntPtr ppStoreContext);

		[global::System.Runtime.InteropServices.DllImport("crypt32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int CertControlStore(
					global::System.IntPtr hCertStore, 
					global::Internal_Cryptography_Pal_Native.CertControlStoreFlags__System_Security_Cryptography_X509Certificates dwFlags, 
					global::Internal_Cryptography_Pal_Native.CertControlStoreType__System_Security_Cryptography_X509Certificates dwControlType, 
					global::System.IntPtr pvCtrlPara);

		[global::System.Runtime.InteropServices.DllImport("crypt32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System.IntPtr CertOpenStore(
					global::System.IntPtr lpszStoreProvider, 
					global::Internal_Cryptography_Pal_Native.CertEncodingType__System_Security_Cryptography_X509Certificates dwMsgAndCertEncodingType, 
					global::System.IntPtr hCryptProv, 
					global::Internal_Cryptography_Pal_Native.CertStoreFlags__System_Security_Cryptography_X509Certificates dwFlags, 
					ushort* pvPara);

		[global::System.Runtime.InteropServices.DllImport("crypt32.dll", EntryPoint="CryptDecodeObject", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int CryptDecodeObjectPointer(
					global::Internal_Cryptography_Pal_Native.CertEncodingType__System_Security_Cryptography_X509Certificates dwCertEncodingType, 
					global::System.IntPtr lpszStructType, 
					byte* pbEncoded, 
					int cbEncoded, 
					global::Internal_Cryptography_Pal_Native.CryptDecodeObjectFlags__System_Security_Cryptography_X509Certificates dwFlags, 
					void* pvStructInfo, 
					int* pcbStructInfo);

		[global::System.Runtime.InteropServices.DllImport("crypt32.dll", EntryPoint="CryptFindOIDInfo", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System.IntPtr CryptFindOIDInfo__1(
					global::_.Interop_Crypt32_CryptOidInfoKeyType__System_Security_Cryptography_Cng dwKeyType, 
					global::System.IntPtr pvKey, 
					global::System_Security_Cryptography.OidGroup__System_Security_Cryptography_Encoding group);

		[global::System.Runtime.InteropServices.DllImport("crypt32.dll", EntryPoint="CertVerifyCertificateChainPolicy", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int CertVerifyCertificateChainPolicy__0(
					global::System.IntPtr pszPolicyOID, 
					global::System.IntPtr pChainContext, 
					global::_.Interop_Crypt32_CERT_CHAIN_POLICY_PARA__System_Net_Security* pPolicyPara, 
					global::_.Interop_Crypt32_CERT_CHAIN_POLICY_STATUS__System_Net_Security* pPolicyStatus);

		[global::System.Runtime.InteropServices.DllImport("crypt32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::Internal_Cryptography_Pal_Native.CERT_EXTENSION__System_Security_Cryptography_X509Certificates* CertFindExtension(
					byte* pszObjId, 
					int cExtensions, 
					global::Internal_Cryptography_Pal_Native.CERT_EXTENSION__System_Security_Cryptography_X509Certificates* rgExtensions);

		[global::System.Runtime.InteropServices.DllImport("crypt32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int CertGetValidUsages(
					int cCerts, 
					global::System.IntPtr* rghCerts, 
					int* cNumOIDs, 
					void* rghOIDs, 
					int* pcbOIDs);

		[global::System.Runtime.InteropServices.DllImport("crypt32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int CertGetIntendedKeyUsage(
					global::Internal_Cryptography_Pal_Native.CertEncodingType__System_Security_Cryptography_X509Certificates dwCertEncodingType, 
					global::Internal_Cryptography_Pal_Native.CERT_INFO__System_Security_Cryptography_X509Certificates* pCertInfo, 
					global::System_Security_Cryptography_X509Certificates.X509KeyUsageFlags__System_Security_Cryptography_X509Certificates* pbKeyUsage, 
					int cbKeyUsage);

		[global::System.Runtime.InteropServices.DllImport("crypt32.dll", EntryPoint="CertEnumCertificatesInStore", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::_.Interop_Crypt32_CERT_CONTEXT__System_Net_Security* CertEnumCertificatesInStore__0(
					global::System.IntPtr hCertStore, 
					global::_.Interop_Crypt32_CERT_CONTEXT__System_Net_Security* pPrevCertContext);

		[global::System.Runtime.InteropServices.DllImport("crypt32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int CertVerifyTimeValidity(
					global::Internal_Cryptography_Pal_Native.FILETIME__System_Security_Cryptography_X509Certificates* pTimeToVerify, 
					global::Internal_Cryptography_Pal_Native.CERT_INFO__System_Security_Cryptography_X509Certificates* pCertInfo);

		[global::System.Runtime.InteropServices.DllImport("crypt32.dll", EntryPoint="CertFreeCertificateContext", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int CertFreeCertificateContext__0(global::System.IntPtr pCertContext);
	}

	public unsafe static partial class api_ms_win_core_com_l1_1_0_dll_PInvokes
	{
		[global::System.Runtime.InteropServices.DllImport("api-ms-win-core-com-l1-1-0.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int CoCreateInstance(
					byte* rclsid, 
					global::System.IntPtr pUnkOuter, 
					int dwClsContext, 
					byte* riid, 
					global::System.IntPtr* ppv);
	}

	public unsafe static partial class advapi32_dll_PInvokes
	{
		[global::System.Runtime.InteropServices.DllImport("advapi32.dll", EntryPoint="CryptAcquireContextW", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int CryptAcquireContext(
					global::System.IntPtr* psafeProvHandle, 
					ushort* pszContainer, 
					ushort* pszProvider, 
					int dwProvType, 
					global::Internal_Cryptography_Pal_Native.CryptAcquireContextFlags__System_Security_Cryptography_X509Certificates dwFlags);

		[global::System.Runtime.InteropServices.DllImport("advapi32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int RevertToSelf();

		[global::System.Runtime.InteropServices.DllImport("advapi32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int ImpersonateLoggedOnUser(global::System.IntPtr userToken);

		[global::System.Runtime.InteropServices.DllImport("advapi32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int OpenThreadToken(
					global::System.IntPtr ThreadHandle, 
					global::System_Security_Principal.TokenAccessLevels__System_Security_Principal_Windows dwDesiredAccess, 
					int bOpenAsSelf, 
					global::System.IntPtr* phThreadToken);

		[global::System.Runtime.InteropServices.DllImport("advapi32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int OpenProcessToken(
					global::System.IntPtr ProcessToken, 
					global::System_Security_Principal.TokenAccessLevels__System_Security_Principal_Windows DesiredAccess, 
					global::System.IntPtr* TokenHandle);

		[global::System.Runtime.InteropServices.DllImport("advapi32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int CryptGetKeyParam(
					global::System.IntPtr safeKeyHandle, 
					int dwParam, 
					byte* pbData, 
					int* pdwDataLen, 
					int dwFlags);

		[global::System.Runtime.InteropServices.DllImport("advapi32.dll", EntryPoint="CryptGetDefaultProviderW", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int CryptGetDefaultProvider(
					int dwProvType, 
					global::System.IntPtr pdwReserved, 
					int dwFlags, 
					ushort* pszProvName, 
					int* IntPtrProvName);

		[global::System.Runtime.InteropServices.DllImport("advapi32.dll", EntryPoint="CryptAcquireContextW", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int CryptAcquireContext__0(
					global::System.IntPtr* psafeProvHandle, 
					ushort* pszContainer, 
					ushort* pszProvider, 
					int dwProvType, 
					uint dwFlags);

		[global::System.Runtime.InteropServices.DllImport("advapi32.dll", EntryPoint="CryptGetUserKey", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int _CryptGetUserKey(
					global::System.IntPtr safeProvHandle, 
					int dwKeySpec, 
					global::System.IntPtr* safeKeyHandle);

		[global::System.Runtime.InteropServices.DllImport("advapi32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int CryptGetProvParam(
					global::System.IntPtr safeProvHandle, 
					global::_.Interop_Advapi32_CryptProvParam__System_Security_Cryptography_Csp dwParam, 
					global::System.IntPtr pbData, 
					int* dwDataLen, 
					int dwFlags);

		[global::System.Runtime.InteropServices.DllImport("advapi32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int CryptDestroyKey(global::System.IntPtr hKey);

		[global::System.Runtime.InteropServices.DllImport("advapi32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static uint LsaNtStatusToWinError(uint status);

		[global::System.Runtime.InteropServices.DllImport("advapi32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int DuplicateTokenEx(
					global::System.IntPtr hExistingToken, 
					uint dwDesiredAccess, 
					global::System.IntPtr lpTokenAttributes, 
					uint ImpersonationLevel, 
					uint TokenType, 
					global::System.IntPtr* phNewToken);

		[global::System.Runtime.InteropServices.DllImport("advapi32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int GetTokenInformation(
					global::System.IntPtr TokenHandle, 
					uint TokenInformationClass, 
					global::System.IntPtr TokenInformation, 
					uint TokenInformationLength, 
					uint* ReturnLength);

		[global::System.Runtime.InteropServices.DllImport("advapi32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int CryptReleaseContext(
					global::System.IntPtr safeProvHandle, 
					int dwFlags);

		[global::System.Runtime.InteropServices.DllImport("advapi32.dll", EntryPoint="CryptImportKey", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int _CryptImportKey(
					global::System.IntPtr hProv, 
					byte* pbData, 
					int dwDataLen, 
					global::System.IntPtr hPubKey, 
					int dwFlags, 
					global::System.IntPtr* phKey);

		[global::System.Runtime.InteropServices.DllImport("advapi32.dll", EntryPoint="CryptSetProvParam", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int CryptSetProvParamIndirectPtr(
					global::System.IntPtr safeProvHandle, 
					global::_.Interop_Advapi32_CryptProvParam__System_Security_Cryptography_Csp dwParam, 
					global::System.IntPtr* pbData, 
					int dwFlags);

		[global::System.Runtime.InteropServices.DllImport("advapi32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int CryptSetProvParam(
					global::System.IntPtr safeProvHandle, 
					global::_.Interop_Advapi32_CryptProvParam__System_Security_Cryptography_Csp dwParam, 
					global::System.IntPtr pbData, 
					int dwFlags);

		[global::System.Runtime.InteropServices.DllImport("advapi32.dll", EntryPoint="GetTokenInformation", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int GetTokenInformation__0(
					global::System.IntPtr TokenHandle, 
					uint TokenInformationClass, 
					global::System.IntPtr TokenInformation, 
					uint TokenInformationLength, 
					uint* ReturnLength);

		[global::System.Runtime.InteropServices.DllImport("advapi32.dll", EntryPoint="CryptGenKey", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int _CryptGenKey(
					global::System.IntPtr safeProvHandle, 
					int Algid, 
					int dwFlags, 
					global::System.IntPtr* safeKeyHandle);

		[global::System.Runtime.InteropServices.DllImport("advapi32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static uint LsaLookupSids(
					global::System.IntPtr handle, 
					int count, 
					global::System.IntPtr* sids, 
					global::System.IntPtr* referencedDomains, 
					global::System.IntPtr* names);

		[global::System.Runtime.InteropServices.DllImport("advapi32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static uint LsaLookupNames2(
					global::System.IntPtr handle, 
					int flags, 
					int count, 
					global::_.Interop_UNICODE_STRING__System_Security_Principal_Windows__Impl.UnsafeType* names, 
					global::System.IntPtr* referencedDomains, 
					global::System.IntPtr* sids);

		[global::System.Runtime.InteropServices.DllImport("advapi32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static uint LsaOpenPolicy(
					ushort* systemName, 
					global::_.Interop_LSA_OBJECT_ATTRIBUTES__System_Security_Principal_Windows* attributes, 
					int accessMask, 
					global::System.IntPtr* handle);

		[global::System.Runtime.InteropServices.DllImport("advapi32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int LsaClose(global::System.IntPtr handle);

		[global::System.Runtime.InteropServices.DllImport("advapi32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int LsaFreeMemory(global::System.IntPtr handle);
	}

	public unsafe static partial class ws2_32_dll_PInvokes
	{
		[global::System.Runtime.InteropServices.DllImport("ws2_32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int WSAGetOverlappedResult(
					global::System.IntPtr socketHandle, 
					global::System_Threading.NativeOverlapped__System_Private_CoreLib* overlapped, 
					uint* bytesTransferred, 
					int wait, 
					global::System_Net_Sockets.SocketFlags__System_Net_Sockets* socketFlags);

		[global::System.Runtime.InteropServices.DllImport("ws2_32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System_Net_Sockets.SocketError__System_Net_Primitives setsockopt(
					global::System.IntPtr socketHandle, 
					global::System_Net_Sockets.SocketOptionLevel__System_Net_Sockets optionLevel, 
					global::System_Net_Sockets.SocketOptionName__System_Net_Sockets optionName, 
					global::System.IntPtr* pointer, 
					int optionLength);

		[global::System.Runtime.InteropServices.DllImport("ws2_32.dll", EntryPoint="setsockopt", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System_Net_Sockets.SocketError__System_Net_Primitives setsockopt__0(
					global::System.IntPtr socketHandle, 
					global::System_Net_Sockets.SocketOptionLevel__System_Net_Sockets optionLevel, 
					global::System_Net_Sockets.SocketOptionName__System_Net_Sockets optionName, 
					byte* optionValue, 
					int optionLength);

		[global::System.Runtime.InteropServices.DllImport("ws2_32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System_Net_Sockets.SocketError__System_Net_Primitives getsockname(
					global::System.IntPtr socketHandle, 
					byte* socketAddress, 
					int* socketAddressSize);

		[global::System.Runtime.InteropServices.DllImport("ws2_32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System_Net_Sockets.SocketError__System_Net_Primitives getpeername(
					global::System.IntPtr socketHandle, 
					byte* socketAddress, 
					int* socketAddressSize);

		[global::System.Runtime.InteropServices.DllImport("ws2_32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System_Net_Sockets.SocketError__System_Net_Primitives WSAStartup(
					short wVersionRequested, 
					global::_.Interop_Winsock_WSAData__System_Net_NameResolution__Impl.UnsafeType* lpWSAData);

		[global::System.Runtime.InteropServices.DllImport("ws2_32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int select(
					int ignoredParameter, 
					global::System.IntPtr* readfds, 
					global::System.IntPtr* writefds, 
					global::System.IntPtr* exceptfds, 
					global::_.Interop_Winsock_TimeValue__System_Net_Sockets* timeout);

		[global::System.Runtime.InteropServices.DllImport("ws2_32.dll", EntryPoint="select", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int select__0(
					int ignoredParameter, 
					global::System.IntPtr* readfds, 
					global::System.IntPtr* writefds, 
					global::System.IntPtr* exceptfds, 
					global::System.IntPtr nullTimeout);

		[global::System.Runtime.InteropServices.DllImport("ws2_32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System_Net_Sockets.SocketError__System_Net_Primitives ioctlsocket(
					global::System.IntPtr socketHandle, 
					int cmd, 
					int* argp);

		[global::System.Runtime.InteropServices.DllImport("ws2_32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System_Net_Sockets.SocketError__System_Net_Primitives shutdown(
					global::System.IntPtr socketHandle, 
					int how);

		[global::System.Runtime.InteropServices.DllImport("ws2_32.dll", EntryPoint="setsockopt", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System_Net_Sockets.SocketError__System_Net_Primitives setsockopt__1(
					global::System.IntPtr socketHandle, 
					global::System_Net_Sockets.SocketOptionLevel__System_Net_Sockets optionLevel, 
					global::System_Net_Sockets.SocketOptionName__System_Net_Sockets optionName, 
					int* optionValue, 
					int optionLength);

		[global::System.Runtime.InteropServices.DllImport("ws2_32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int recv(
					global::System.IntPtr socketHandle, 
					byte* pinnedBuffer, 
					int len, 
					global::System_Net_Sockets.SocketFlags__System_Net_Sockets socketFlags);

		[global::System.Runtime.InteropServices.DllImport("ws2_32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System_Net_Sockets.SocketError__System_Net_Primitives WSAIoctl(
					global::System.IntPtr socketHandle, 
					int ioControlCode, 
					global::System.Guid* guid, 
					int guidSize, 
					global::System.IntPtr* funcPtr, 
					int funcPtrSize, 
					int* bytesTransferred, 
					global::System.IntPtr shouldBeNull, 
					global::System.IntPtr shouldBeNull2);

		[global::System.Runtime.InteropServices.DllImport("ws2_32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int GetAddrInfoW(
					ushort* nodename, 
					ushort* servicename, 
					global::System_Net_Sockets.AddressInfo__System_Net_NameResolution* hints, 
					global::System.IntPtr* handle);

		[global::System.Runtime.InteropServices.DllImport("ws2_32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System.IntPtr WSASocketW(
					global::System_Net_Sockets.AddressFamily__System_Net_Primitives addressFamily, 
					global::System_Net_Sockets.SocketType__System_Net_Sockets socketType, 
					int protocolType, 
					global::System.IntPtr protocolInfo, 
					int group, 
					int flags);

		[global::System.Runtime.InteropServices.DllImport("ws2_32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System_Net_Sockets.SocketError__System_Net_Primitives closesocket(global::System.IntPtr socketHandle);

		[global::System.Runtime.InteropServices.DllImport("ws2_32.dll", EntryPoint="WSASocketW", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System.IntPtr WSASocketW__0(
					global::System_Net_Sockets.AddressFamily__System_Net_Primitives addressFamily, 
					global::System_Net_Sockets.SocketType__System_Net_Sockets socketType, 
					global::System_Net_Sockets.ProtocolType__System_Net_Sockets protocolType, 
					global::System.IntPtr protocolInfo, 
					uint group, 
					global::_.Interop_Winsock_SocketConstructorFlags__System_Net_Sockets flags);

		[global::System.Runtime.InteropServices.DllImport("ws2_32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System_Net_Sockets.SocketError__System_Net_Primitives WSAConnect(
					global::System.IntPtr socketHandle, 
					byte* socketAddress, 
					int socketAddressSize, 
					global::System.IntPtr inBuffer, 
					global::System.IntPtr outBuffer, 
					global::System.IntPtr sQOS, 
					global::System.IntPtr gQOS);

		[global::System.Runtime.InteropServices.DllImport("ws2_32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System_Net_Sockets.SocketError__System_Net_Primitives listen(
					global::System.IntPtr socketHandle, 
					int backlog);

		[global::System.Runtime.InteropServices.DllImport("ws2_32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System_Net_Sockets.SocketError__System_Net_Primitives bind(
					global::System.IntPtr socketHandle, 
					byte* socketAddress, 
					int socketAddressSize);

		[global::System.Runtime.InteropServices.DllImport("ws2_32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System_Net_Sockets.SocketError__System_Net_Primitives getsockopt(
					global::System.IntPtr socketHandle, 
					global::System_Net_Sockets.SocketOptionLevel__System_Net_Sockets optionLevel, 
					global::System_Net_Sockets.SocketOptionName__System_Net_Sockets optionName, 
					int* optionValue, 
					int* optionLength);

		[global::System.Runtime.InteropServices.DllImport("ws2_32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int send(
					global::System.IntPtr socketHandle, 
					byte* pinnedBuffer, 
					int len, 
					global::System_Net_Sockets.SocketFlags__System_Net_Sockets socketFlags);

		[global::System.Runtime.InteropServices.DllImport("ws2_32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static void freeaddrinfo(global::System.IntPtr info);

		[global::System.Runtime.InteropServices.DllImport("ws2_32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static void FreeAddrInfoExW(global::System_Net_Sockets.AddressInfoEx__System_Net_NameResolution* pAddrInfo);

		[global::System.Runtime.InteropServices.DllImport("ws2_32.dll", EntryPoint="WSASocketW", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System.IntPtr WSASocketW__1(
					global::System_Net_Sockets.AddressFamily__System_Net_Primitives addressFamily, 
					global::System_Net_Internals.SocketType__System_Net_NameResolution socketType, 
					int protocolType, 
					global::System.IntPtr protocolInfo, 
					int group, 
					int flags);

		[global::System.Runtime.InteropServices.DllImport("ws2_32.dll", EntryPoint="closesocket", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System_Net_Sockets.SocketError__System_Net_Primitives closesocket__0(global::System.IntPtr socketHandle);

		[global::System.Runtime.InteropServices.DllImport("ws2_32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System_Net_Sockets.SocketError__System_Net_Primitives gethostname(
					byte* hostName, 
					int bufferLength);

		[global::System.Runtime.InteropServices.DllImport("ws2_32.dll", EntryPoint="getsockopt", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System_Net_Sockets.SocketError__System_Net_Primitives getsockopt__0(
					global::System.IntPtr socketHandle, 
					global::System_Net_Sockets.SocketOptionLevel__System_Net_Sockets optionLevel, 
					global::System_Net_Sockets.SocketOptionName__System_Net_Sockets optionName, 
					global::_.Interop_Winsock_Linger__System_Net_Sockets* optionValue, 
					int* optionLength);

		[global::System.Runtime.InteropServices.DllImport("ws2_32.dll", EntryPoint="getsockopt", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System_Net_Sockets.SocketError__System_Net_Primitives getsockopt__1(
					global::System.IntPtr socketHandle, 
					global::System_Net_Sockets.SocketOptionLevel__System_Net_Sockets optionLevel, 
					global::System_Net_Sockets.SocketOptionName__System_Net_Sockets optionName, 
					global::_.Interop_Winsock_IPMulticastRequest__System_Net_Sockets* optionValue, 
					int* optionLength);

		[global::System.Runtime.InteropServices.DllImport("ws2_32.dll", EntryPoint="getsockopt", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System_Net_Sockets.SocketError__System_Net_Primitives getsockopt__2(
					global::System.IntPtr socketHandle, 
					global::System_Net_Sockets.SocketOptionLevel__System_Net_Sockets optionLevel, 
					global::System_Net_Sockets.SocketOptionName__System_Net_Sockets optionName, 
					global::_.Interop_Winsock_IPv6MulticastRequest__System_Net_Sockets__Impl.UnsafeType* optionValue, 
					int* optionLength);

		[global::System.Runtime.InteropServices.DllImport("ws2_32.dll", EntryPoint="ioctlsocket", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System_Net_Sockets.SocketError__System_Net_Primitives ioctlsocket__0(
					global::System.IntPtr handle, 
					int cmd, 
					int* argp);

		[global::System.Runtime.InteropServices.DllImport("ws2_32.dll", EntryPoint="setsockopt", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System_Net_Sockets.SocketError__System_Net_Primitives setsockopt__2(
					global::System.IntPtr handle, 
					global::System_Net_Sockets.SocketOptionLevel__System_Net_Sockets optionLevel, 
					global::System_Net_Sockets.SocketOptionName__System_Net_Sockets optionName, 
					global::_.Interop_Winsock_Linger__System_Net_Sockets* linger, 
					int optionLength);

		[global::System.Runtime.InteropServices.DllImport("ws2_32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System.IntPtr accept(
					global::System.IntPtr socketHandle, 
					byte* socketAddress, 
					int* socketAddressSize);

		[global::System.Runtime.InteropServices.DllImport("ws2_32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int GetAddrInfoExW(
					ushort* pName, 
					ushort* pServiceName, 
					int dwNamespace, 
					global::System.IntPtr lpNspId, 
					global::System_Net_Sockets.AddressInfoEx__System_Net_NameResolution* pHints, 
					global::System_Net_Sockets.AddressInfoEx__System_Net_NameResolution** ppResult, 
					global::System.IntPtr timeout, 
					global::System_Threading.NativeOverlapped__System_Private_CoreLib* lpOverlapped, 
					void* lpCompletionRoutine, 
					global::System.IntPtr* lpNameHandle);

		[global::System.Runtime.InteropServices.DllImport("ws2_32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System_Net_Sockets.SocketError__System_Net_Primitives WSARecv(
					global::System.IntPtr socketHandle, 
					global::System_Net_Sockets.WSABuffer__System_Net_Sockets* buffer, 
					int bufferCount, 
					int* bytesTransferred, 
					global::System_Net_Sockets.SocketFlags__System_Net_Sockets* socketFlags, 
					global::System_Threading.NativeOverlapped__System_Private_CoreLib* overlapped, 
					global::System.IntPtr completionRoutine);

		[global::System.Runtime.InteropServices.DllImport("ws2_32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System_Net_Sockets.SocketError__System_Net_Primitives WSASend(
					global::System.IntPtr socketHandle, 
					global::System_Net_Sockets.WSABuffer__System_Net_Sockets* buffers, 
					int bufferCount, 
					int* bytesTransferred, 
					global::System_Net_Sockets.SocketFlags__System_Net_Sockets socketFlags, 
					global::System_Threading.NativeOverlapped__System_Private_CoreLib* overlapped, 
					global::System.IntPtr completionRoutine);

		[global::System.Runtime.InteropServices.DllImport("ws2_32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System_Net_Sockets.SocketError__System_Net_Primitives GetNameInfoW(
					byte* sa, 
					int salen, 
					ushort* host, 
					int hostlen, 
					ushort* serv, 
					int servlen, 
					int flags);
	}

	public unsafe static partial class OleAut32_PInvokes
	{
		[global::System.Runtime.InteropServices.DllImport("OleAut32", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static void SysFreeString(global::System.IntPtr bstr);
	}

	public unsafe static partial class ncrypt_dll_PInvokes
	{
		[global::System.Runtime.InteropServices.DllImport("ncrypt.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::_.Interop_NCrypt_ErrorCode__System_Security_Cryptography_Cng NCryptOpenKey(
					global::System.IntPtr hProvider, 
					global::System.IntPtr* phKey, 
					ushort* pszKeyName, 
					int dwLegacyKeySpec, 
					global::System_Security_Cryptography.CngKeyOpenOptions__System_Security_Cryptography_Cng dwFlags);

		[global::System.Runtime.InteropServices.DllImport("ncrypt.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::_.Interop_NCrypt_ErrorCode__System_Security_Cryptography_Cng NCryptDeleteKey(
					global::System.IntPtr hKey, 
					int dwFlags);

		[global::System.Runtime.InteropServices.DllImport("ncrypt.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::_.Interop_NCrypt_ErrorCode__System_Security_Cryptography_Cng NCryptOpenStorageProvider(
					global::System.IntPtr* phProvider, 
					ushort* pszProviderName, 
					int dwFlags);

		[global::System.Runtime.InteropServices.DllImport("ncrypt.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::_.Interop_NCrypt_ErrorCode__System_Security_Cryptography_Cng NCryptFreeObject(global::System.IntPtr hObject);

		[global::System.Runtime.InteropServices.DllImport("ncrypt.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::_.Interop_NCrypt_ErrorCode__System_Security_Cryptography_Cng NCryptImportKey(
					global::System.IntPtr hProvider, 
					global::System.IntPtr hImportKey, 
					ushort* pszBlobType, 
					global::System.IntPtr pParameterList, 
					global::System.IntPtr* phKey, 
					byte* pbData, 
					int cbData, 
					int dwFlags);

		[global::System.Runtime.InteropServices.DllImport("ncrypt.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::_.Interop_NCrypt_ErrorCode__System_Security_Cryptography_Cng NCryptGetProperty(
					global::System.IntPtr hObject, 
					ushort* pszProperty, 
					void* pbOutput, 
					int cbOutput, 
					int* pcbResult, 
					global::System_Security_Cryptography.CngPropertyOptions__System_Security_Cryptography_Cng dwFlags);

		[global::System.Runtime.InteropServices.DllImport("ncrypt.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::_.Interop_NCrypt_ErrorCode__System_Security_Cryptography_Cng NCryptSetProperty(
					global::System.IntPtr hObject, 
					ushort* pszProperty, 
					void* pbInput, 
					int cbInput, 
					global::System_Security_Cryptography.CngPropertyOptions__System_Security_Cryptography_Cng dwFlags);
	}

	public unsafe static partial class api_ms_win_core_winrt_robuffer_l1_1_0_dll_PInvokes
	{
		[global::System.Runtime.InteropServices.DllImport("api-ms-win-core-winrt-robuffer-l1-1-0.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static int RoGetBufferMarshaler(void** bufferMarshalerPtr);
	}

	public unsafe static partial class BCrypt_dll_PInvokes
	{
		[global::System.Runtime.InteropServices.DllImport("BCrypt.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::_.Interop_BCrypt_NTSTATUS__System_Security_Cryptography_Algorithms BCryptGenRandom(
					global::System.IntPtr hAlgorithm, 
					byte* pbBuffer, 
					int cbBuffer, 
					int dwFlags);

		[global::System.Runtime.InteropServices.DllImport("BCrypt.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::_.Interop_BCrypt_NTSTATUS__System_Security_Cryptography_X509Certificates BCryptExportKey(
					global::System.IntPtr hKey, 
					global::System.IntPtr hExportKey, 
					ushort* pszBlobType, 
					byte* pbOutput, 
					int cbOutput, 
					int* pcbResult, 
					int dwFlags);

		[global::System.Runtime.InteropServices.DllImport("BCrypt.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::_.Interop_BCrypt_NTSTATUS__System_Security_Cryptography_X509Certificates BCryptGetProperty(
					global::System.IntPtr hObject, 
					ushort* pszProperty, 
					void* pbOutput, 
					int cbOutput, 
					int* pcbResult, 
					int dwFlags);

		[global::System.Runtime.InteropServices.DllImport("BCrypt.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::_.Interop_BCrypt_NTSTATUS__System_Security_Cryptography_X509Certificates BCryptDestroyKey(global::System.IntPtr hKey);

		[global::System.Runtime.InteropServices.DllImport("BCrypt.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::_.Interop_BCrypt_NTSTATUS__System_Security_Cryptography_Algorithms BCryptCreateHash(
					global::System.IntPtr hAlgorithm, 
					global::System.IntPtr* phHash, 
					global::System.IntPtr pbHashObject, 
					int cbHashObject, 
					byte* pbSecret, 
					int cbSecret, 
					global::_.Interop_BCrypt_BCryptCreateHashFlags__System_Security_Cryptography_Algorithms dwFlags);

		[global::System.Runtime.InteropServices.DllImport("BCrypt.dll", EntryPoint="BCryptGetProperty", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::_.Interop_BCrypt_NTSTATUS__System_Security_Cryptography_Algorithms BCryptGetProperty__0(
					global::System.IntPtr hObject, 
					ushort* pszProperty, 
					void* pbOutput, 
					int cbOutput, 
					int* pcbResult, 
					int dwFlags);

		[global::System.Runtime.InteropServices.DllImport("BCrypt.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::_.Interop_BCrypt_NTSTATUS__System_Security_Cryptography_Algorithms BCryptOpenAlgorithmProvider(
					global::System.IntPtr* phAlgorithm, 
					ushort* pszAlgId, 
					ushort* pszImplementation, 
					global::_.Interop_BCrypt_BCryptOpenAlgorithmProviderFlags__System_Security_Cryptography_Algorithms dwFlags);

		[global::System.Runtime.InteropServices.DllImport("BCrypt.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::_.Interop_BCrypt_NTSTATUS__System_Security_Cryptography_Algorithms BCryptCloseAlgorithmProvider(
					global::System.IntPtr hAlgorithm, 
					int dwFlags);

		[global::System.Runtime.InteropServices.DllImport("BCrypt.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::_.Interop_BCrypt_NTSTATUS__System_Security_Cryptography_Algorithms BCryptDestroyHash(global::System.IntPtr hHash);
	}

	public unsafe static partial class sspicli_dll_PInvokes
	{
		[global::System.Runtime.InteropServices.DllImport("sspicli.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int LsaGetLogonSessionData(
					global::_.Interop_LUID__System_Security_Principal_Windows* LogonId, 
					global::System.IntPtr* ppLogonSessionData);

		[global::System.Runtime.InteropServices.DllImport("sspicli.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int LsaFreeReturnBuffer(global::System.IntPtr handle);

		[global::System.Runtime.InteropServices.DllImport("sspicli.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int EncryptMessage(
					global::_.Interop_SspiCli_CredHandle__System_Net_Security* contextHandle, 
					uint qualityOfProtection, 
					global::_.Interop_SspiCli_SecBufferDesc__System_Net_Security* inputOutput, 
					uint sequenceNumber);

		[global::System.Runtime.InteropServices.DllImport("sspicli.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int DecryptMessage(
					global::_.Interop_SspiCli_CredHandle__System_Net_Security* contextHandle, 
					global::_.Interop_SspiCli_SecBufferDesc__System_Net_Security* inputOutput, 
					uint sequenceNumber, 
					uint* qualityOfProtection);

		[global::System.Runtime.InteropServices.DllImport("sspicli.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int EnumerateSecurityPackagesW(
					int* pkgnum, 
					global::System.IntPtr* handle);

		[global::System.Runtime.InteropServices.DllImport("sspicli.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int QueryContextAttributesW(
					global::_.Interop_SspiCli_CredHandle__System_Net_Security* contextHandle, 
					global::_.Interop_SspiCli_ContextAttribute__System_Net_Security attribute, 
					void* buffer);

		[global::System.Runtime.InteropServices.DllImport("sspicli.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int ApplyControlToken(
					void* inContextPtr, 
					global::_.Interop_SspiCli_SecBufferDesc__System_Net_Security* inputBuffers);

		[global::System.Runtime.InteropServices.DllImport("sspicli.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int FreeContextBuffer(global::System.IntPtr contextBuffer);

		[global::System.Runtime.InteropServices.DllImport("sspicli.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int AcceptSecurityContext(
					global::_.Interop_SspiCli_CredHandle__System_Net_Security* credentialHandle, 
					void* inContextPtr, 
					global::_.Interop_SspiCli_SecBufferDesc__System_Net_Security* inputBuffer, 
					global::_.Interop_SspiCli_ContextFlags__System_Net_Security inFlags, 
					global::_.Interop_SspiCli_Endianness__System_Net_Security endianness, 
					global::_.Interop_SspiCli_CredHandle__System_Net_Security* outContextPtr, 
					global::_.Interop_SspiCli_SecBufferDesc__System_Net_Security* outputBuffer, 
					global::_.Interop_SspiCli_ContextFlags__System_Net_Security* attributes, 
					long* timeStamp);

		[global::System.Runtime.InteropServices.DllImport("sspicli.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int DeleteSecurityContext(global::_.Interop_SspiCli_CredHandle__System_Net_Security* handlePtr);

		[global::System.Runtime.InteropServices.DllImport("sspicli.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int InitializeSecurityContextW(
					global::_.Interop_SspiCli_CredHandle__System_Net_Security* credentialHandle, 
					void* inContextPtr, 
					byte* targetName, 
					global::_.Interop_SspiCli_ContextFlags__System_Net_Security inFlags, 
					int reservedI, 
					global::_.Interop_SspiCli_Endianness__System_Net_Security endianness, 
					global::_.Interop_SspiCli_SecBufferDesc__System_Net_Security* inputBuffer, 
					int reservedII, 
					global::_.Interop_SspiCli_CredHandle__System_Net_Security* outContextPtr, 
					global::_.Interop_SspiCli_SecBufferDesc__System_Net_Security* outputBuffer, 
					global::_.Interop_SspiCli_ContextFlags__System_Net_Security* attributes, 
					long* timeStamp);

		[global::System.Runtime.InteropServices.DllImport("sspicli.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int AcquireCredentialsHandleW(
					ushort* principal, 
					ushort* moduleName, 
					int usage, 
					void* logonID, 
					global::_.Interop_SspiCli_SCHANNEL_CRED__System_Net_Security* authData, 
					void* keyCallback, 
					void* keyArgument, 
					global::_.Interop_SspiCli_CredHandle__System_Net_Security* handlePtr, 
					long* timeStamp);

		[global::System.Runtime.InteropServices.DllImport("sspicli.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int FreeCredentialsHandle(global::_.Interop_SspiCli_CredHandle__System_Net_Security* handlePtr);
	}

	public unsafe static partial class iphlpapi_dll_PInvokes
	{
		[global::System.Runtime.InteropServices.DllImport("iphlpapi.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static uint GetNetworkParams(
					global::System.IntPtr pFixedInfo, 
					uint* pOutBufLen);
	}
}

